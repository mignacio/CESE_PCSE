
CESE_PCSE/out/CESE_PCSE.elf:     file format elf32-littlearm
CESE_PCSE/out/CESE_PCSE.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00078d

Program Header:
0x70000001 off    0x00018978 vaddr 0x1a008978 paddr 0x1a008978 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002230 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008980 memsz 0x00008980 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008980 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008974  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a008980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002230  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a008974  1a008974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a008978  1a008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  100022d4  100022d4  000200a4  2**2
                  CONTENTS
 19 .debug_info   00035e0f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006b2d  00000000  00000000  00055eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000cb54  00000000  00000000  0005c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000f70  00000000  00000000  00069534  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001148  00000000  00000000  0006a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00012260  00000000  00000000  0006b5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001fab7  00000000  00000000  0007d84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031c23  00000000  00000000  0009d303  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000cef26  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000cef8e  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000030cc  00000000  00000000  000cefc0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008974 l    d  .init_array	00000000 .init_array
1a008978 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100022d4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 sensor_tasks.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 measurement.c
100000a4 l     O .bss	00000040 measurement_string.15152
00000000 l    df *ABS*	00000000 analog_sensors.c
00000000 l    df *ABS*	00000000 hm-10.c
00000000 l    df *ABS*	00000000 max31855.c
00000000 l    df *ABS*	00000000 system.c
100000e8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
100000f0 l     O .bss	00002000 ucHeap
100000ec l     O .bss	00000004 pucAlignedHeap.11512
100020f0 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 timers.c
1a000968 l     F .text	00000020 prvGetNextExpireTime
1a000988 l     F .text	00000048 prvInsertTimerInActiveList
1a0009d0 l     F .text	0000005c prvCheckForValidListAndQueue
1a000d54 l     F .text	00000016 prvTimerTask
1a000ae8 l     F .text	00000078 prvSwitchTimerLists
1a000b60 l     F .text	0000002c prvSampleTimeNow
1a000b8c l     F .text	00000060 prvProcessExpiredTimer
1a000bec l     F .text	00000074 prvProcessTimerOrBlockTask
1a000c60 l     F .text	000000f4 prvProcessReceivedCommands
100020f4 l     O .bss	00000004 pxCurrentTimerList
100020f8 l     O .bss	00000004 pxOverflowTimerList
100020fc l     O .bss	00000014 xActiveTimerList1
10002110 l     O .bss	00000014 xActiveTimerList2
10002124 l     O .bss	00000004 xLastTime.11818
10002128 l     O .bss	00000004 xTimerQueue
1000212c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 tasks.c
1a000d6c l     F .text	0000002c prvResetNextTaskUnblockTime
1a000d98 l     F .text	00000012 prvDeleteTCB
1a000daa l     F .text	00000090 prvInitialiseNewTask
1a000e3c l     F .text	00000068 prvInitialiseTaskLists
1a000ea4 l     F .text	000000ac prvAddNewTaskToReadyList
1a000f50 l     F .text	0000004c prvCheckTasksWaitingTermination
1a000f9c l     F .text	00000028 prvIdleTask
1a000fc4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002134 l     O .bss	00000004 pxDelayedTaskList
10002138 l     O .bss	00000004 pxOverflowDelayedTaskList
1000213c l     O .bss	0000008c pxReadyTasksLists
100021c8 l     O .bss	00000004 uxCurrentNumberOfTasks
100021cc l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100021d0 l     O .bss	00000004 uxPendedTicks
100021d4 l     O .bss	00000004 uxSchedulerSuspended
100021d8 l     O .bss	00000004 uxTaskNumber
100021dc l     O .bss	00000004 uxTopReadyPriority
100021e0 l     O .bss	00000014 xDelayedTaskList1
100021f4 l     O .bss	00000014 xDelayedTaskList2
10002208 l     O .bss	00000004 xIdleTaskHandle
1000220c l     O .bss	00000004 xNextTaskUnblockTime
10002210 l     O .bss	00000004 xNumOfOverflows
10002214 l     O .bss	00000014 xPendingReadyList
10002228 l     O .bss	00000004 xSchedulerRunning
1000222c l     O .bss	00000014 xSuspendedTaskList
10002240 l     O .bss	00000014 xTasksWaitingTermination
10002254 l     O .bss	00000004 xTickCount
10002258 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
1a001890 l     F .text	0000001e prvIsQueueFull
1a0018ae l     F .text	0000001a prvIsQueueEmpty
1a0018c8 l     F .text	00000076 prvCopyDataToQueue
1a00193e l     F .text	00000024 prvCopyDataFromQueue
1a001962 l     F .text	0000006e prvUnlockQueue
1a001a54 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 port.c
1a001ee8 l     F .text	00000040 prvTaskExitError
1a001f28 l     F .text	00000022 prvPortStartFirstTask
1a001f50 l     F .text	0000000e vPortEnableVFP
1a001fb0 l       .text	00000000 pxCurrentTCBConst2
1a002090 l       .text	00000000 pxCurrentTCBConst
1000225c l     O .bss	00000001 ucMaxSysCallPriority
10002260 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008634 l     O .text	00000004 InitClkStates
1a008638 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a002334 l     F .text	00000044 Board_LED_Init
1a002378 l     F .text	00000040 Board_TEC_Init
1a0023b8 l     F .text	00000040 Board_GPIO_Init
1a0023f8 l     F .text	00000030 Board_ADC_Init
1a002428 l     F .text	00000038 Board_SPI_Init
1a002460 l     F .text	00000024 Board_I2C_Init
1a0086b0 l     O .text	00000008 GpioButtons
1a0086b8 l     O .text	0000000c GpioLeds
1a0086c4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002522 l     F .text	0000001a SSP_Write2BFifo
1a00253c l     F .text	00000018 SSP_Write1BFifo
1a002554 l     F .text	00000042 SSP_Read2BFifo
1a002596 l     F .text	00000040 SSP_Read1BFifo
1a0025d8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0025ec l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0027b4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0027c8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0086dc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002a94 l     F .text	000000a0 pll_calc_divs
1a002b34 l     F .text	0000010c pll_get_frac
1a002c40 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002eb4 l     F .text	00000022 Chip_Clock_GetDivRate
10002268 l     O .bss	00000008 audio_usb_pll_freq
1a008730 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003020 l     F .text	0000002c Chip_UART_GetIndex
1a00879c l     O .text	00000008 UART_BClock
1a0087a4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003210 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a008894 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002270 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a00431c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0046d0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a008978 l       .init_array	00000000 __init_array_end
1a008974 l       .bss_RAM5	00000000 __preinit_array_end
1a008974 l       .init_array	00000000 __init_array_start
1a008974 l       .bss_RAM5	00000000 __preinit_array_start
1a0054c0 g     F .text	00000010 _malloc_usable_size_r
1a002cd8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00082c g     F .text	00000012 _isatty_r
1a004cb8 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00083e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001ff8 g     F .text	0000002c vPortExitCritical
1a0039c4 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004c88 g     F .text	00000030 printf
1a00251a g     F .text	00000008 __stdio_init
100022c8 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a004e3e g     F .text	00000024 __sseek
1a0043cc g     F .text	00000070 __sinit
1a004e90 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001e94 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004370 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0028f0 g     F .text	0000000c Chip_ADC_SetResolution
1a0051c0 g     F .text	0000000c __malloc_unlock
1a002094 g     F .text	0000002c SysTick_Handler
1a0030a0 g     F .text	00000040 Chip_UART_SetBaud
100022c9 g     O .bss	00000001 __lock___arc4random_mutex
1a000788  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0024bc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a005180 g     F .text	00000034 memmove
1a002030 g     F .text	00000064 PendSV_Handler
1a001c40 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a008980 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002130 g     O .bss	00000004 pxCurrentTCB
1a000822 g     F .text	0000000a _fstat_r
53ff7102 g       *ABS*	00000000 __valid_user_code_checksum
1a008980 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001624 g     F .text	00000018 vTaskInternalSetTimeOutState
1a005500 g     O .text	00001000 adc_look_up
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002f56 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000658 g     F .text	0000000c measurement_set_name
1a0020f8 g     F .text	00000110 xPortStartScheduler
1a004552 g     F .text	0000001c memcpy
1a001530 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0003f8 g     F .text	0000012c temp_sensor_task
1a004364 g     F .text	0000000c _cleanup_r
1a0052d0 g     F .text	000001f0 _svfprintf_r
1a00394c g     F .text	00000022 .hidden __floatsidf
1a0020c0  w    F .text	00000038 vPortSetupTimerInterrupt
1a00058c g     F .text	0000002a assert_task_init
1a003e94 g     F .text	00000000 .hidden __aeabi_uldivmod
100022d4 g       .noinit	00000000 _noinit
1a004d94 g     F .text	00000010 puts
1a000950 g     F .text	00000016 vPortFree
1a00360a g     F .text	00000016 uartWriteString
100022c0 g     O .bss	00000004 SystemCoreClock
1a00304c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002208 g     F .text	0000005c vPortValidateInterruptPriority
1a0006a8 g     F .text	0000002c hm10_send_at_command
1a002808 g     F .text	00000018 readAdcVal
1000227c g     O .bss	00000004 measurement_queue
1a000180  w    F .text	00000002 UsageFault_Handler
1a002fd4 g     F .text	0000004c Chip_Clock_GetRate
1a001820 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0022bc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00392c g     F .text	0000001e .hidden __aeabi_ui2d
1a003ec4 g     F .text	000002d0 .hidden __udivmoddi4
1a0036a8 g     F .text	00000000 .hidden __aeabi_drsub
1a0008c0 g     F .text	00000020 _sbrk_r
1a0086ac g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00351c g     F .text	0000002c spiRead
1a000848 g     F .text	0000004e _read_r
1a00181a g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a001d10 g     F .text	0000015c xQueueReceive
10002280 g     O .bss	00000040 xQueueRegistry
1a003970 g     F .text	00000042 .hidden __extendsfdf2
1a003c74 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0036b4 g     F .text	00000276 .hidden __adddf3
1a008978 g       .ARM.exidx	00000000 __exidx_start
1a000640 g     F .text	00000018 measurement_queue_init
100022ca g     O .bss	00000001 __lock___env_recursive_mutex
1a003a20 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a0027fa g     F .text	0000000e setStartMode
100022cb g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00893c g     O .text	00000004 _global_impure_ptr
1a0051cc g     F .text	0000004c _realloc_r
1a004504 g     F .text	00000048 __libc_init_array
1a00392c g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0008e0 g     F .text	00000070 pvPortMalloc
1a0024d8 g     F .text	00000030 Board_Init
1a000816  w    F .text	00000002 _init
1a001804 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a002616 g     F .text	000000a8 Chip_SSP_RWFrames_Blocking
1a001154 g     F .text	0000000c xTaskGetTickCount
1a001ac0 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100022d4 g       .bss	00000000 _ebss
1a0028fc g     F .text	0000002a Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00078c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002778 g     F .text	00000038 Chip_I2C_SetClockRate
1a003e44 g     F .text	0000004e .hidden __fixdfsi
1a0016ec g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002c8c g     F .text	0000004c Chip_Clock_EnableCrystal
100022cc g     O .bss	00000001 __lock___malloc_recursive_mutex
1a002860 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001598 g     F .text	0000008c xTaskRemoveFromEventList
1a0017cc  w    F .text	0000001c vApplicationMallocFailedHook
1a0036b4 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a00289e g     F .text	00000020 Chip_ADC_SetStartMode
1a0039b4 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0088dc g     O .text	00000020 __sf_fake_stderr
1a002754 g     F .text	00000024 Chip_I2C_Init
1a004550 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002e48 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005218 g     F .text	000000b6 __ssputs_r
1a0087ac g     O .text	000000e6 gpioPinsInit
1a0017a0  w    F .text	0000002c vAssertCalled
1a006500 g     O .text	00001000 pace_look_up
1a0035f0 g     F .text	0000001a uartWriteByte
1a002604 g     F .text	00000012 Chip_SSP_SetClockRate
1a0046fe g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a000740 g     F .text	00000048 max31855_int_temp_to_celsius
1a00439c g     F .text	0000000c __sfp_lock_acquire
1a0050e0 g     F .text	00000000 memchr
1a00163c g     F .text	00000084 xTaskCheckForTimeOut
1a004580 g     F .text	0000009c _free_r
1a0034c4 g     F .text	00000058 adcRead
1a002f30 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a4 g       .bss	00000000 _bss
1a002868 g     F .text	00000036 Chip_ADC_ReadStatus
1a0028be g     F .text	00000032 Chip_ADC_SetSampleRate
1a0036b0 g     F .text	0000027a .hidden __aeabi_dsub
10002264 g     O .bss	00000004 freeRtosInterruptCallback
1a001144 g     F .text	00000010 vTaskSuspendAll
1a0039b4 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0026be g     F .text	0000003e Chip_SSP_SetBitRate
1a00186a g     F .text	00000026 uxListRemove
1a0027b0 g     F .text	00000002 Chip_GPIO_Init
1a0086d8 g     O .text	00000004 OscRateIn
1a003574 g     F .text	0000007c uartInit
100022d4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a004e6a g     F .text	00000026 strncpy
1a001464 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001560 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000818 g     F .text	0000000a _close_r
1a00394c g     F .text	00000022 .hidden __aeabi_i2d
1a003244 g     F .text	000001ac gpioInit
1a000a7c g     F .text	0000006c xTimerGenericCommand
1a004f34 g     F .text	000000dc __swsetup_r
1a0017e8  w    F .text	0000001c vApplicationStackOverflowHook
1a004194  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003c74 g     F .text	000001d0 .hidden __divdf3
1a00443c g     F .text	0000008c __sfp
1a0043c0 g     F .text	0000000c __sinit_lock_release
1a003a20 g     F .text	00000254 .hidden __muldf3
1a004de4 g     F .text	00000022 __sread
1a003620 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0051b4 g     F .text	0000000c __malloc_lock
1a0024a8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0042a4 g     F .text	00000078 _fflush_r
1a0088fc g     O .text	00000020 __sf_fake_stdin
1a002cf4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00454e g     F .text	00000002 __retarget_lock_acquire_recursive
1a00456e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
100000e4 g     O .bss	00000001 spi_port
1a0005b8 g     F .text	00000088 main
1a00454c g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001836 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001f90 g     F .text	00000024 SVC_Handler
1a004e62 g     F .text	00000008 __sclose
1a000a2c g     F .text	00000050 xTimerCreateTimerTask
1a000664 g     F .text	00000030 measurement_to_string
1a00461c g     F .text	000000b4 _malloc_r
1a0039c4 g     F .text	0000005a .hidden __aeabi_l2d
1a003548 g     F .text	00000018 uartTxReady
1a001374 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002f64 g     F .text	0000003c Chip_Clock_EnableOpts
1a002512 g     F .text	00000008 __stdio_getchar
1a001a76 g     F .text	00000048 xQueueGenericCreate
1a002d10 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002dc8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0031bc g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0033f0 g     F .text	0000006a gpioWrite
1a000814  w    F .text	00000002 _fini
1a004c88 g     F .text	00000030 iprintf
1a001278 g     F .text	000000fc xTaskResumeAll
1a004da4 g     F .text	00000040 sprintf
1a0010c0 g     F .text	00000084 vTaskStartScheduler
1a002820 g     F .text	00000040 Chip_ADC_Init
100022c4 g     O .bss	00000004 g_pUsbApi
1a002284 g     F .text	00000038 Board_SetupMuxing
1a000694 g     F .text	00000012 analog_sensor_read
1a0030e0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000896 g     F .text	00000028 _write_r
1a000708 g     F .text	0000000c hm10_send_string
1a007500 g     O .text	00001000 vbat_look_up
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004974 g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a004198 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0052d0 g     F .text	000001f0 _svfiprintf_r
1a003560 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a000524 g     F .text	00000068 hm10_task
10000000 g       .data	00000000 _data
1a0016c0 g     F .text	0000000c vTaskMissedYield
100022d4 g       .bss	00000000 _pvHeapStart
1a0006d4 g     F .text	00000034 hm10_init
1a000178 g       .text	00000000 __section_table_end
1a0026fc g     F .text	00000038 Chip_SSP_Init
1a001e6c g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001160 g     F .text	00000118 xTaskIncrementTick
1a005010 g     F .text	00000048 __swhatbuf_r
1a002264 g     F .text	00000020 DAC_IRQHandler
1a002484 g     F .text	00000024 Board_Debug_Init
1a002508 g     F .text	0000000a __stdio_putchar
1a0019d0 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002734 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100022cd g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00105c g     F .text	00000062 xTaskCreate
1a002928 g     F .text	00000158 Chip_SetupCoreClock
1a004e06 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a004724 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a0044c8 g     F .text	0000003c _fwalk_reent
1a002a80 g     F .text	00000014 SystemCoreClockUpdate
1a003e44 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001418 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0043a8 g     F .text	0000000c __sfp_lock_release
1a00891c g     O .text	00000020 __sf_fake_stdout
1a004da4 g     F .text	00000040 siprintf
1a0016cc g     F .text	00000020 xTaskGetSchedulerState
1a000300 g     F .text	000000f8 analog_sensors_task
1a004194  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
100022ce g     O .bss	00000001 __lock___dd_hash_mutex
1a005058 g     F .text	00000080 __smakebuf_r
100022cf g     O .bss	00000001 __lock___tz_mutex
1a001f64 g     F .text	0000002c pxPortInitialiseStack
1a004a60 g     F .text	00000228 _printf_i
1a000714 g     F .text	0000002c max31855_read
1a002fa0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002278 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00345a g     F .text	00000068 gpioRead
1a003970 g     F .text	00000042 .hidden __aeabi_f2d
1a00363c g     F .text	0000006c boardInit
1a001fb4 g     F .text	00000044 vPortEnterCritical
10002274 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0036b0 g     F .text	0000027a .hidden __subdf3
1a004724 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002ed8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0031f4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100022d0 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0043b4 g     F .text	0000000c __sinit_lock_acquire
1a002328 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 8d 07 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 02 71 ff 53     }............q.S
	...
1a00002c:	91 1f 00 1a 85 01 00 1a 00 00 00 00 31 20 00 1a     ............1 ..
1a00003c:	95 20 00 1a                                         . ..

1a000040 <g_pfnVendorVectors>:
1a000040:	65 22 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     e"..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	21 36 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     !6..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a008980 	.word	0x1a008980
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a008980 	.word	0x1a008980
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a008980 	.word	0x1a008980
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a008980 	.word	0x1a008980
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a008980 	.word	0x1a008980
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002230 	.word	0x00002230
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <analog_sensors_task>:
#include "FreeRTOS.h"
#include "look_up_tables.h"
#include <string.h>

void analog_sensors_task(void* taskParamPtr)
{
1a000300:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000302:	b09d      	sub	sp, #116	; 0x74
	TickType_t xLastWakeTime;
	const TickType_t xPeriodicity = pdMS_TO_TICKS(1000);

	analog_sensor_t vbatt_sensor;
	vbatt_sensor.scale = 32;
1a000304:	2720      	movs	r7, #32
1a000306:	9717      	str	r7, [sp, #92]	; 0x5c
	vbatt_sensor.adc_pin = CH1;
1a000308:	2500      	movs	r5, #0
1a00030a:	f88d 5065 	strb.w	r5, [sp, #101]	; 0x65
	strncpy(vbatt_sensor.name, "Vbat\0", 5);
1a00030e:	4c35      	ldr	r4, [pc, #212]	; (1a0003e4 <analog_sensors_task+0xe4>)
1a000310:	e894 0003 	ldmia.w	r4, {r0, r1}
1a000314:	9018      	str	r0, [sp, #96]	; 0x60
1a000316:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
	vbatt_sensor.look_up_table_ptr = &vbat_look_up;
1a00031a:	4b33      	ldr	r3, [pc, #204]	; (1a0003e8 <analog_sensors_task+0xe8>)
1a00031c:	931a      	str	r3, [sp, #104]	; 0x68

	measurement_t vbatt_meas;
	vbatt_meas.decimal_pos = VBATT_DEC_POS;
1a00031e:	2603      	movs	r6, #3
1a000320:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
	vbatt_meas.fault_code = 0;
1a000324:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
	measurement_set_name(&vbatt_meas, vbatt_sensor.name);
1a000328:	a918      	add	r1, sp, #96	; 0x60
1a00032a:	a812      	add	r0, sp, #72	; 0x48
1a00032c:	f000 f994 	bl	1a000658 <measurement_set_name>

	analog_sensor_t o2_sensor;
	o2_sensor.scale = 32;
1a000330:	970e      	str	r7, [sp, #56]	; 0x38
	o2_sensor.adc_pin = CH2;
1a000332:	2301      	movs	r3, #1
1a000334:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
	strncpy(o2_sensor.name, "_O2_\0", 5);
1a000338:	f104 0308 	add.w	r3, r4, #8
1a00033c:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000340:	900f      	str	r0, [sp, #60]	; 0x3c
1a000342:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
	o2_sensor.look_up_table_ptr = &adc_look_up;
1a000346:	4b29      	ldr	r3, [pc, #164]	; (1a0003ec <analog_sensors_task+0xec>)
1a000348:	9311      	str	r3, [sp, #68]	; 0x44

	measurement_t o2_meas;
	o2_meas.decimal_pos = VBATT_DEC_POS;
1a00034a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	o2_meas.fault_code = 0;
1a00034e:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
	measurement_set_name(&o2_meas, o2_sensor.name);
1a000352:	a90f      	add	r1, sp, #60	; 0x3c
1a000354:	a809      	add	r0, sp, #36	; 0x24
1a000356:	f000 f97f 	bl	1a000658 <measurement_set_name>

	analog_sensor_t ace_pres;
	ace_pres.scale = 32;
1a00035a:	9705      	str	r7, [sp, #20]
	ace_pres.adc_pin = CH3;
1a00035c:	2302      	movs	r3, #2
1a00035e:	f88d 301d 	strb.w	r3, [sp, #29]
	strncpy(ace_pres.name, "Pace\0", 5);
1a000362:	3410      	adds	r4, #16
1a000364:	e894 0003 	ldmia.w	r4, {r0, r1}
1a000368:	9006      	str	r0, [sp, #24]
1a00036a:	f88d 101c 	strb.w	r1, [sp, #28]
	ace_pres.look_up_table_ptr = &pace_look_up;
1a00036e:	4b20      	ldr	r3, [pc, #128]	; (1a0003f0 <analog_sensors_task+0xf0>)
1a000370:	9308      	str	r3, [sp, #32]

	measurement_t ace_meas;
	ace_meas.decimal_pos = VBATT_DEC_POS;
1a000372:	f88d 6008 	strb.w	r6, [sp, #8]
	ace_meas.fault_code = 0;
1a000376:	f88d 500e 	strb.w	r5, [sp, #14]
	measurement_set_name(&ace_meas, ace_pres.name);
1a00037a:	a906      	add	r1, sp, #24
1a00037c:	4668      	mov	r0, sp
1a00037e:	f000 f96b 	bl	1a000658 <measurement_set_name>

	while(TRUE)
	{
		xLastWakeTime = xTaskGetTickCount();
1a000382:	f000 fee7 	bl	1a001154 <xTaskGetTickCount>
1a000386:	901b      	str	r0, [sp, #108]	; 0x6c

		vbatt_meas.ticks = xLastWakeTime;
1a000388:	9013      	str	r0, [sp, #76]	; 0x4c
		vbatt_meas.value = analog_sensor_read(&vbatt_sensor);
1a00038a:	a816      	add	r0, sp, #88	; 0x58
1a00038c:	f000 f982 	bl	1a000694 <analog_sensor_read>
1a000390:	9012      	str	r0, [sp, #72]	; 0x48
		xQueueSend(measurement_queue, &vbatt_meas, portMAX_DELAY);
1a000392:	4c18      	ldr	r4, [pc, #96]	; (1a0003f4 <analog_sensors_task+0xf4>)
1a000394:	2300      	movs	r3, #0
1a000396:	f04f 32ff 	mov.w	r2, #4294967295
1a00039a:	a912      	add	r1, sp, #72	; 0x48
1a00039c:	6820      	ldr	r0, [r4, #0]
1a00039e:	f001 fb8f 	bl	1a001ac0 <xQueueGenericSend>

		o2_meas.ticks = xLastWakeTime;
1a0003a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0003a4:	930a      	str	r3, [sp, #40]	; 0x28
		o2_meas.value = analog_sensor_read(&o2_sensor);
1a0003a6:	a80d      	add	r0, sp, #52	; 0x34
1a0003a8:	f000 f974 	bl	1a000694 <analog_sensor_read>
1a0003ac:	9009      	str	r0, [sp, #36]	; 0x24
		xQueueSend(measurement_queue, &o2_meas, portMAX_DELAY);
1a0003ae:	2300      	movs	r3, #0
1a0003b0:	f04f 32ff 	mov.w	r2, #4294967295
1a0003b4:	a909      	add	r1, sp, #36	; 0x24
1a0003b6:	6820      	ldr	r0, [r4, #0]
1a0003b8:	f001 fb82 	bl	1a001ac0 <xQueueGenericSend>

		ace_meas.ticks = xLastWakeTime;
1a0003bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0003be:	9301      	str	r3, [sp, #4]
		ace_meas.value = analog_sensor_read(&ace_pres);
1a0003c0:	a804      	add	r0, sp, #16
1a0003c2:	f000 f967 	bl	1a000694 <analog_sensor_read>
1a0003c6:	9000      	str	r0, [sp, #0]
		xQueueSend(measurement_queue, &ace_meas, portMAX_DELAY);
1a0003c8:	2300      	movs	r3, #0
1a0003ca:	f04f 32ff 	mov.w	r2, #4294967295
1a0003ce:	4669      	mov	r1, sp
1a0003d0:	6820      	ldr	r0, [r4, #0]
1a0003d2:	f001 fb75 	bl	1a001ac0 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xPeriodicity);
1a0003d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0003da:	a81b      	add	r0, sp, #108	; 0x6c
1a0003dc:	f000 ffca 	bl	1a001374 <vTaskDelayUntil>
1a0003e0:	e7cf      	b.n	1a000382 <analog_sensors_task+0x82>
1a0003e2:	bf00      	nop
1a0003e4:	1a0054d0 	.word	0x1a0054d0
1a0003e8:	1a007500 	.word	0x1a007500
1a0003ec:	1a005500 	.word	0x1a005500
1a0003f0:	1a006500 	.word	0x1a006500
1a0003f4:	1000227c 	.word	0x1000227c

1a0003f8 <temp_sensor_task>:
	}
}

void temp_sensor_task(void* taskParamPtr)
{
1a0003f8:	b570      	push	{r4, r5, r6, lr}
1a0003fa:	b09c      	sub	sp, #112	; 0x70
	TickType_t xLastWakeTime;
	const TickType_t xPeriodicity = pdMS_TO_TICKS(2500);

	max31855_t adm_temp;
	strncpy(adm_temp.name, "Tadm\0", 5);
1a0003fc:	4c47      	ldr	r4, [pc, #284]	; (1a00051c <temp_sensor_task+0x124>)
1a0003fe:	f104 0318 	add.w	r3, r4, #24
1a000402:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000406:	9019      	str	r0, [sp, #100]	; 0x64
1a000408:	f88d 1068 	strb.w	r1, [sp, #104]	; 0x68
	memset(adm_temp.buffer, 0, MAX31855_BUFFER_SIZE);
1a00040c:	2600      	movs	r6, #0
1a00040e:	9618      	str	r6, [sp, #96]	; 0x60
	adm_temp.cs_pin = LCD3;
1a000410:	2012      	movs	r0, #18
1a000412:	f88d 0069 	strb.w	r0, [sp, #105]	; 0x69
	gpioInit(adm_temp.cs_pin, GPIO_OUTPUT);
1a000416:	2101      	movs	r1, #1
1a000418:	f002 ff14 	bl	1a003244 <gpioInit>

	measurement_t adm_meas;
	adm_meas.decimal_pos = MAX31855_EXTERNAL_DEC_POS;
1a00041c:	2502      	movs	r5, #2
1a00041e:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	measurement_set_name(&adm_meas, adm_temp.name);
1a000422:	a919      	add	r1, sp, #100	; 0x64
1a000424:	a812      	add	r0, sp, #72	; 0x48
1a000426:	f000 f917 	bl	1a000658 <measurement_set_name>

	max31855_t esc_temp;
	strncpy(esc_temp.name, "Tesc\0", 5);
1a00042a:	f104 0320 	add.w	r3, r4, #32
1a00042e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000432:	9010      	str	r0, [sp, #64]	; 0x40
1a000434:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
	memset(esc_temp.buffer, 0, MAX31855_BUFFER_SIZE);
1a000438:	960f      	str	r6, [sp, #60]	; 0x3c
	esc_temp.cs_pin = LCDRS;
1a00043a:	2013      	movs	r0, #19
1a00043c:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
	gpioInit(esc_temp.cs_pin, GPIO_OUTPUT);
1a000440:	2101      	movs	r1, #1
1a000442:	f002 feff 	bl	1a003244 <gpioInit>
	measurement_t esc_meas;
	esc_meas.decimal_pos = MAX31855_EXTERNAL_DEC_POS;
1a000446:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
	measurement_set_name(&esc_meas, esc_temp.name);
1a00044a:	a910      	add	r1, sp, #64	; 0x40
1a00044c:	a809      	add	r0, sp, #36	; 0x24
1a00044e:	f000 f903 	bl	1a000658 <measurement_set_name>

	max31855_t ace_temp;
	strncpy(ace_temp.name, "Tace\0", 5);
1a000452:	3428      	adds	r4, #40	; 0x28
1a000454:	e894 0003 	ldmia.w	r4, {r0, r1}
1a000458:	9007      	str	r0, [sp, #28]
1a00045a:	f88d 1020 	strb.w	r1, [sp, #32]
	memset(ace_temp.buffer, 0, MAX31855_BUFFER_SIZE);
1a00045e:	9606      	str	r6, [sp, #24]
	ace_temp.cs_pin = LCD4;
1a000460:	2014      	movs	r0, #20
1a000462:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
	gpioInit(ace_temp.cs_pin, GPIO_OUTPUT);
1a000466:	2101      	movs	r1, #1
1a000468:	f002 feec 	bl	1a003244 <gpioInit>
	measurement_t ace_meas;
	ace_meas.decimal_pos = MAX31855_EXTERNAL_DEC_POS;
1a00046c:	f88d 5008 	strb.w	r5, [sp, #8]
	measurement_set_name(&ace_meas, ace_temp.name);
1a000470:	a907      	add	r1, sp, #28
1a000472:	4668      	mov	r0, sp
1a000474:	f000 f8f0 	bl	1a000658 <measurement_set_name>

	vTaskDelay(pdMS_TO_TICKS(100));
1a000478:	2064      	movs	r0, #100	; 0x64
1a00047a:	f000 ffcd 	bl	1a001418 <vTaskDelay>
	while(TRUE)
	{
		xLastWakeTime = xTaskGetTickCount();
1a00047e:	f000 fe69 	bl	1a001154 <xTaskGetTickCount>
1a000482:	901b      	str	r0, [sp, #108]	; 0x6c

		adm_meas.ticks = xLastWakeTime;
1a000484:	9013      	str	r0, [sp, #76]	; 0x4c
		max31855_read(&adm_temp);
1a000486:	a816      	add	r0, sp, #88	; 0x58
1a000488:	f000 f944 	bl	1a000714 <max31855_read>
		adm_temp.external_temp = max31855_int_temp_to_celsius(&adm_temp);
1a00048c:	a816      	add	r0, sp, #88	; 0x58
1a00048e:	f000 f957 	bl	1a000740 <max31855_int_temp_to_celsius>
1a000492:	9017      	str	r0, [sp, #92]	; 0x5c
//		adm_temp.external_temp = max31855_ext_temp_to_celsius(&adm_temp);
		adm_meas.value = adm_temp.external_temp;
1a000494:	9012      	str	r0, [sp, #72]	; 0x48
		adm_meas.fault_code = adm_temp.buffer[3] & 0x0F;
1a000496:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
1a00049a:	f003 030f 	and.w	r3, r3, #15
1a00049e:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
		xQueueSend(measurement_queue, &adm_meas, portMAX_DELAY);
1a0004a2:	4c1f      	ldr	r4, [pc, #124]	; (1a000520 <temp_sensor_task+0x128>)
1a0004a4:	2300      	movs	r3, #0
1a0004a6:	f04f 32ff 	mov.w	r2, #4294967295
1a0004aa:	a912      	add	r1, sp, #72	; 0x48
1a0004ac:	6820      	ldr	r0, [r4, #0]
1a0004ae:	f001 fb07 	bl	1a001ac0 <xQueueGenericSend>

		esc_meas.ticks = xLastWakeTime;
1a0004b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0004b4:	930a      	str	r3, [sp, #40]	; 0x28
		max31855_read(&esc_temp);
1a0004b6:	a80d      	add	r0, sp, #52	; 0x34
1a0004b8:	f000 f92c 	bl	1a000714 <max31855_read>
		adm_temp.external_temp = max31855_int_temp_to_celsius(&esc_temp);
1a0004bc:	a80d      	add	r0, sp, #52	; 0x34
1a0004be:	f000 f93f 	bl	1a000740 <max31855_int_temp_to_celsius>
1a0004c2:	9017      	str	r0, [sp, #92]	; 0x5c
//		adm_temp.external_temp = max31855_ext_temp_to_celsius(&adm_temp);
		esc_meas.value = adm_temp.external_temp;
1a0004c4:	9009      	str	r0, [sp, #36]	; 0x24
		esc_meas.fault_code = adm_temp.buffer[3] & 0x0F;
1a0004c6:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
1a0004ca:	f003 030f 	and.w	r3, r3, #15
1a0004ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		xQueueSend(measurement_queue, &esc_meas, portMAX_DELAY);
1a0004d2:	2300      	movs	r3, #0
1a0004d4:	f04f 32ff 	mov.w	r2, #4294967295
1a0004d8:	a909      	add	r1, sp, #36	; 0x24
1a0004da:	6820      	ldr	r0, [r4, #0]
1a0004dc:	f001 faf0 	bl	1a001ac0 <xQueueGenericSend>

		ace_meas.ticks = xLastWakeTime;
1a0004e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0004e2:	9301      	str	r3, [sp, #4]
		max31855_read(&ace_temp);
1a0004e4:	a804      	add	r0, sp, #16
1a0004e6:	f000 f915 	bl	1a000714 <max31855_read>
		adm_temp.external_temp = max31855_int_temp_to_celsius(&ace_temp);
1a0004ea:	a804      	add	r0, sp, #16
1a0004ec:	f000 f928 	bl	1a000740 <max31855_int_temp_to_celsius>
1a0004f0:	9017      	str	r0, [sp, #92]	; 0x5c
//		adm_temp.external_temp = max31855_ext_temp_to_celsius(&adm_temp);
		ace_meas.value = adm_temp.external_temp;
1a0004f2:	9000      	str	r0, [sp, #0]
		ace_meas.fault_code = adm_temp.buffer[3] & 0x0F;
1a0004f4:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
1a0004f8:	f003 030f 	and.w	r3, r3, #15
1a0004fc:	f88d 300e 	strb.w	r3, [sp, #14]
		xQueueSend(measurement_queue, &ace_meas, portMAX_DELAY);
1a000500:	2300      	movs	r3, #0
1a000502:	f04f 32ff 	mov.w	r2, #4294967295
1a000506:	4669      	mov	r1, sp
1a000508:	6820      	ldr	r0, [r4, #0]
1a00050a:	f001 fad9 	bl	1a001ac0 <xQueueGenericSend>


		vTaskDelayUntil(&xLastWakeTime, xPeriodicity);
1a00050e:	f640 11c4 	movw	r1, #2500	; 0x9c4
1a000512:	a81b      	add	r0, sp, #108	; 0x6c
1a000514:	f000 ff2e 	bl	1a001374 <vTaskDelayUntil>
1a000518:	e7b1      	b.n	1a00047e <temp_sensor_task+0x86>
1a00051a:	bf00      	nop
1a00051c:	1a0054d0 	.word	0x1a0054d0
1a000520:	1000227c 	.word	0x1000227c

1a000524 <hm10_task>:
	}
	configASSERT(res == pdPASS);
}

void hm10_task(void* taskParamPtr)
{
1a000524:	b500      	push	{lr}
1a000526:	b085      	sub	sp, #20
	measurement_t measurement;

	hm10_init();
1a000528:	f000 f8d4 	bl	1a0006d4 <hm10_init>
1a00052c:	e00f      	b.n	1a00054e <hm10_task+0x2a>
				taskEXIT_CRITICAL();
			}
		}
		else
		{
			gpioWrite(LEDB, ON);
1a00052e:	2101      	movs	r1, #1
1a000530:	202a      	movs	r0, #42	; 0x2a
1a000532:	f002 ff5d 	bl	1a0033f0 <gpioWrite>
			vTaskDelay(pdMS_TO_TICKS(500));
1a000536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00053a:	f000 ff6d 	bl	1a001418 <vTaskDelay>
			gpioWrite(LEDB, OFF);
1a00053e:	2100      	movs	r1, #0
1a000540:	202a      	movs	r0, #42	; 0x2a
1a000542:	f002 ff55 	bl	1a0033f0 <gpioWrite>
			vTaskDelay(pdMS_TO_TICKS(500));
1a000546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00054a:	f000 ff65 	bl	1a001418 <vTaskDelay>
		if(gpioRead(HM10_STATE_PIN))
1a00054e:	2008      	movs	r0, #8
1a000550:	f002 ff83 	bl	1a00345a <gpioRead>
1a000554:	2800      	cmp	r0, #0
1a000556:	d0ea      	beq.n	1a00052e <hm10_task+0xa>
			gpioWrite(LEDB, ON);
1a000558:	2101      	movs	r1, #1
1a00055a:	202a      	movs	r0, #42	; 0x2a
1a00055c:	f002 ff48 	bl	1a0033f0 <gpioWrite>
			if(pdTRUE == xQueueReceive(measurement_queue, &measurement, portMAX_DELAY))
1a000560:	f04f 32ff 	mov.w	r2, #4294967295
1a000564:	4669      	mov	r1, sp
1a000566:	4b08      	ldr	r3, [pc, #32]	; (1a000588 <hm10_task+0x64>)
1a000568:	6818      	ldr	r0, [r3, #0]
1a00056a:	f001 fbd1 	bl	1a001d10 <xQueueReceive>
1a00056e:	2801      	cmp	r0, #1
1a000570:	d1ed      	bne.n	1a00054e <hm10_task+0x2a>
				taskENTER_CRITICAL();
1a000572:	f001 fd1f 	bl	1a001fb4 <vPortEnterCritical>
				hm10_send_string(measurement_to_string(&measurement));
1a000576:	4668      	mov	r0, sp
1a000578:	f000 f874 	bl	1a000664 <measurement_to_string>
1a00057c:	f000 f8c4 	bl	1a000708 <hm10_send_string>
				taskEXIT_CRITICAL();
1a000580:	f001 fd3a 	bl	1a001ff8 <vPortExitCritical>
1a000584:	e7e3      	b.n	1a00054e <hm10_task+0x2a>
1a000586:	bf00      	nop
1a000588:	1000227c 	.word	0x1000227c

1a00058c <assert_task_init>:
{
1a00058c:	b510      	push	{r4, lr}
1a00058e:	4604      	mov	r4, r0
	if(res != pdPASS)
1a000590:	2801      	cmp	r0, #1
1a000592:	d10a      	bne.n	1a0005aa <assert_task_init+0x1e>
	configASSERT(res == pdPASS);
1a000594:	2c01      	cmp	r4, #1
1a000596:	d00d      	beq.n	1a0005b4 <assert_task_init+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000598:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00059c:	f383 8811 	msr	BASEPRI, r3
1a0005a0:	f3bf 8f6f 	isb	sy
1a0005a4:	f3bf 8f4f 	dsb	sy
1a0005a8:	e7fe      	b.n	1a0005a8 <assert_task_init+0x1c>
		gpioWrite(LEDR, ON);
1a0005aa:	2101      	movs	r1, #1
1a0005ac:	2028      	movs	r0, #40	; 0x28
1a0005ae:	f002 ff1f 	bl	1a0033f0 <gpioWrite>
1a0005b2:	e7ef      	b.n	1a000594 <assert_task_init+0x8>
}
1a0005b4:	bd10      	pop	{r4, pc}
1a0005b6:	Address 0x1a0005b6 is out of bounds.


1a0005b8 <main>:
{
1a0005b8:	b530      	push	{r4, r5, lr}
1a0005ba:	b083      	sub	sp, #12
	boardConfig();
1a0005bc:	f003 f83e 	bl	1a00363c <boardInit>
	measurement_queue_init();
1a0005c0:	f000 f83e 	bl	1a000640 <measurement_queue_init>
	res = xTaskCreate(hm10_task,
1a0005c4:	2400      	movs	r4, #0
1a0005c6:	9401      	str	r4, [sp, #4]
1a0005c8:	2501      	movs	r5, #1
1a0005ca:	9500      	str	r5, [sp, #0]
1a0005cc:	4623      	mov	r3, r4
1a0005ce:	22b4      	movs	r2, #180	; 0xb4
1a0005d0:	4915      	ldr	r1, [pc, #84]	; (1a000628 <main+0x70>)
1a0005d2:	4816      	ldr	r0, [pc, #88]	; (1a00062c <main+0x74>)
1a0005d4:	f000 fd42 	bl	1a00105c <xTaskCreate>
	assert_task_init(res);
1a0005d8:	f7ff ffd8 	bl	1a00058c <assert_task_init>
	res = xTaskCreate(temp_sensor_task,
1a0005dc:	9401      	str	r4, [sp, #4]
1a0005de:	2302      	movs	r3, #2
1a0005e0:	9300      	str	r3, [sp, #0]
1a0005e2:	4623      	mov	r3, r4
1a0005e4:	22b4      	movs	r2, #180	; 0xb4
1a0005e6:	4912      	ldr	r1, [pc, #72]	; (1a000630 <main+0x78>)
1a0005e8:	4812      	ldr	r0, [pc, #72]	; (1a000634 <main+0x7c>)
1a0005ea:	f000 fd37 	bl	1a00105c <xTaskCreate>
	assert_task_init(res);
1a0005ee:	f7ff ffcd 	bl	1a00058c <assert_task_init>
	res = xTaskCreate(analog_sensors_task,
1a0005f2:	9401      	str	r4, [sp, #4]
1a0005f4:	2304      	movs	r3, #4
1a0005f6:	9300      	str	r3, [sp, #0]
1a0005f8:	4623      	mov	r3, r4
1a0005fa:	22b4      	movs	r2, #180	; 0xb4
1a0005fc:	490e      	ldr	r1, [pc, #56]	; (1a000638 <main+0x80>)
1a0005fe:	480f      	ldr	r0, [pc, #60]	; (1a00063c <main+0x84>)
1a000600:	f000 fd2c 	bl	1a00105c <xTaskCreate>
	assert_task_init(res);
1a000604:	f7ff ffc2 	bl	1a00058c <assert_task_init>
	gpioWrite(LED3, ON);
1a000608:	4629      	mov	r1, r5
1a00060a:	202d      	movs	r0, #45	; 0x2d
1a00060c:	f002 fef0 	bl	1a0033f0 <gpioWrite>
	vTaskStartScheduler();
1a000610:	f000 fd56 	bl	1a0010c0 <vTaskStartScheduler>
1a000614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000618:	f383 8811 	msr	BASEPRI, r3
1a00061c:	f3bf 8f6f 	isb	sy
1a000620:	f3bf 8f4f 	dsb	sy
    configASSERT(0);
1a000624:	e7fe      	b.n	1a000624 <main+0x6c>
1a000626:	bf00      	nop
1a000628:	1a008500 	.word	0x1a008500
1a00062c:	1a000525 	.word	0x1a000525
1a000630:	1a008510 	.word	0x1a008510
1a000634:	1a0003f9 	.word	0x1a0003f9
1a000638:	1a00851c 	.word	0x1a00851c
1a00063c:	1a000301 	.word	0x1a000301

1a000640 <measurement_queue_init>:
#include "queue.h"
#include <math.h>
#include <string.h>

void measurement_queue_init(void)
{
1a000640:	b508      	push	{r3, lr}
	measurement_queue = xQueueCreate(MEASUREMENT_QUEUE_N, sizeof(measurement_t));
1a000642:	2200      	movs	r2, #0
1a000644:	2110      	movs	r1, #16
1a000646:	2014      	movs	r0, #20
1a000648:	f001 fa15 	bl	1a001a76 <xQueueGenericCreate>
1a00064c:	4b01      	ldr	r3, [pc, #4]	; (1a000654 <measurement_queue_init+0x14>)
1a00064e:	6018      	str	r0, [r3, #0]
}
1a000650:	bd08      	pop	{r3, pc}
1a000652:	bf00      	nop
1a000654:	1000227c 	.word	0x1000227c

1a000658 <measurement_set_name>:

void measurement_set_name(measurement_t* measurement, uint8_t name_str[5])
{
1a000658:	b508      	push	{r3, lr}
	strncpy(measurement->name, name_str, MEASUREMENT_NAME_LENGTH);
1a00065a:	2205      	movs	r2, #5
1a00065c:	3009      	adds	r0, #9
1a00065e:	f004 fc04 	bl	1a004e6a <strncpy>
}
1a000662:	bd08      	pop	{r3, pc}

1a000664 <measurement_to_string>:

uint8_t* measurement_to_string(measurement_t* measurement)
{
1a000664:	b510      	push	{r4, lr}
1a000666:	b084      	sub	sp, #16

	sprintf(measurement_string, "\x02%d\x1D%s\x1D%d\x1D%d\x1D%02x\x03\r\n",
			measurement->ticks,
			measurement->name,
			measurement->value,
			measurement->decimal_pos,
1a000668:	7a03      	ldrb	r3, [r0, #8]
			measurement->fault_code);
1a00066a:	7b82      	ldrb	r2, [r0, #14]
	sprintf(measurement_string, "\x02%d\x1D%s\x1D%d\x1D%d\x1D%02x\x03\r\n",
1a00066c:	4c07      	ldr	r4, [pc, #28]	; (1a00068c <measurement_to_string+0x28>)
1a00066e:	9202      	str	r2, [sp, #8]
1a000670:	9301      	str	r3, [sp, #4]
1a000672:	6803      	ldr	r3, [r0, #0]
1a000674:	9300      	str	r3, [sp, #0]
1a000676:	f100 0309 	add.w	r3, r0, #9
1a00067a:	6842      	ldr	r2, [r0, #4]
1a00067c:	4904      	ldr	r1, [pc, #16]	; (1a000690 <measurement_to_string+0x2c>)
1a00067e:	4620      	mov	r0, r4
1a000680:	f004 fb90 	bl	1a004da4 <siprintf>
	return measurement_string;
}
1a000684:	4620      	mov	r0, r4
1a000686:	b004      	add	sp, #16
1a000688:	bd10      	pop	{r4, pc}
1a00068a:	bf00      	nop
1a00068c:	100000a4 	.word	0x100000a4
1a000690:	1a00852c 	.word	0x1a00852c

1a000694 <analog_sensor_read>:
	analog_sens->adc_pin = adc_pin;
	strncpy(analog_sens->name, name, 5);
}

uint32_t analog_sensor_read(analog_sensor_t* analog_sens)
{
1a000694:	b510      	push	{r4, lr}
1a000696:	4604      	mov	r4, r0
	uint16_t adc_readout = adcRead(analog_sens->adc_pin);
1a000698:	7b40      	ldrb	r0, [r0, #13]
1a00069a:	f002 ff13 	bl	1a0034c4 <adcRead>
	uint32_t analog_value = (uint32_t)(*analog_sens->look_up_table_ptr)[adc_readout];
1a00069e:	6923      	ldr	r3, [r4, #16]
	return analog_value;
}
1a0006a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a0006a4:	bd10      	pop	{r4, pc}
1a0006a6:	Address 0x1a0006a6 is out of bounds.


1a0006a8 <hm10_send_at_command>:
	hm10_send_at_command("TYPE0");//conectar pidiendo clave
	//hm10_send_at_command("PASS123456");
}

void hm10_send_at_command(uint8_t* command)
{
1a0006a8:	b510      	push	{r4, lr}
1a0006aa:	4604      	mov	r4, r0
	uartWriteString(HM10_UART, "AT+");
1a0006ac:	4907      	ldr	r1, [pc, #28]	; (1a0006cc <hm10_send_at_command+0x24>)
1a0006ae:	2005      	movs	r0, #5
1a0006b0:	f002 ffab 	bl	1a00360a <uartWriteString>
	uartWriteString(HM10_UART, command);
1a0006b4:	4621      	mov	r1, r4
1a0006b6:	2005      	movs	r0, #5
1a0006b8:	f002 ffa7 	bl	1a00360a <uartWriteString>
	uartWriteString(HM10_UART, "\r\n");
1a0006bc:	4904      	ldr	r1, [pc, #16]	; (1a0006d0 <hm10_send_at_command+0x28>)
1a0006be:	2005      	movs	r0, #5
1a0006c0:	f002 ffa3 	bl	1a00360a <uartWriteString>
	vTaskDelay(pdMS_TO_TICKS(100));
1a0006c4:	2064      	movs	r0, #100	; 0x64
1a0006c6:	f000 fea7 	bl	1a001418 <vTaskDelay>
}
1a0006ca:	bd10      	pop	{r4, pc}
1a0006cc:	1a008564 	.word	0x1a008564
1a0006d0:	1a008630 	.word	0x1a008630

1a0006d4 <hm10_init>:
{
1a0006d4:	b508      	push	{r3, lr}
	gpioInit(HM10_STATE_PIN, GPIO_INPUT);
1a0006d6:	2100      	movs	r1, #0
1a0006d8:	2008      	movs	r0, #8
1a0006da:	f002 fdb3 	bl	1a003244 <gpioInit>
	uartInit(HM10_UART, HM10_BAUDRATE);
1a0006de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a0006e2:	2005      	movs	r0, #5
1a0006e4:	f002 ff46 	bl	1a003574 <uartInit>
	printf("hmlisto\r\n");
1a0006e8:	4804      	ldr	r0, [pc, #16]	; (1a0006fc <hm10_init+0x28>)
1a0006ea:	f004 fb53 	bl	1a004d94 <puts>
	hm10_send_at_command("NAMEICE-ADQ");
1a0006ee:	4804      	ldr	r0, [pc, #16]	; (1a000700 <hm10_init+0x2c>)
1a0006f0:	f7ff ffda 	bl	1a0006a8 <hm10_send_at_command>
	hm10_send_at_command("TYPE0");//conectar pidiendo clave
1a0006f4:	4803      	ldr	r0, [pc, #12]	; (1a000704 <hm10_init+0x30>)
1a0006f6:	f7ff ffd7 	bl	1a0006a8 <hm10_send_at_command>
}
1a0006fa:	bd08      	pop	{r3, pc}
1a0006fc:	1a008544 	.word	0x1a008544
1a000700:	1a008550 	.word	0x1a008550
1a000704:	1a00855c 	.word	0x1a00855c

1a000708 <hm10_send_string>:

void hm10_send_string(uint8_t* string)
{
1a000708:	b508      	push	{r3, lr}
	uartWriteString(HM10_UART, string);
1a00070a:	4601      	mov	r1, r0
1a00070c:	2005      	movs	r0, #5
1a00070e:	f002 ff7c 	bl	1a00360a <uartWriteString>
}
1a000712:	bd08      	pop	{r3, pc}

1a000714 <max31855_read>:
	memset(device->buffer, 0, MAX31855_BUFFER_SIZE);
	strncpy(device->name, name_str, 5);
}

void max31855_read(max31855_t* device)
{
1a000714:	b510      	push	{r4, lr}
1a000716:	4604      	mov	r4, r0
	gpioWrite(device->cs_pin, OFF);
1a000718:	2100      	movs	r1, #0
1a00071a:	f990 0011 	ldrsb.w	r0, [r0, #17]
1a00071e:	f002 fe67 	bl	1a0033f0 <gpioWrite>
	spiRead(spi_port, device->buffer, MAX31855_BUFFER_SIZE);
1a000722:	2204      	movs	r2, #4
1a000724:	f104 0108 	add.w	r1, r4, #8
1a000728:	4b04      	ldr	r3, [pc, #16]	; (1a00073c <max31855_read+0x28>)
1a00072a:	7818      	ldrb	r0, [r3, #0]
1a00072c:	f002 fef6 	bl	1a00351c <spiRead>
	gpioWrite(device->cs_pin, ON);
1a000730:	2101      	movs	r1, #1
1a000732:	f994 0011 	ldrsb.w	r0, [r4, #17]
1a000736:	f002 fe5b 	bl	1a0033f0 <gpioWrite>
}
1a00073a:	bd10      	pop	{r4, pc}
1a00073c:	100000e4 	.word	0x100000e4

1a000740 <max31855_int_temp_to_celsius>:
	device->external_temp = external_temp_raw;
	return (device->external_temp * 0.25 * 100);
}

int32_t max31855_int_temp_to_celsius(max31855_t* device)
{
1a000740:	b508      	push	{r3, lr}
	int32_t internal_temp_raw = 0;
	internal_temp_raw = (int32_t)(device->buffer[3] >> 4) +
1a000742:	7ac2      	ldrb	r2, [r0, #11]
						 (int32_t)(device->buffer[2] << 4);
1a000744:	7a83      	ldrb	r3, [r0, #10]
1a000746:	011b      	lsls	r3, r3, #4
	internal_temp_raw = (int32_t)(device->buffer[3] >> 4) +
1a000748:	eb03 1312 	add.w	r3, r3, r2, lsr #4
	if((internal_temp_raw & 0x00000800) != 0)
1a00074c:	f413 6f00 	tst.w	r3, #2048	; 0x800
1a000750:	d012      	beq.n	1a000778 <max31855_int_temp_to_celsius+0x38>
	{
		internal_temp_raw |= 0xFFFFF000;//extiendo bit de signo, 1
1a000752:	ea6f 5303 	mvn.w	r3, r3, lsl #20
1a000756:	ea6f 5313 	mvn.w	r3, r3, lsr #20
	else
	{
		internal_temp_raw &= 0x000007FF; //extiendo bit de signo, 0
	}

	device->internal_temp = internal_temp_raw;
1a00075a:	6003      	str	r3, [r0, #0]

	return ((device->internal_temp) * 0.0625 * 1000);
1a00075c:	4618      	mov	r0, r3
1a00075e:	f003 f8f5 	bl	1a00394c <__aeabi_i2d>
1a000762:	2200      	movs	r2, #0
1a000764:	4b06      	ldr	r3, [pc, #24]	; (1a000780 <max31855_int_temp_to_celsius+0x40>)
1a000766:	f003 f95b 	bl	1a003a20 <__aeabi_dmul>
1a00076a:	2200      	movs	r2, #0
1a00076c:	4b05      	ldr	r3, [pc, #20]	; (1a000784 <max31855_int_temp_to_celsius+0x44>)
1a00076e:	f003 f957 	bl	1a003a20 <__aeabi_dmul>
1a000772:	f003 fb67 	bl	1a003e44 <__aeabi_d2iz>
}
1a000776:	bd08      	pop	{r3, pc}
		internal_temp_raw &= 0x000007FF; //extiendo bit de signo, 0
1a000778:	f3c3 030a 	ubfx	r3, r3, #0, #11
1a00077c:	e7ed      	b.n	1a00075a <max31855_int_temp_to_celsius+0x1a>
1a00077e:	bf00      	nop
1a000780:	3fb00000 	.word	0x3fb00000
1a000784:	408f4000 	.word	0x408f4000

1a000788 <initialise_monitor_handles>:
}
1a000788:	4770      	bx	lr
1a00078a:	Address 0x1a00078a is out of bounds.


1a00078c <Reset_Handler>:
void Reset_Handler(void) {
1a00078c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00078e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000790:	4b19      	ldr	r3, [pc, #100]	; (1a0007f8 <Reset_Handler+0x6c>)
1a000792:	4a1a      	ldr	r2, [pc, #104]	; (1a0007fc <Reset_Handler+0x70>)
1a000794:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000796:	3304      	adds	r3, #4
1a000798:	4a19      	ldr	r2, [pc, #100]	; (1a000800 <Reset_Handler+0x74>)
1a00079a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00079c:	2300      	movs	r3, #0
1a00079e:	e005      	b.n	1a0007ac <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0007a0:	4a18      	ldr	r2, [pc, #96]	; (1a000804 <Reset_Handler+0x78>)
1a0007a2:	f04f 31ff 	mov.w	r1, #4294967295
1a0007a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0007aa:	3301      	adds	r3, #1
1a0007ac:	2b07      	cmp	r3, #7
1a0007ae:	d9f7      	bls.n	1a0007a0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0007b0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0007b2:	4b15      	ldr	r3, [pc, #84]	; (1a000808 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0007b4:	e007      	b.n	1a0007c6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0007b6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0007ba:	689a      	ldr	r2, [r3, #8]
1a0007bc:	6859      	ldr	r1, [r3, #4]
1a0007be:	6818      	ldr	r0, [r3, #0]
1a0007c0:	f7ff fce3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0007c4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0007c6:	4a11      	ldr	r2, [pc, #68]	; (1a00080c <Reset_Handler+0x80>)
1a0007c8:	4293      	cmp	r3, r2
1a0007ca:	d3f4      	bcc.n	1a0007b6 <Reset_Handler+0x2a>
1a0007cc:	e006      	b.n	1a0007dc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0007ce:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0007d0:	6859      	ldr	r1, [r3, #4]
1a0007d2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0007d6:	f7ff fce7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0007da:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0007dc:	4a0c      	ldr	r2, [pc, #48]	; (1a000810 <Reset_Handler+0x84>)
1a0007de:	4293      	cmp	r3, r2
1a0007e0:	d3f5      	bcc.n	1a0007ce <Reset_Handler+0x42>
    SystemInit();
1a0007e2:	f002 fceb 	bl	1a0031bc <SystemInit>
    __libc_init_array();
1a0007e6:	f003 fe8d 	bl	1a004504 <__libc_init_array>
    initialise_monitor_handles();
1a0007ea:	f7ff ffcd 	bl	1a000788 <initialise_monitor_handles>
    main();
1a0007ee:	f7ff fee3 	bl	1a0005b8 <main>
        __asm__ volatile("wfi");
1a0007f2:	bf30      	wfi
1a0007f4:	e7fd      	b.n	1a0007f2 <Reset_Handler+0x66>
1a0007f6:	bf00      	nop
1a0007f8:	40053100 	.word	0x40053100
1a0007fc:	10df1000 	.word	0x10df1000
1a000800:	01dff7ff 	.word	0x01dff7ff
1a000804:	e000e280 	.word	0xe000e280
1a000808:	1a000114 	.word	0x1a000114
1a00080c:	1a000150 	.word	0x1a000150
1a000810:	1a000178 	.word	0x1a000178

1a000814 <_fini>:
void _fini(void) {}
1a000814:	4770      	bx	lr

1a000816 <_init>:
void _init(void) {}
1a000816:	4770      	bx	lr

1a000818 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000818:	2309      	movs	r3, #9
1a00081a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00081c:	f04f 30ff 	mov.w	r0, #4294967295
1a000820:	4770      	bx	lr

1a000822 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000822:	2358      	movs	r3, #88	; 0x58
1a000824:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000826:	f04f 30ff 	mov.w	r0, #4294967295
1a00082a:	4770      	bx	lr

1a00082c <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00082c:	2902      	cmp	r1, #2
1a00082e:	d904      	bls.n	1a00083a <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000830:	2309      	movs	r3, #9
1a000832:	6003      	str	r3, [r0, #0]
       return -1;
1a000834:	f04f 30ff 	mov.w	r0, #4294967295
1a000838:	4770      	bx	lr
       return 1;
1a00083a:	2001      	movs	r0, #1
   }
}
1a00083c:	4770      	bx	lr

1a00083e <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00083e:	2358      	movs	r3, #88	; 0x58
1a000840:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000842:	f04f 30ff 	mov.w	r0, #4294967295
1a000846:	4770      	bx	lr

1a000848 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000848:	2902      	cmp	r1, #2
1a00084a:	d81f      	bhi.n	1a00088c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000850:	461d      	mov	r5, r3
1a000852:	4617      	mov	r7, r2
1a000854:	4606      	mov	r6, r0
  size_t i = 0;
1a000856:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000858:	42ac      	cmp	r4, r5
1a00085a:	d211      	bcs.n	1a000880 <_read_r+0x38>
         int c = __stdio_getchar();
1a00085c:	f001 fe59 	bl	1a002512 <__stdio_getchar>
         if( c != -1 ){
1a000860:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000864:	d0f8      	beq.n	1a000858 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000866:	f104 0801 	add.w	r8, r4, #1
1a00086a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00086c:	280d      	cmp	r0, #13
1a00086e:	d003      	beq.n	1a000878 <_read_r+0x30>
1a000870:	280a      	cmp	r0, #10
1a000872:	d001      	beq.n	1a000878 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000874:	4644      	mov	r4, r8
1a000876:	e7ef      	b.n	1a000858 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000878:	f001 fe4b 	bl	1a002512 <__stdio_getchar>
               return i;
1a00087c:	4640      	mov	r0, r8
1a00087e:	e003      	b.n	1a000888 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000880:	2313      	movs	r3, #19
1a000882:	6033      	str	r3, [r6, #0]
      return -1;
1a000884:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00088c:	2313      	movs	r3, #19
1a00088e:	6003      	str	r3, [r0, #0]
      return -1;
1a000890:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000894:	4770      	bx	lr

1a000896 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000896:	2902      	cmp	r1, #2
1a000898:	d80c      	bhi.n	1a0008b4 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00089a:	b570      	push	{r4, r5, r6, lr}
1a00089c:	461d      	mov	r5, r3
1a00089e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0008a0:	2400      	movs	r4, #0
1a0008a2:	42ac      	cmp	r4, r5
1a0008a4:	d204      	bcs.n	1a0008b0 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0008a6:	5d30      	ldrb	r0, [r6, r4]
1a0008a8:	f001 fe2e 	bl	1a002508 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0008ac:	3401      	adds	r4, #1
1a0008ae:	e7f8      	b.n	1a0008a2 <_write_r+0xc>
       return n;
1a0008b0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0008b2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0008b4:	2313      	movs	r3, #19
1a0008b6:	6003      	str	r3, [r0, #0]
       return -1;
1a0008b8:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0008bc:	4770      	bx	lr
1a0008be:	Address 0x1a0008be is out of bounds.


1a0008c0 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0008c0:	4b05      	ldr	r3, [pc, #20]	; (1a0008d8 <_sbrk_r+0x18>)
1a0008c2:	681b      	ldr	r3, [r3, #0]
1a0008c4:	b123      	cbz	r3, 1a0008d0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0008c6:	4b04      	ldr	r3, [pc, #16]	; (1a0008d8 <_sbrk_r+0x18>)
1a0008c8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0008ca:	4401      	add	r1, r0
1a0008cc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0008ce:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0008d0:	4b01      	ldr	r3, [pc, #4]	; (1a0008d8 <_sbrk_r+0x18>)
1a0008d2:	4a02      	ldr	r2, [pc, #8]	; (1a0008dc <_sbrk_r+0x1c>)
1a0008d4:	601a      	str	r2, [r3, #0]
1a0008d6:	e7f6      	b.n	1a0008c6 <_sbrk_r+0x6>
1a0008d8:	100000e8 	.word	0x100000e8
1a0008dc:	100022d4 	.word	0x100022d4

1a0008e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0008e0:	b538      	push	{r3, r4, r5, lr}
1a0008e2:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0008e4:	f010 0f07 	tst.w	r0, #7
1a0008e8:	d002      	beq.n	1a0008f0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0008ea:	f020 0407 	bic.w	r4, r0, #7
1a0008ee:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0008f0:	f000 fc28 	bl	1a001144 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0008f4:	4b13      	ldr	r3, [pc, #76]	; (1a000944 <pvPortMalloc+0x64>)
1a0008f6:	681b      	ldr	r3, [r3, #0]
1a0008f8:	b17b      	cbz	r3, 1a00091a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0008fa:	4b13      	ldr	r3, [pc, #76]	; (1a000948 <pvPortMalloc+0x68>)
1a0008fc:	681b      	ldr	r3, [r3, #0]
1a0008fe:	441c      	add	r4, r3
1a000900:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000904:	4294      	cmp	r4, r2
1a000906:	d80e      	bhi.n	1a000926 <pvPortMalloc+0x46>
1a000908:	42a3      	cmp	r3, r4
1a00090a:	d310      	bcc.n	1a00092e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00090c:	f000 fcb4 	bl	1a001278 <xTaskResumeAll>
void *pvReturn = NULL;
1a000910:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000912:	f000 ff5b 	bl	1a0017cc <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000916:	4628      	mov	r0, r5
1a000918:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00091a:	4b0c      	ldr	r3, [pc, #48]	; (1a00094c <pvPortMalloc+0x6c>)
1a00091c:	f023 0307 	bic.w	r3, r3, #7
1a000920:	4a08      	ldr	r2, [pc, #32]	; (1a000944 <pvPortMalloc+0x64>)
1a000922:	6013      	str	r3, [r2, #0]
1a000924:	e7e9      	b.n	1a0008fa <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000926:	f000 fca7 	bl	1a001278 <xTaskResumeAll>
void *pvReturn = NULL;
1a00092a:	2500      	movs	r5, #0
1a00092c:	e7f1      	b.n	1a000912 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00092e:	4a05      	ldr	r2, [pc, #20]	; (1a000944 <pvPortMalloc+0x64>)
1a000930:	6815      	ldr	r5, [r2, #0]
1a000932:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000934:	4b04      	ldr	r3, [pc, #16]	; (1a000948 <pvPortMalloc+0x68>)
1a000936:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000938:	f000 fc9e 	bl	1a001278 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00093c:	2d00      	cmp	r5, #0
1a00093e:	d1ea      	bne.n	1a000916 <pvPortMalloc+0x36>
1a000940:	e7e7      	b.n	1a000912 <pvPortMalloc+0x32>
1a000942:	bf00      	nop
1a000944:	100000ec 	.word	0x100000ec
1a000948:	100020f0 	.word	0x100020f0
1a00094c:	100000f8 	.word	0x100000f8

1a000950 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000950:	b140      	cbz	r0, 1a000964 <vPortFree+0x14>
1a000952:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000956:	f383 8811 	msr	BASEPRI, r3
1a00095a:	f3bf 8f6f 	isb	sy
1a00095e:	f3bf 8f4f 	dsb	sy
1a000962:	e7fe      	b.n	1a000962 <vPortFree+0x12>
}
1a000964:	4770      	bx	lr
1a000966:	Address 0x1a000966 is out of bounds.


1a000968 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a000968:	4b06      	ldr	r3, [pc, #24]	; (1a000984 <prvGetNextExpireTime+0x1c>)
1a00096a:	681a      	ldr	r2, [r3, #0]
1a00096c:	6813      	ldr	r3, [r2, #0]
1a00096e:	fab3 f383 	clz	r3, r3
1a000972:	095b      	lsrs	r3, r3, #5
1a000974:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a000976:	b913      	cbnz	r3, 1a00097e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a000978:	68d3      	ldr	r3, [r2, #12]
1a00097a:	6818      	ldr	r0, [r3, #0]
1a00097c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00097e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a000980:	4770      	bx	lr
1a000982:	bf00      	nop
1a000984:	100020f4 	.word	0x100020f4

1a000988 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a000988:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00098a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00098c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00098e:	4291      	cmp	r1, r2
1a000990:	d80c      	bhi.n	1a0009ac <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000992:	1ad2      	subs	r2, r2, r3
1a000994:	6983      	ldr	r3, [r0, #24]
1a000996:	429a      	cmp	r2, r3
1a000998:	d301      	bcc.n	1a00099e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00099a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a00099c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00099e:	1d01      	adds	r1, r0, #4
1a0009a0:	4b09      	ldr	r3, [pc, #36]	; (1a0009c8 <prvInsertTimerInActiveList+0x40>)
1a0009a2:	6818      	ldr	r0, [r3, #0]
1a0009a4:	f000 ff47 	bl	1a001836 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0009a8:	2000      	movs	r0, #0
1a0009aa:	e7f7      	b.n	1a00099c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0009ac:	429a      	cmp	r2, r3
1a0009ae:	d201      	bcs.n	1a0009b4 <prvInsertTimerInActiveList+0x2c>
1a0009b0:	4299      	cmp	r1, r3
1a0009b2:	d206      	bcs.n	1a0009c2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0009b4:	1d01      	adds	r1, r0, #4
1a0009b6:	4b05      	ldr	r3, [pc, #20]	; (1a0009cc <prvInsertTimerInActiveList+0x44>)
1a0009b8:	6818      	ldr	r0, [r3, #0]
1a0009ba:	f000 ff3c 	bl	1a001836 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0009be:	2000      	movs	r0, #0
1a0009c0:	e7ec      	b.n	1a00099c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a0009c2:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0009c4:	e7ea      	b.n	1a00099c <prvInsertTimerInActiveList+0x14>
1a0009c6:	bf00      	nop
1a0009c8:	100020f8 	.word	0x100020f8
1a0009cc:	100020f4 	.word	0x100020f4

1a0009d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0009d0:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0009d2:	f001 faef 	bl	1a001fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0009d6:	4b0f      	ldr	r3, [pc, #60]	; (1a000a14 <prvCheckForValidListAndQueue+0x44>)
1a0009d8:	681b      	ldr	r3, [r3, #0]
1a0009da:	b113      	cbz	r3, 1a0009e2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0009dc:	f001 fb0c 	bl	1a001ff8 <vPortExitCritical>
}
1a0009e0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0009e2:	4d0d      	ldr	r5, [pc, #52]	; (1a000a18 <prvCheckForValidListAndQueue+0x48>)
1a0009e4:	4628      	mov	r0, r5
1a0009e6:	f000 ff0d 	bl	1a001804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0009ea:	4c0c      	ldr	r4, [pc, #48]	; (1a000a1c <prvCheckForValidListAndQueue+0x4c>)
1a0009ec:	4620      	mov	r0, r4
1a0009ee:	f000 ff09 	bl	1a001804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0009f2:	4b0b      	ldr	r3, [pc, #44]	; (1a000a20 <prvCheckForValidListAndQueue+0x50>)
1a0009f4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0009f6:	4b0b      	ldr	r3, [pc, #44]	; (1a000a24 <prvCheckForValidListAndQueue+0x54>)
1a0009f8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1a0009fa:	2200      	movs	r2, #0
1a0009fc:	2110      	movs	r1, #16
1a0009fe:	200a      	movs	r0, #10
1a000a00:	f001 f839 	bl	1a001a76 <xQueueGenericCreate>
1a000a04:	4b03      	ldr	r3, [pc, #12]	; (1a000a14 <prvCheckForValidListAndQueue+0x44>)
1a000a06:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a000a08:	2800      	cmp	r0, #0
1a000a0a:	d0e7      	beq.n	1a0009dc <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a000a0c:	4906      	ldr	r1, [pc, #24]	; (1a000a28 <prvCheckForValidListAndQueue+0x58>)
1a000a0e:	f001 fa2d 	bl	1a001e6c <vQueueAddToRegistry>
1a000a12:	e7e3      	b.n	1a0009dc <prvCheckForValidListAndQueue+0xc>
1a000a14:	10002128 	.word	0x10002128
1a000a18:	100020fc 	.word	0x100020fc
1a000a1c:	10002110 	.word	0x10002110
1a000a20:	100020f4 	.word	0x100020f4
1a000a24:	100020f8 	.word	0x100020f8
1a000a28:	1a008568 	.word	0x1a008568

1a000a2c <xTimerCreateTimerTask>:
{
1a000a2c:	b500      	push	{lr}
1a000a2e:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
1a000a30:	f7ff ffce 	bl	1a0009d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a000a34:	4b0d      	ldr	r3, [pc, #52]	; (1a000a6c <xTimerCreateTimerTask+0x40>)
1a000a36:	681b      	ldr	r3, [r3, #0]
1a000a38:	b15b      	cbz	r3, 1a000a52 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
1a000a3a:	4b0d      	ldr	r3, [pc, #52]	; (1a000a70 <xTimerCreateTimerTask+0x44>)
1a000a3c:	9301      	str	r3, [sp, #4]
1a000a3e:	2304      	movs	r3, #4
1a000a40:	9300      	str	r3, [sp, #0]
1a000a42:	2300      	movs	r3, #0
1a000a44:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a000a48:	490a      	ldr	r1, [pc, #40]	; (1a000a74 <xTimerCreateTimerTask+0x48>)
1a000a4a:	480b      	ldr	r0, [pc, #44]	; (1a000a78 <xTimerCreateTimerTask+0x4c>)
1a000a4c:	f000 fb06 	bl	1a00105c <xTaskCreate>
	configASSERT( xReturn );
1a000a50:	b940      	cbnz	r0, 1a000a64 <xTimerCreateTimerTask+0x38>
1a000a52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a56:	f383 8811 	msr	BASEPRI, r3
1a000a5a:	f3bf 8f6f 	isb	sy
1a000a5e:	f3bf 8f4f 	dsb	sy
1a000a62:	e7fe      	b.n	1a000a62 <xTimerCreateTimerTask+0x36>
}
1a000a64:	b003      	add	sp, #12
1a000a66:	f85d fb04 	ldr.w	pc, [sp], #4
1a000a6a:	bf00      	nop
1a000a6c:	10002128 	.word	0x10002128
1a000a70:	1000212c 	.word	0x1000212c
1a000a74:	1a008570 	.word	0x1a008570
1a000a78:	1a000d55 	.word	0x1a000d55

1a000a7c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a000a7c:	b1c0      	cbz	r0, 1a000ab0 <xTimerGenericCommand+0x34>
{
1a000a7e:	b530      	push	{r4, r5, lr}
1a000a80:	b085      	sub	sp, #20
1a000a82:	4615      	mov	r5, r2
1a000a84:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a000a86:	4a17      	ldr	r2, [pc, #92]	; (1a000ae4 <xTimerGenericCommand+0x68>)
1a000a88:	6810      	ldr	r0, [r2, #0]
1a000a8a:	b340      	cbz	r0, 1a000ade <xTimerGenericCommand+0x62>
1a000a8c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a000a8e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a000a90:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a000a92:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a000a94:	2905      	cmp	r1, #5
1a000a96:	dc1c      	bgt.n	1a000ad2 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a000a98:	f000 fe18 	bl	1a0016cc <xTaskGetSchedulerState>
1a000a9c:	2802      	cmp	r0, #2
1a000a9e:	d010      	beq.n	1a000ac2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a000aa0:	2300      	movs	r3, #0
1a000aa2:	461a      	mov	r2, r3
1a000aa4:	4669      	mov	r1, sp
1a000aa6:	480f      	ldr	r0, [pc, #60]	; (1a000ae4 <xTimerGenericCommand+0x68>)
1a000aa8:	6800      	ldr	r0, [r0, #0]
1a000aaa:	f001 f809 	bl	1a001ac0 <xQueueGenericSend>
1a000aae:	e014      	b.n	1a000ada <xTimerGenericCommand+0x5e>
1a000ab0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ab4:	f383 8811 	msr	BASEPRI, r3
1a000ab8:	f3bf 8f6f 	isb	sy
1a000abc:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a000ac0:	e7fe      	b.n	1a000ac0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a000ac2:	2300      	movs	r3, #0
1a000ac4:	9a08      	ldr	r2, [sp, #32]
1a000ac6:	4669      	mov	r1, sp
1a000ac8:	4806      	ldr	r0, [pc, #24]	; (1a000ae4 <xTimerGenericCommand+0x68>)
1a000aca:	6800      	ldr	r0, [r0, #0]
1a000acc:	f000 fff8 	bl	1a001ac0 <xQueueGenericSend>
1a000ad0:	e003      	b.n	1a000ada <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a000ad2:	2300      	movs	r3, #0
1a000ad4:	4669      	mov	r1, sp
1a000ad6:	f001 f8b3 	bl	1a001c40 <xQueueGenericSendFromISR>
}
1a000ada:	b005      	add	sp, #20
1a000adc:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a000ade:	2000      	movs	r0, #0
	return xReturn;
1a000ae0:	e7fb      	b.n	1a000ada <xTimerGenericCommand+0x5e>
1a000ae2:	bf00      	nop
1a000ae4:	10002128 	.word	0x10002128

1a000ae8 <prvSwitchTimerLists>:
{
1a000ae8:	b570      	push	{r4, r5, r6, lr}
1a000aea:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a000aec:	4b1a      	ldr	r3, [pc, #104]	; (1a000b58 <prvSwitchTimerLists+0x70>)
1a000aee:	681b      	ldr	r3, [r3, #0]
1a000af0:	681a      	ldr	r2, [r3, #0]
1a000af2:	b352      	cbz	r2, 1a000b4a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a000af4:	68db      	ldr	r3, [r3, #12]
1a000af6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a000af8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a000afa:	1d25      	adds	r5, r4, #4
1a000afc:	4628      	mov	r0, r5
1a000afe:	f000 feb4 	bl	1a00186a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a000b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b04:	4620      	mov	r0, r4
1a000b06:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a000b08:	69e3      	ldr	r3, [r4, #28]
1a000b0a:	2b01      	cmp	r3, #1
1a000b0c:	d1ee      	bne.n	1a000aec <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a000b0e:	69a3      	ldr	r3, [r4, #24]
1a000b10:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a000b12:	429e      	cmp	r6, r3
1a000b14:	d207      	bcs.n	1a000b26 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a000b16:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a000b18:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a000b1a:	4629      	mov	r1, r5
1a000b1c:	4b0e      	ldr	r3, [pc, #56]	; (1a000b58 <prvSwitchTimerLists+0x70>)
1a000b1e:	6818      	ldr	r0, [r3, #0]
1a000b20:	f000 fe89 	bl	1a001836 <vListInsert>
1a000b24:	e7e2      	b.n	1a000aec <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a000b26:	2100      	movs	r1, #0
1a000b28:	9100      	str	r1, [sp, #0]
1a000b2a:	460b      	mov	r3, r1
1a000b2c:	4632      	mov	r2, r6
1a000b2e:	4620      	mov	r0, r4
1a000b30:	f7ff ffa4 	bl	1a000a7c <xTimerGenericCommand>
				configASSERT( xResult );
1a000b34:	2800      	cmp	r0, #0
1a000b36:	d1d9      	bne.n	1a000aec <prvSwitchTimerLists+0x4>
1a000b38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b3c:	f383 8811 	msr	BASEPRI, r3
1a000b40:	f3bf 8f6f 	isb	sy
1a000b44:	f3bf 8f4f 	dsb	sy
1a000b48:	e7fe      	b.n	1a000b48 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a000b4a:	4a04      	ldr	r2, [pc, #16]	; (1a000b5c <prvSwitchTimerLists+0x74>)
1a000b4c:	6810      	ldr	r0, [r2, #0]
1a000b4e:	4902      	ldr	r1, [pc, #8]	; (1a000b58 <prvSwitchTimerLists+0x70>)
1a000b50:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a000b52:	6013      	str	r3, [r2, #0]
}
1a000b54:	b002      	add	sp, #8
1a000b56:	bd70      	pop	{r4, r5, r6, pc}
1a000b58:	100020f4 	.word	0x100020f4
1a000b5c:	100020f8 	.word	0x100020f8

1a000b60 <prvSampleTimeNow>:
{
1a000b60:	b538      	push	{r3, r4, r5, lr}
1a000b62:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a000b64:	f000 faf6 	bl	1a001154 <xTaskGetTickCount>
1a000b68:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a000b6a:	4b07      	ldr	r3, [pc, #28]	; (1a000b88 <prvSampleTimeNow+0x28>)
1a000b6c:	681b      	ldr	r3, [r3, #0]
1a000b6e:	4283      	cmp	r3, r0
1a000b70:	d805      	bhi.n	1a000b7e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a000b72:	2300      	movs	r3, #0
1a000b74:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a000b76:	4b04      	ldr	r3, [pc, #16]	; (1a000b88 <prvSampleTimeNow+0x28>)
1a000b78:	601c      	str	r4, [r3, #0]
}
1a000b7a:	4620      	mov	r0, r4
1a000b7c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a000b7e:	f7ff ffb3 	bl	1a000ae8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a000b82:	2301      	movs	r3, #1
1a000b84:	602b      	str	r3, [r5, #0]
1a000b86:	e7f6      	b.n	1a000b76 <prvSampleTimeNow+0x16>
1a000b88:	10002124 	.word	0x10002124

1a000b8c <prvProcessExpiredTimer>:
{
1a000b8c:	b570      	push	{r4, r5, r6, lr}
1a000b8e:	b082      	sub	sp, #8
1a000b90:	4605      	mov	r5, r0
1a000b92:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a000b94:	4b14      	ldr	r3, [pc, #80]	; (1a000be8 <prvProcessExpiredTimer+0x5c>)
1a000b96:	681b      	ldr	r3, [r3, #0]
1a000b98:	68db      	ldr	r3, [r3, #12]
1a000b9a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a000b9c:	1d20      	adds	r0, r4, #4
1a000b9e:	f000 fe64 	bl	1a00186a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a000ba2:	69e3      	ldr	r3, [r4, #28]
1a000ba4:	2b01      	cmp	r3, #1
1a000ba6:	d004      	beq.n	1a000bb2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a000ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000baa:	4620      	mov	r0, r4
1a000bac:	4798      	blx	r3
}
1a000bae:	b002      	add	sp, #8
1a000bb0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a000bb2:	69a1      	ldr	r1, [r4, #24]
1a000bb4:	462b      	mov	r3, r5
1a000bb6:	4632      	mov	r2, r6
1a000bb8:	4429      	add	r1, r5
1a000bba:	4620      	mov	r0, r4
1a000bbc:	f7ff fee4 	bl	1a000988 <prvInsertTimerInActiveList>
1a000bc0:	2800      	cmp	r0, #0
1a000bc2:	d0f1      	beq.n	1a000ba8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a000bc4:	2100      	movs	r1, #0
1a000bc6:	9100      	str	r1, [sp, #0]
1a000bc8:	460b      	mov	r3, r1
1a000bca:	462a      	mov	r2, r5
1a000bcc:	4620      	mov	r0, r4
1a000bce:	f7ff ff55 	bl	1a000a7c <xTimerGenericCommand>
			configASSERT( xResult );
1a000bd2:	2800      	cmp	r0, #0
1a000bd4:	d1e8      	bne.n	1a000ba8 <prvProcessExpiredTimer+0x1c>
1a000bd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bda:	f383 8811 	msr	BASEPRI, r3
1a000bde:	f3bf 8f6f 	isb	sy
1a000be2:	f3bf 8f4f 	dsb	sy
1a000be6:	e7fe      	b.n	1a000be6 <prvProcessExpiredTimer+0x5a>
1a000be8:	100020f4 	.word	0x100020f4

1a000bec <prvProcessTimerOrBlockTask>:
{
1a000bec:	b570      	push	{r4, r5, r6, lr}
1a000bee:	b082      	sub	sp, #8
1a000bf0:	4606      	mov	r6, r0
1a000bf2:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a000bf4:	f000 faa6 	bl	1a001144 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a000bf8:	a801      	add	r0, sp, #4
1a000bfa:	f7ff ffb1 	bl	1a000b60 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a000bfe:	9b01      	ldr	r3, [sp, #4]
1a000c00:	bb1b      	cbnz	r3, 1a000c4a <prvProcessTimerOrBlockTask+0x5e>
1a000c02:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a000c04:	b90c      	cbnz	r4, 1a000c0a <prvProcessTimerOrBlockTask+0x1e>
1a000c06:	42b0      	cmp	r0, r6
1a000c08:	d218      	bcs.n	1a000c3c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a000c0a:	b12c      	cbz	r4, 1a000c18 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a000c0c:	4b11      	ldr	r3, [pc, #68]	; (1a000c54 <prvProcessTimerOrBlockTask+0x68>)
1a000c0e:	681b      	ldr	r3, [r3, #0]
1a000c10:	681c      	ldr	r4, [r3, #0]
1a000c12:	fab4 f484 	clz	r4, r4
1a000c16:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a000c18:	4622      	mov	r2, r4
1a000c1a:	1b71      	subs	r1, r6, r5
1a000c1c:	4b0e      	ldr	r3, [pc, #56]	; (1a000c58 <prvProcessTimerOrBlockTask+0x6c>)
1a000c1e:	6818      	ldr	r0, [r3, #0]
1a000c20:	f001 f938 	bl	1a001e94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a000c24:	f000 fb28 	bl	1a001278 <xTaskResumeAll>
1a000c28:	b988      	cbnz	r0, 1a000c4e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a000c2a:	4b0c      	ldr	r3, [pc, #48]	; (1a000c5c <prvProcessTimerOrBlockTask+0x70>)
1a000c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c30:	601a      	str	r2, [r3, #0]
1a000c32:	f3bf 8f4f 	dsb	sy
1a000c36:	f3bf 8f6f 	isb	sy
1a000c3a:	e008      	b.n	1a000c4e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a000c3c:	f000 fb1c 	bl	1a001278 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a000c40:	4629      	mov	r1, r5
1a000c42:	4630      	mov	r0, r6
1a000c44:	f7ff ffa2 	bl	1a000b8c <prvProcessExpiredTimer>
1a000c48:	e001      	b.n	1a000c4e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a000c4a:	f000 fb15 	bl	1a001278 <xTaskResumeAll>
}
1a000c4e:	b002      	add	sp, #8
1a000c50:	bd70      	pop	{r4, r5, r6, pc}
1a000c52:	bf00      	nop
1a000c54:	100020f8 	.word	0x100020f8
1a000c58:	10002128 	.word	0x10002128
1a000c5c:	e000ed04 	.word	0xe000ed04

1a000c60 <prvProcessReceivedCommands>:
{
1a000c60:	b530      	push	{r4, r5, lr}
1a000c62:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a000c64:	e006      	b.n	1a000c74 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a000c66:	9907      	ldr	r1, [sp, #28]
1a000c68:	9806      	ldr	r0, [sp, #24]
1a000c6a:	9b05      	ldr	r3, [sp, #20]
1a000c6c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a000c6e:	9b04      	ldr	r3, [sp, #16]
1a000c70:	2b00      	cmp	r3, #0
1a000c72:	da0b      	bge.n	1a000c8c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a000c74:	2200      	movs	r2, #0
1a000c76:	a904      	add	r1, sp, #16
1a000c78:	4b35      	ldr	r3, [pc, #212]	; (1a000d50 <prvProcessReceivedCommands+0xf0>)
1a000c7a:	6818      	ldr	r0, [r3, #0]
1a000c7c:	f001 f848 	bl	1a001d10 <xQueueReceive>
1a000c80:	2800      	cmp	r0, #0
1a000c82:	d062      	beq.n	1a000d4a <prvProcessReceivedCommands+0xea>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a000c84:	9b04      	ldr	r3, [sp, #16]
1a000c86:	2b00      	cmp	r3, #0
1a000c88:	daf1      	bge.n	1a000c6e <prvProcessReceivedCommands+0xe>
1a000c8a:	e7ec      	b.n	1a000c66 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a000c8c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a000c8e:	6963      	ldr	r3, [r4, #20]
1a000c90:	b113      	cbz	r3, 1a000c98 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a000c92:	1d20      	adds	r0, r4, #4
1a000c94:	f000 fde9 	bl	1a00186a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a000c98:	a803      	add	r0, sp, #12
1a000c9a:	f7ff ff61 	bl	1a000b60 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a000c9e:	9b04      	ldr	r3, [sp, #16]
1a000ca0:	2b09      	cmp	r3, #9
1a000ca2:	d8e7      	bhi.n	1a000c74 <prvProcessReceivedCommands+0x14>
1a000ca4:	a201      	add	r2, pc, #4	; (adr r2, 1a000cac <prvProcessReceivedCommands+0x4c>)
1a000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000caa:	bf00      	nop
1a000cac:	1a000cd5 	.word	0x1a000cd5
1a000cb0:	1a000cd5 	.word	0x1a000cd5
1a000cb4:	1a000cd5 	.word	0x1a000cd5
1a000cb8:	1a000c75 	.word	0x1a000c75
1a000cbc:	1a000d1d 	.word	0x1a000d1d
1a000cc0:	1a000d43 	.word	0x1a000d43
1a000cc4:	1a000cd5 	.word	0x1a000cd5
1a000cc8:	1a000cd5 	.word	0x1a000cd5
1a000ccc:	1a000c75 	.word	0x1a000c75
1a000cd0:	1a000d1d 	.word	0x1a000d1d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a000cd4:	9905      	ldr	r1, [sp, #20]
1a000cd6:	69a5      	ldr	r5, [r4, #24]
1a000cd8:	460b      	mov	r3, r1
1a000cda:	4602      	mov	r2, r0
1a000cdc:	4429      	add	r1, r5
1a000cde:	4620      	mov	r0, r4
1a000ce0:	f7ff fe52 	bl	1a000988 <prvInsertTimerInActiveList>
1a000ce4:	2800      	cmp	r0, #0
1a000ce6:	d0c5      	beq.n	1a000c74 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a000ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000cea:	4620      	mov	r0, r4
1a000cec:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a000cee:	69e3      	ldr	r3, [r4, #28]
1a000cf0:	2b01      	cmp	r3, #1
1a000cf2:	d1bf      	bne.n	1a000c74 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a000cf4:	69a2      	ldr	r2, [r4, #24]
1a000cf6:	2100      	movs	r1, #0
1a000cf8:	9100      	str	r1, [sp, #0]
1a000cfa:	460b      	mov	r3, r1
1a000cfc:	9805      	ldr	r0, [sp, #20]
1a000cfe:	4402      	add	r2, r0
1a000d00:	4620      	mov	r0, r4
1a000d02:	f7ff febb 	bl	1a000a7c <xTimerGenericCommand>
							configASSERT( xResult );
1a000d06:	2800      	cmp	r0, #0
1a000d08:	d1b4      	bne.n	1a000c74 <prvProcessReceivedCommands+0x14>
1a000d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d0e:	f383 8811 	msr	BASEPRI, r3
1a000d12:	f3bf 8f6f 	isb	sy
1a000d16:	f3bf 8f4f 	dsb	sy
1a000d1a:	e7fe      	b.n	1a000d1a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a000d1c:	9905      	ldr	r1, [sp, #20]
1a000d1e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a000d20:	b131      	cbz	r1, 1a000d30 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a000d22:	4603      	mov	r3, r0
1a000d24:	4602      	mov	r2, r0
1a000d26:	4401      	add	r1, r0
1a000d28:	4620      	mov	r0, r4
1a000d2a:	f7ff fe2d 	bl	1a000988 <prvInsertTimerInActiveList>
					break;
1a000d2e:	e7a1      	b.n	1a000c74 <prvProcessReceivedCommands+0x14>
1a000d30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d34:	f383 8811 	msr	BASEPRI, r3
1a000d38:	f3bf 8f6f 	isb	sy
1a000d3c:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a000d40:	e7fe      	b.n	1a000d40 <prvProcessReceivedCommands+0xe0>
						vPortFree( pxTimer );
1a000d42:	4620      	mov	r0, r4
1a000d44:	f7ff fe04 	bl	1a000950 <vPortFree>
					break;
1a000d48:	e794      	b.n	1a000c74 <prvProcessReceivedCommands+0x14>
}
1a000d4a:	b009      	add	sp, #36	; 0x24
1a000d4c:	bd30      	pop	{r4, r5, pc}
1a000d4e:	bf00      	nop
1a000d50:	10002128 	.word	0x10002128

1a000d54 <prvTimerTask>:
{
1a000d54:	b500      	push	{lr}
1a000d56:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a000d58:	a801      	add	r0, sp, #4
1a000d5a:	f7ff fe05 	bl	1a000968 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a000d5e:	9901      	ldr	r1, [sp, #4]
1a000d60:	f7ff ff44 	bl	1a000bec <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a000d64:	f7ff ff7c 	bl	1a000c60 <prvProcessReceivedCommands>
1a000d68:	e7f6      	b.n	1a000d58 <prvTimerTask+0x4>
1a000d6a:	Address 0x1a000d6a is out of bounds.


1a000d6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000d6c:	4b08      	ldr	r3, [pc, #32]	; (1a000d90 <prvResetNextTaskUnblockTime+0x24>)
1a000d6e:	681b      	ldr	r3, [r3, #0]
1a000d70:	681b      	ldr	r3, [r3, #0]
1a000d72:	b923      	cbnz	r3, 1a000d7e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a000d74:	4b07      	ldr	r3, [pc, #28]	; (1a000d94 <prvResetNextTaskUnblockTime+0x28>)
1a000d76:	f04f 32ff 	mov.w	r2, #4294967295
1a000d7a:	601a      	str	r2, [r3, #0]
1a000d7c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000d7e:	4b04      	ldr	r3, [pc, #16]	; (1a000d90 <prvResetNextTaskUnblockTime+0x24>)
1a000d80:	681b      	ldr	r3, [r3, #0]
1a000d82:	68db      	ldr	r3, [r3, #12]
1a000d84:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000d86:	685a      	ldr	r2, [r3, #4]
1a000d88:	4b02      	ldr	r3, [pc, #8]	; (1a000d94 <prvResetNextTaskUnblockTime+0x28>)
1a000d8a:	601a      	str	r2, [r3, #0]
	}
}
1a000d8c:	4770      	bx	lr
1a000d8e:	bf00      	nop
1a000d90:	10002134 	.word	0x10002134
1a000d94:	1000220c 	.word	0x1000220c

1a000d98 <prvDeleteTCB>:
	{
1a000d98:	b510      	push	{r4, lr}
1a000d9a:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a000d9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000d9e:	f7ff fdd7 	bl	1a000950 <vPortFree>
			vPortFree( pxTCB );
1a000da2:	4620      	mov	r0, r4
1a000da4:	f7ff fdd4 	bl	1a000950 <vPortFree>
	}
1a000da8:	bd10      	pop	{r4, pc}

1a000daa <prvInitialiseNewTask>:
{
1a000daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000dae:	4681      	mov	r9, r0
1a000db0:	460d      	mov	r5, r1
1a000db2:	4617      	mov	r7, r2
1a000db4:	469a      	mov	sl, r3
1a000db6:	9e08      	ldr	r6, [sp, #32]
1a000db8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000dbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000dbe:	0092      	lsls	r2, r2, #2
1a000dc0:	21a5      	movs	r1, #165	; 0xa5
1a000dc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000dc4:	f003 fbd3 	bl	1a00456e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000dca:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000dce:	3a01      	subs	r2, #1
1a000dd0:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000dd4:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000dd8:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000dda:	2300      	movs	r3, #0
1a000ddc:	2b0f      	cmp	r3, #15
1a000dde:	d806      	bhi.n	1a000dee <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000de0:	5cea      	ldrb	r2, [r5, r3]
1a000de2:	18e1      	adds	r1, r4, r3
1a000de4:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000de8:	b10a      	cbz	r2, 1a000dee <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000dea:	3301      	adds	r3, #1
1a000dec:	e7f6      	b.n	1a000ddc <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000dee:	2300      	movs	r3, #0
1a000df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000df4:	2e06      	cmp	r6, #6
1a000df6:	d900      	bls.n	1a000dfa <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000df8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000dfa:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000dfc:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000dfe:	2500      	movs	r5, #0
1a000e00:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000e02:	1d20      	adds	r0, r4, #4
1a000e04:	f000 fd09 	bl	1a00181a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000e08:	f104 0018 	add.w	r0, r4, #24
1a000e0c:	f000 fd05 	bl	1a00181a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000e10:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000e12:	f1c6 0607 	rsb	r6, r6, #7
1a000e16:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000e18:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000e1a:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000e1c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000e20:	4652      	mov	r2, sl
1a000e22:	4649      	mov	r1, r9
1a000e24:	4638      	mov	r0, r7
1a000e26:	f001 f89d 	bl	1a001f64 <pxPortInitialiseStack>
1a000e2a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000e2c:	f1b8 0f00 	cmp.w	r8, #0
1a000e30:	d001      	beq.n	1a000e36 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000e32:	f8c8 4000 	str.w	r4, [r8]
}
1a000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000e3a:	Address 0x1a000e3a is out of bounds.


1a000e3c <prvInitialiseTaskLists>:
{
1a000e3c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000e3e:	2400      	movs	r4, #0
1a000e40:	2c06      	cmp	r4, #6
1a000e42:	d808      	bhi.n	1a000e56 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000e44:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000e48:	0093      	lsls	r3, r2, #2
1a000e4a:	480e      	ldr	r0, [pc, #56]	; (1a000e84 <prvInitialiseTaskLists+0x48>)
1a000e4c:	4418      	add	r0, r3
1a000e4e:	f000 fcd9 	bl	1a001804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000e52:	3401      	adds	r4, #1
1a000e54:	e7f4      	b.n	1a000e40 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a000e56:	4d0c      	ldr	r5, [pc, #48]	; (1a000e88 <prvInitialiseTaskLists+0x4c>)
1a000e58:	4628      	mov	r0, r5
1a000e5a:	f000 fcd3 	bl	1a001804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000e5e:	4c0b      	ldr	r4, [pc, #44]	; (1a000e8c <prvInitialiseTaskLists+0x50>)
1a000e60:	4620      	mov	r0, r4
1a000e62:	f000 fccf 	bl	1a001804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000e66:	480a      	ldr	r0, [pc, #40]	; (1a000e90 <prvInitialiseTaskLists+0x54>)
1a000e68:	f000 fccc 	bl	1a001804 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000e6c:	4809      	ldr	r0, [pc, #36]	; (1a000e94 <prvInitialiseTaskLists+0x58>)
1a000e6e:	f000 fcc9 	bl	1a001804 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000e72:	4809      	ldr	r0, [pc, #36]	; (1a000e98 <prvInitialiseTaskLists+0x5c>)
1a000e74:	f000 fcc6 	bl	1a001804 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000e78:	4b08      	ldr	r3, [pc, #32]	; (1a000e9c <prvInitialiseTaskLists+0x60>)
1a000e7a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000e7c:	4b08      	ldr	r3, [pc, #32]	; (1a000ea0 <prvInitialiseTaskLists+0x64>)
1a000e7e:	601c      	str	r4, [r3, #0]
}
1a000e80:	bd38      	pop	{r3, r4, r5, pc}
1a000e82:	bf00      	nop
1a000e84:	1000213c 	.word	0x1000213c
1a000e88:	100021e0 	.word	0x100021e0
1a000e8c:	100021f4 	.word	0x100021f4
1a000e90:	10002214 	.word	0x10002214
1a000e94:	10002240 	.word	0x10002240
1a000e98:	1000222c 	.word	0x1000222c
1a000e9c:	10002134 	.word	0x10002134
1a000ea0:	10002138 	.word	0x10002138

1a000ea4 <prvAddNewTaskToReadyList>:
{
1a000ea4:	b510      	push	{r4, lr}
1a000ea6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000ea8:	f001 f884 	bl	1a001fb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000eac:	4a21      	ldr	r2, [pc, #132]	; (1a000f34 <prvAddNewTaskToReadyList+0x90>)
1a000eae:	6813      	ldr	r3, [r2, #0]
1a000eb0:	3301      	adds	r3, #1
1a000eb2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000eb4:	4b20      	ldr	r3, [pc, #128]	; (1a000f38 <prvAddNewTaskToReadyList+0x94>)
1a000eb6:	681b      	ldr	r3, [r3, #0]
1a000eb8:	b15b      	cbz	r3, 1a000ed2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a000eba:	4b20      	ldr	r3, [pc, #128]	; (1a000f3c <prvAddNewTaskToReadyList+0x98>)
1a000ebc:	681b      	ldr	r3, [r3, #0]
1a000ebe:	b96b      	cbnz	r3, 1a000edc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000ec0:	4b1d      	ldr	r3, [pc, #116]	; (1a000f38 <prvAddNewTaskToReadyList+0x94>)
1a000ec2:	681b      	ldr	r3, [r3, #0]
1a000ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000ec8:	429a      	cmp	r2, r3
1a000eca:	d807      	bhi.n	1a000edc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000ecc:	4b1a      	ldr	r3, [pc, #104]	; (1a000f38 <prvAddNewTaskToReadyList+0x94>)
1a000ece:	601c      	str	r4, [r3, #0]
1a000ed0:	e004      	b.n	1a000edc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000ed2:	4b19      	ldr	r3, [pc, #100]	; (1a000f38 <prvAddNewTaskToReadyList+0x94>)
1a000ed4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000ed6:	6813      	ldr	r3, [r2, #0]
1a000ed8:	2b01      	cmp	r3, #1
1a000eda:	d027      	beq.n	1a000f2c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a000edc:	4a18      	ldr	r2, [pc, #96]	; (1a000f40 <prvAddNewTaskToReadyList+0x9c>)
1a000ede:	6813      	ldr	r3, [r2, #0]
1a000ee0:	3301      	adds	r3, #1
1a000ee2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000ee4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a000ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000ee8:	2201      	movs	r2, #1
1a000eea:	409a      	lsls	r2, r3
1a000eec:	4915      	ldr	r1, [pc, #84]	; (1a000f44 <prvAddNewTaskToReadyList+0xa0>)
1a000eee:	6808      	ldr	r0, [r1, #0]
1a000ef0:	4302      	orrs	r2, r0
1a000ef2:	600a      	str	r2, [r1, #0]
1a000ef4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000ef8:	009a      	lsls	r2, r3, #2
1a000efa:	1d21      	adds	r1, r4, #4
1a000efc:	4812      	ldr	r0, [pc, #72]	; (1a000f48 <prvAddNewTaskToReadyList+0xa4>)
1a000efe:	4410      	add	r0, r2
1a000f00:	f000 fc8e 	bl	1a001820 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a000f04:	f001 f878 	bl	1a001ff8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a000f08:	4b0c      	ldr	r3, [pc, #48]	; (1a000f3c <prvAddNewTaskToReadyList+0x98>)
1a000f0a:	681b      	ldr	r3, [r3, #0]
1a000f0c:	b16b      	cbz	r3, 1a000f2a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000f0e:	4b0a      	ldr	r3, [pc, #40]	; (1a000f38 <prvAddNewTaskToReadyList+0x94>)
1a000f10:	681b      	ldr	r3, [r3, #0]
1a000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000f16:	429a      	cmp	r2, r3
1a000f18:	d207      	bcs.n	1a000f2a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a000f1a:	4b0c      	ldr	r3, [pc, #48]	; (1a000f4c <prvAddNewTaskToReadyList+0xa8>)
1a000f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f20:	601a      	str	r2, [r3, #0]
1a000f22:	f3bf 8f4f 	dsb	sy
1a000f26:	f3bf 8f6f 	isb	sy
}
1a000f2a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a000f2c:	f7ff ff86 	bl	1a000e3c <prvInitialiseTaskLists>
1a000f30:	e7d4      	b.n	1a000edc <prvAddNewTaskToReadyList+0x38>
1a000f32:	bf00      	nop
1a000f34:	100021c8 	.word	0x100021c8
1a000f38:	10002130 	.word	0x10002130
1a000f3c:	10002228 	.word	0x10002228
1a000f40:	100021d8 	.word	0x100021d8
1a000f44:	100021dc 	.word	0x100021dc
1a000f48:	1000213c 	.word	0x1000213c
1a000f4c:	e000ed04 	.word	0xe000ed04

1a000f50 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000f50:	4b0f      	ldr	r3, [pc, #60]	; (1a000f90 <prvCheckTasksWaitingTermination+0x40>)
1a000f52:	681b      	ldr	r3, [r3, #0]
1a000f54:	b1d3      	cbz	r3, 1a000f8c <prvCheckTasksWaitingTermination+0x3c>
{
1a000f56:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a000f58:	f001 f82c 	bl	1a001fb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000f5c:	4b0d      	ldr	r3, [pc, #52]	; (1a000f94 <prvCheckTasksWaitingTermination+0x44>)
1a000f5e:	68db      	ldr	r3, [r3, #12]
1a000f60:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000f62:	1d20      	adds	r0, r4, #4
1a000f64:	f000 fc81 	bl	1a00186a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000f68:	4a0b      	ldr	r2, [pc, #44]	; (1a000f98 <prvCheckTasksWaitingTermination+0x48>)
1a000f6a:	6813      	ldr	r3, [r2, #0]
1a000f6c:	3b01      	subs	r3, #1
1a000f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000f70:	4a07      	ldr	r2, [pc, #28]	; (1a000f90 <prvCheckTasksWaitingTermination+0x40>)
1a000f72:	6813      	ldr	r3, [r2, #0]
1a000f74:	3b01      	subs	r3, #1
1a000f76:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a000f78:	f001 f83e 	bl	1a001ff8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a000f7c:	4620      	mov	r0, r4
1a000f7e:	f7ff ff0b 	bl	1a000d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000f82:	4b03      	ldr	r3, [pc, #12]	; (1a000f90 <prvCheckTasksWaitingTermination+0x40>)
1a000f84:	681b      	ldr	r3, [r3, #0]
1a000f86:	2b00      	cmp	r3, #0
1a000f88:	d1e6      	bne.n	1a000f58 <prvCheckTasksWaitingTermination+0x8>
}
1a000f8a:	bd10      	pop	{r4, pc}
1a000f8c:	4770      	bx	lr
1a000f8e:	bf00      	nop
1a000f90:	100021cc 	.word	0x100021cc
1a000f94:	10002240 	.word	0x10002240
1a000f98:	100021c8 	.word	0x100021c8

1a000f9c <prvIdleTask>:
{
1a000f9c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a000f9e:	f7ff ffd7 	bl	1a000f50 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000fa2:	4b06      	ldr	r3, [pc, #24]	; (1a000fbc <prvIdleTask+0x20>)
1a000fa4:	681b      	ldr	r3, [r3, #0]
1a000fa6:	2b01      	cmp	r3, #1
1a000fa8:	d9f9      	bls.n	1a000f9e <prvIdleTask+0x2>
				taskYIELD();
1a000faa:	4b05      	ldr	r3, [pc, #20]	; (1a000fc0 <prvIdleTask+0x24>)
1a000fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fb0:	601a      	str	r2, [r3, #0]
1a000fb2:	f3bf 8f4f 	dsb	sy
1a000fb6:	f3bf 8f6f 	isb	sy
1a000fba:	e7f0      	b.n	1a000f9e <prvIdleTask+0x2>
1a000fbc:	1000213c 	.word	0x1000213c
1a000fc0:	e000ed04 	.word	0xe000ed04

1a000fc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000fc4:	b570      	push	{r4, r5, r6, lr}
1a000fc6:	4604      	mov	r4, r0
1a000fc8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000fca:	4b1d      	ldr	r3, [pc, #116]	; (1a001040 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000fcc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000fce:	4b1d      	ldr	r3, [pc, #116]	; (1a001044 <prvAddCurrentTaskToDelayedList+0x80>)
1a000fd0:	6818      	ldr	r0, [r3, #0]
1a000fd2:	3004      	adds	r0, #4
1a000fd4:	f000 fc49 	bl	1a00186a <uxListRemove>
1a000fd8:	b950      	cbnz	r0, 1a000ff0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000fda:	4b1a      	ldr	r3, [pc, #104]	; (1a001044 <prvAddCurrentTaskToDelayedList+0x80>)
1a000fdc:	681b      	ldr	r3, [r3, #0]
1a000fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000fe0:	2301      	movs	r3, #1
1a000fe2:	fa03 f202 	lsl.w	r2, r3, r2
1a000fe6:	4918      	ldr	r1, [pc, #96]	; (1a001048 <prvAddCurrentTaskToDelayedList+0x84>)
1a000fe8:	680b      	ldr	r3, [r1, #0]
1a000fea:	ea23 0302 	bic.w	r3, r3, r2
1a000fee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000ff0:	f1b4 3fff 	cmp.w	r4, #4294967295
1a000ff4:	d00d      	beq.n	1a001012 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a000ff6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000ff8:	4b12      	ldr	r3, [pc, #72]	; (1a001044 <prvAddCurrentTaskToDelayedList+0x80>)
1a000ffa:	681b      	ldr	r3, [r3, #0]
1a000ffc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a000ffe:	42a5      	cmp	r5, r4
1a001000:	d910      	bls.n	1a001024 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001002:	4b12      	ldr	r3, [pc, #72]	; (1a00104c <prvAddCurrentTaskToDelayedList+0x88>)
1a001004:	6818      	ldr	r0, [r3, #0]
1a001006:	4b0f      	ldr	r3, [pc, #60]	; (1a001044 <prvAddCurrentTaskToDelayedList+0x80>)
1a001008:	6819      	ldr	r1, [r3, #0]
1a00100a:	3104      	adds	r1, #4
1a00100c:	f000 fc13 	bl	1a001836 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001010:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001012:	2e00      	cmp	r6, #0
1a001014:	d0ef      	beq.n	1a000ff6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001016:	4b0b      	ldr	r3, [pc, #44]	; (1a001044 <prvAddCurrentTaskToDelayedList+0x80>)
1a001018:	6819      	ldr	r1, [r3, #0]
1a00101a:	3104      	adds	r1, #4
1a00101c:	480c      	ldr	r0, [pc, #48]	; (1a001050 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00101e:	f000 fbff 	bl	1a001820 <vListInsertEnd>
1a001022:	e7f5      	b.n	1a001010 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001024:	4b0b      	ldr	r3, [pc, #44]	; (1a001054 <prvAddCurrentTaskToDelayedList+0x90>)
1a001026:	6818      	ldr	r0, [r3, #0]
1a001028:	4b06      	ldr	r3, [pc, #24]	; (1a001044 <prvAddCurrentTaskToDelayedList+0x80>)
1a00102a:	6819      	ldr	r1, [r3, #0]
1a00102c:	3104      	adds	r1, #4
1a00102e:	f000 fc02 	bl	1a001836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a001032:	4b09      	ldr	r3, [pc, #36]	; (1a001058 <prvAddCurrentTaskToDelayedList+0x94>)
1a001034:	681b      	ldr	r3, [r3, #0]
1a001036:	42a3      	cmp	r3, r4
1a001038:	d9ea      	bls.n	1a001010 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a00103a:	4b07      	ldr	r3, [pc, #28]	; (1a001058 <prvAddCurrentTaskToDelayedList+0x94>)
1a00103c:	601c      	str	r4, [r3, #0]
}
1a00103e:	e7e7      	b.n	1a001010 <prvAddCurrentTaskToDelayedList+0x4c>
1a001040:	10002254 	.word	0x10002254
1a001044:	10002130 	.word	0x10002130
1a001048:	100021dc 	.word	0x100021dc
1a00104c:	10002138 	.word	0x10002138
1a001050:	1000222c 	.word	0x1000222c
1a001054:	10002134 	.word	0x10002134
1a001058:	1000220c 	.word	0x1000220c

1a00105c <xTaskCreate>:
	{
1a00105c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001060:	b085      	sub	sp, #20
1a001062:	4607      	mov	r7, r0
1a001064:	4688      	mov	r8, r1
1a001066:	4614      	mov	r4, r2
1a001068:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00106a:	0090      	lsls	r0, r2, #2
1a00106c:	f7ff fc38 	bl	1a0008e0 <pvPortMalloc>
			if( pxStack != NULL )
1a001070:	b1e8      	cbz	r0, 1a0010ae <xTaskCreate+0x52>
1a001072:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001074:	2060      	movs	r0, #96	; 0x60
1a001076:	f7ff fc33 	bl	1a0008e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00107a:	4605      	mov	r5, r0
1a00107c:	b198      	cbz	r0, 1a0010a6 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
1a00107e:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001080:	b1d5      	cbz	r5, 1a0010b8 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001082:	2300      	movs	r3, #0
1a001084:	9303      	str	r3, [sp, #12]
1a001086:	9502      	str	r5, [sp, #8]
1a001088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00108a:	9301      	str	r3, [sp, #4]
1a00108c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00108e:	9300      	str	r3, [sp, #0]
1a001090:	464b      	mov	r3, r9
1a001092:	4622      	mov	r2, r4
1a001094:	4641      	mov	r1, r8
1a001096:	4638      	mov	r0, r7
1a001098:	f7ff fe87 	bl	1a000daa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00109c:	4628      	mov	r0, r5
1a00109e:	f7ff ff01 	bl	1a000ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0010a2:	2001      	movs	r0, #1
1a0010a4:	e005      	b.n	1a0010b2 <xTaskCreate+0x56>
					vPortFree( pxStack );
1a0010a6:	4630      	mov	r0, r6
1a0010a8:	f7ff fc52 	bl	1a000950 <vPortFree>
1a0010ac:	e7e8      	b.n	1a001080 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0010ae:	f04f 30ff 	mov.w	r0, #4294967295
	}
1a0010b2:	b005      	add	sp, #20
1a0010b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0010b8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
1a0010bc:	e7f9      	b.n	1a0010b2 <xTaskCreate+0x56>
1a0010be:	Address 0x1a0010be is out of bounds.


1a0010c0 <vTaskStartScheduler>:
{
1a0010c0:	b500      	push	{lr}
1a0010c2:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a0010c4:	4b19      	ldr	r3, [pc, #100]	; (1a00112c <vTaskStartScheduler+0x6c>)
1a0010c6:	9301      	str	r3, [sp, #4]
1a0010c8:	2300      	movs	r3, #0
1a0010ca:	9300      	str	r3, [sp, #0]
1a0010cc:	225a      	movs	r2, #90	; 0x5a
1a0010ce:	4918      	ldr	r1, [pc, #96]	; (1a001130 <vTaskStartScheduler+0x70>)
1a0010d0:	4818      	ldr	r0, [pc, #96]	; (1a001134 <vTaskStartScheduler+0x74>)
1a0010d2:	f7ff ffc3 	bl	1a00105c <xTaskCreate>
		if( xReturn == pdPASS )
1a0010d6:	2801      	cmp	r0, #1
1a0010d8:	d007      	beq.n	1a0010ea <vTaskStartScheduler+0x2a>
	if( xReturn == pdPASS )
1a0010da:	2801      	cmp	r0, #1
1a0010dc:	d008      	beq.n	1a0010f0 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0010de:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0010e2:	d01a      	beq.n	1a00111a <vTaskStartScheduler+0x5a>
}
1a0010e4:	b003      	add	sp, #12
1a0010e6:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
1a0010ea:	f7ff fc9f 	bl	1a000a2c <xTimerCreateTimerTask>
1a0010ee:	e7f4      	b.n	1a0010da <vTaskStartScheduler+0x1a>
1a0010f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010f4:	f383 8811 	msr	BASEPRI, r3
1a0010f8:	f3bf 8f6f 	isb	sy
1a0010fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001100:	4b0d      	ldr	r3, [pc, #52]	; (1a001138 <vTaskStartScheduler+0x78>)
1a001102:	f04f 32ff 	mov.w	r2, #4294967295
1a001106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001108:	4b0c      	ldr	r3, [pc, #48]	; (1a00113c <vTaskStartScheduler+0x7c>)
1a00110a:	2201      	movs	r2, #1
1a00110c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a00110e:	4b0c      	ldr	r3, [pc, #48]	; (1a001140 <vTaskStartScheduler+0x80>)
1a001110:	2200      	movs	r2, #0
1a001112:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001114:	f000 fff0 	bl	1a0020f8 <xPortStartScheduler>
1a001118:	e7e4      	b.n	1a0010e4 <vTaskStartScheduler+0x24>
1a00111a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00111e:	f383 8811 	msr	BASEPRI, r3
1a001122:	f3bf 8f6f 	isb	sy
1a001126:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00112a:	e7fe      	b.n	1a00112a <vTaskStartScheduler+0x6a>
1a00112c:	10002208 	.word	0x10002208
1a001130:	1a008578 	.word	0x1a008578
1a001134:	1a000f9d 	.word	0x1a000f9d
1a001138:	1000220c 	.word	0x1000220c
1a00113c:	10002228 	.word	0x10002228
1a001140:	10002254 	.word	0x10002254

1a001144 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001144:	4a02      	ldr	r2, [pc, #8]	; (1a001150 <vTaskSuspendAll+0xc>)
1a001146:	6813      	ldr	r3, [r2, #0]
1a001148:	3301      	adds	r3, #1
1a00114a:	6013      	str	r3, [r2, #0]
}
1a00114c:	4770      	bx	lr
1a00114e:	bf00      	nop
1a001150:	100021d4 	.word	0x100021d4

1a001154 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001154:	4b01      	ldr	r3, [pc, #4]	; (1a00115c <xTaskGetTickCount+0x8>)
1a001156:	6818      	ldr	r0, [r3, #0]
}
1a001158:	4770      	bx	lr
1a00115a:	bf00      	nop
1a00115c:	10002254 	.word	0x10002254

1a001160 <xTaskIncrementTick>:
{
1a001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001162:	4b3a      	ldr	r3, [pc, #232]	; (1a00124c <xTaskIncrementTick+0xec>)
1a001164:	681b      	ldr	r3, [r3, #0]
1a001166:	2b00      	cmp	r3, #0
1a001168:	d164      	bne.n	1a001234 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00116a:	4b39      	ldr	r3, [pc, #228]	; (1a001250 <xTaskIncrementTick+0xf0>)
1a00116c:	681d      	ldr	r5, [r3, #0]
1a00116e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001170:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001172:	b9c5      	cbnz	r5, 1a0011a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001174:	4b37      	ldr	r3, [pc, #220]	; (1a001254 <xTaskIncrementTick+0xf4>)
1a001176:	681b      	ldr	r3, [r3, #0]
1a001178:	681b      	ldr	r3, [r3, #0]
1a00117a:	b143      	cbz	r3, 1a00118e <xTaskIncrementTick+0x2e>
1a00117c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001180:	f383 8811 	msr	BASEPRI, r3
1a001184:	f3bf 8f6f 	isb	sy
1a001188:	f3bf 8f4f 	dsb	sy
1a00118c:	e7fe      	b.n	1a00118c <xTaskIncrementTick+0x2c>
1a00118e:	4a31      	ldr	r2, [pc, #196]	; (1a001254 <xTaskIncrementTick+0xf4>)
1a001190:	6811      	ldr	r1, [r2, #0]
1a001192:	4b31      	ldr	r3, [pc, #196]	; (1a001258 <xTaskIncrementTick+0xf8>)
1a001194:	6818      	ldr	r0, [r3, #0]
1a001196:	6010      	str	r0, [r2, #0]
1a001198:	6019      	str	r1, [r3, #0]
1a00119a:	4a30      	ldr	r2, [pc, #192]	; (1a00125c <xTaskIncrementTick+0xfc>)
1a00119c:	6813      	ldr	r3, [r2, #0]
1a00119e:	3301      	adds	r3, #1
1a0011a0:	6013      	str	r3, [r2, #0]
1a0011a2:	f7ff fde3 	bl	1a000d6c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0011a6:	4b2e      	ldr	r3, [pc, #184]	; (1a001260 <xTaskIncrementTick+0x100>)
1a0011a8:	681b      	ldr	r3, [r3, #0]
1a0011aa:	42ab      	cmp	r3, r5
1a0011ac:	d938      	bls.n	1a001220 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0011ae:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0011b0:	4b2c      	ldr	r3, [pc, #176]	; (1a001264 <xTaskIncrementTick+0x104>)
1a0011b2:	681b      	ldr	r3, [r3, #0]
1a0011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0011b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0011ba:	009a      	lsls	r2, r3, #2
1a0011bc:	4b2a      	ldr	r3, [pc, #168]	; (1a001268 <xTaskIncrementTick+0x108>)
1a0011be:	589b      	ldr	r3, [r3, r2]
1a0011c0:	2b01      	cmp	r3, #1
1a0011c2:	d93c      	bls.n	1a00123e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0011c4:	2401      	movs	r4, #1
1a0011c6:	e03a      	b.n	1a00123e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0011c8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0011ca:	4b22      	ldr	r3, [pc, #136]	; (1a001254 <xTaskIncrementTick+0xf4>)
1a0011cc:	681b      	ldr	r3, [r3, #0]
1a0011ce:	681b      	ldr	r3, [r3, #0]
1a0011d0:	b343      	cbz	r3, 1a001224 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0011d2:	4b20      	ldr	r3, [pc, #128]	; (1a001254 <xTaskIncrementTick+0xf4>)
1a0011d4:	681b      	ldr	r3, [r3, #0]
1a0011d6:	68db      	ldr	r3, [r3, #12]
1a0011d8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0011da:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0011dc:	429d      	cmp	r5, r3
1a0011de:	d326      	bcc.n	1a00122e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0011e0:	1d37      	adds	r7, r6, #4
1a0011e2:	4638      	mov	r0, r7
1a0011e4:	f000 fb41 	bl	1a00186a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0011e8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0011ea:	b11b      	cbz	r3, 1a0011f4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0011ec:	f106 0018 	add.w	r0, r6, #24
1a0011f0:	f000 fb3b 	bl	1a00186a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0011f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0011f6:	2201      	movs	r2, #1
1a0011f8:	409a      	lsls	r2, r3
1a0011fa:	491c      	ldr	r1, [pc, #112]	; (1a00126c <xTaskIncrementTick+0x10c>)
1a0011fc:	6808      	ldr	r0, [r1, #0]
1a0011fe:	4302      	orrs	r2, r0
1a001200:	600a      	str	r2, [r1, #0]
1a001202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001206:	009a      	lsls	r2, r3, #2
1a001208:	4639      	mov	r1, r7
1a00120a:	4817      	ldr	r0, [pc, #92]	; (1a001268 <xTaskIncrementTick+0x108>)
1a00120c:	4410      	add	r0, r2
1a00120e:	f000 fb07 	bl	1a001820 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001212:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001214:	4b13      	ldr	r3, [pc, #76]	; (1a001264 <xTaskIncrementTick+0x104>)
1a001216:	681b      	ldr	r3, [r3, #0]
1a001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00121a:	429a      	cmp	r2, r3
1a00121c:	d2d4      	bcs.n	1a0011c8 <xTaskIncrementTick+0x68>
1a00121e:	e7d4      	b.n	1a0011ca <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001220:	2400      	movs	r4, #0
1a001222:	e7d2      	b.n	1a0011ca <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001224:	4b0e      	ldr	r3, [pc, #56]	; (1a001260 <xTaskIncrementTick+0x100>)
1a001226:	f04f 32ff 	mov.w	r2, #4294967295
1a00122a:	601a      	str	r2, [r3, #0]
					break;
1a00122c:	e7c0      	b.n	1a0011b0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00122e:	4a0c      	ldr	r2, [pc, #48]	; (1a001260 <xTaskIncrementTick+0x100>)
1a001230:	6013      	str	r3, [r2, #0]
						break;
1a001232:	e7bd      	b.n	1a0011b0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001234:	4a0e      	ldr	r2, [pc, #56]	; (1a001270 <xTaskIncrementTick+0x110>)
1a001236:	6813      	ldr	r3, [r2, #0]
1a001238:	3301      	adds	r3, #1
1a00123a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00123c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00123e:	4b0d      	ldr	r3, [pc, #52]	; (1a001274 <xTaskIncrementTick+0x114>)
1a001240:	681b      	ldr	r3, [r3, #0]
1a001242:	b103      	cbz	r3, 1a001246 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001244:	2401      	movs	r4, #1
}
1a001246:	4620      	mov	r0, r4
1a001248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00124a:	bf00      	nop
1a00124c:	100021d4 	.word	0x100021d4
1a001250:	10002254 	.word	0x10002254
1a001254:	10002134 	.word	0x10002134
1a001258:	10002138 	.word	0x10002138
1a00125c:	10002210 	.word	0x10002210
1a001260:	1000220c 	.word	0x1000220c
1a001264:	10002130 	.word	0x10002130
1a001268:	1000213c 	.word	0x1000213c
1a00126c:	100021dc 	.word	0x100021dc
1a001270:	100021d0 	.word	0x100021d0
1a001274:	10002258 	.word	0x10002258

1a001278 <xTaskResumeAll>:
{
1a001278:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00127a:	4b35      	ldr	r3, [pc, #212]	; (1a001350 <xTaskResumeAll+0xd8>)
1a00127c:	681b      	ldr	r3, [r3, #0]
1a00127e:	b943      	cbnz	r3, 1a001292 <xTaskResumeAll+0x1a>
1a001280:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001284:	f383 8811 	msr	BASEPRI, r3
1a001288:	f3bf 8f6f 	isb	sy
1a00128c:	f3bf 8f4f 	dsb	sy
1a001290:	e7fe      	b.n	1a001290 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001292:	f000 fe8f 	bl	1a001fb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001296:	4b2e      	ldr	r3, [pc, #184]	; (1a001350 <xTaskResumeAll+0xd8>)
1a001298:	681a      	ldr	r2, [r3, #0]
1a00129a:	3a01      	subs	r2, #1
1a00129c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00129e:	681b      	ldr	r3, [r3, #0]
1a0012a0:	2b00      	cmp	r3, #0
1a0012a2:	d14d      	bne.n	1a001340 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0012a4:	4b2b      	ldr	r3, [pc, #172]	; (1a001354 <xTaskResumeAll+0xdc>)
1a0012a6:	681b      	ldr	r3, [r3, #0]
1a0012a8:	b90b      	cbnz	r3, 1a0012ae <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a0012aa:	2400      	movs	r4, #0
1a0012ac:	e049      	b.n	1a001342 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a0012ae:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0012b0:	4b29      	ldr	r3, [pc, #164]	; (1a001358 <xTaskResumeAll+0xe0>)
1a0012b2:	681b      	ldr	r3, [r3, #0]
1a0012b4:	b31b      	cbz	r3, 1a0012fe <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0012b6:	4b28      	ldr	r3, [pc, #160]	; (1a001358 <xTaskResumeAll+0xe0>)
1a0012b8:	68db      	ldr	r3, [r3, #12]
1a0012ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0012bc:	f104 0018 	add.w	r0, r4, #24
1a0012c0:	f000 fad3 	bl	1a00186a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0012c4:	1d25      	adds	r5, r4, #4
1a0012c6:	4628      	mov	r0, r5
1a0012c8:	f000 facf 	bl	1a00186a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0012cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012ce:	2201      	movs	r2, #1
1a0012d0:	409a      	lsls	r2, r3
1a0012d2:	4922      	ldr	r1, [pc, #136]	; (1a00135c <xTaskResumeAll+0xe4>)
1a0012d4:	6808      	ldr	r0, [r1, #0]
1a0012d6:	4302      	orrs	r2, r0
1a0012d8:	600a      	str	r2, [r1, #0]
1a0012da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0012de:	009a      	lsls	r2, r3, #2
1a0012e0:	4629      	mov	r1, r5
1a0012e2:	481f      	ldr	r0, [pc, #124]	; (1a001360 <xTaskResumeAll+0xe8>)
1a0012e4:	4410      	add	r0, r2
1a0012e6:	f000 fa9b 	bl	1a001820 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0012ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0012ec:	4b1d      	ldr	r3, [pc, #116]	; (1a001364 <xTaskResumeAll+0xec>)
1a0012ee:	681b      	ldr	r3, [r3, #0]
1a0012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0012f2:	429a      	cmp	r2, r3
1a0012f4:	d3dc      	bcc.n	1a0012b0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a0012f6:	4b1c      	ldr	r3, [pc, #112]	; (1a001368 <xTaskResumeAll+0xf0>)
1a0012f8:	2201      	movs	r2, #1
1a0012fa:	601a      	str	r2, [r3, #0]
1a0012fc:	e7d8      	b.n	1a0012b0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0012fe:	b10c      	cbz	r4, 1a001304 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a001300:	f7ff fd34 	bl	1a000d6c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001304:	4b19      	ldr	r3, [pc, #100]	; (1a00136c <xTaskResumeAll+0xf4>)
1a001306:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001308:	b974      	cbnz	r4, 1a001328 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a00130a:	4b17      	ldr	r3, [pc, #92]	; (1a001368 <xTaskResumeAll+0xf0>)
1a00130c:	681b      	ldr	r3, [r3, #0]
1a00130e:	b1e3      	cbz	r3, 1a00134a <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001310:	4b17      	ldr	r3, [pc, #92]	; (1a001370 <xTaskResumeAll+0xf8>)
1a001312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001316:	601a      	str	r2, [r3, #0]
1a001318:	f3bf 8f4f 	dsb	sy
1a00131c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001320:	2401      	movs	r4, #1
1a001322:	e00e      	b.n	1a001342 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001324:	3c01      	subs	r4, #1
1a001326:	d007      	beq.n	1a001338 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a001328:	f7ff ff1a 	bl	1a001160 <xTaskIncrementTick>
1a00132c:	2800      	cmp	r0, #0
1a00132e:	d0f9      	beq.n	1a001324 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a001330:	4b0d      	ldr	r3, [pc, #52]	; (1a001368 <xTaskResumeAll+0xf0>)
1a001332:	2201      	movs	r2, #1
1a001334:	601a      	str	r2, [r3, #0]
1a001336:	e7f5      	b.n	1a001324 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a001338:	4b0c      	ldr	r3, [pc, #48]	; (1a00136c <xTaskResumeAll+0xf4>)
1a00133a:	2200      	movs	r2, #0
1a00133c:	601a      	str	r2, [r3, #0]
1a00133e:	e7e4      	b.n	1a00130a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a001340:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001342:	f000 fe59 	bl	1a001ff8 <vPortExitCritical>
}
1a001346:	4620      	mov	r0, r4
1a001348:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a00134a:	2400      	movs	r4, #0
1a00134c:	e7f9      	b.n	1a001342 <xTaskResumeAll+0xca>
1a00134e:	bf00      	nop
1a001350:	100021d4 	.word	0x100021d4
1a001354:	100021c8 	.word	0x100021c8
1a001358:	10002214 	.word	0x10002214
1a00135c:	100021dc 	.word	0x100021dc
1a001360:	1000213c 	.word	0x1000213c
1a001364:	10002130 	.word	0x10002130
1a001368:	10002258 	.word	0x10002258
1a00136c:	100021d0 	.word	0x100021d0
1a001370:	e000ed04 	.word	0xe000ed04

1a001374 <vTaskDelayUntil>:
	{
1a001374:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001376:	b150      	cbz	r0, 1a00138e <vTaskDelayUntil+0x1a>
1a001378:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00137a:	b989      	cbnz	r1, 1a0013a0 <vTaskDelayUntil+0x2c>
1a00137c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001380:	f383 8811 	msr	BASEPRI, r3
1a001384:	f3bf 8f6f 	isb	sy
1a001388:	f3bf 8f4f 	dsb	sy
1a00138c:	e7fe      	b.n	1a00138c <vTaskDelayUntil+0x18>
1a00138e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001392:	f383 8811 	msr	BASEPRI, r3
1a001396:	f3bf 8f6f 	isb	sy
1a00139a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
1a00139e:	e7fe      	b.n	1a00139e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0013a0:	4b1a      	ldr	r3, [pc, #104]	; (1a00140c <vTaskDelayUntil+0x98>)
1a0013a2:	681b      	ldr	r3, [r3, #0]
1a0013a4:	b143      	cbz	r3, 1a0013b8 <vTaskDelayUntil+0x44>
1a0013a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013aa:	f383 8811 	msr	BASEPRI, r3
1a0013ae:	f3bf 8f6f 	isb	sy
1a0013b2:	f3bf 8f4f 	dsb	sy
1a0013b6:	e7fe      	b.n	1a0013b6 <vTaskDelayUntil+0x42>
1a0013b8:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a0013ba:	f7ff fec3 	bl	1a001144 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a0013be:	4b14      	ldr	r3, [pc, #80]	; (1a001410 <vTaskDelayUntil+0x9c>)
1a0013c0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a0013c2:	682a      	ldr	r2, [r5, #0]
1a0013c4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a0013c6:	4282      	cmp	r2, r0
1a0013c8:	d909      	bls.n	1a0013de <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0013ca:	42a2      	cmp	r2, r4
1a0013cc:	d801      	bhi.n	1a0013d2 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
1a0013ce:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a0013d0:	e00e      	b.n	1a0013f0 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0013d2:	42a0      	cmp	r0, r4
1a0013d4:	d301      	bcc.n	1a0013da <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
1a0013d6:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a0013d8:	e00a      	b.n	1a0013f0 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0013da:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a0013dc:	e004      	b.n	1a0013e8 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0013de:	42a2      	cmp	r2, r4
1a0013e0:	d801      	bhi.n	1a0013e6 <vTaskDelayUntil+0x72>
1a0013e2:	42a0      	cmp	r0, r4
1a0013e4:	d210      	bcs.n	1a001408 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0013e6:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0013e8:	2100      	movs	r1, #0
1a0013ea:	1a20      	subs	r0, r4, r0
1a0013ec:	f7ff fdea 	bl	1a000fc4 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
1a0013f0:	f7ff ff42 	bl	1a001278 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0013f4:	b938      	cbnz	r0, 1a001406 <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
1a0013f6:	4b07      	ldr	r3, [pc, #28]	; (1a001414 <vTaskDelayUntil+0xa0>)
1a0013f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013fc:	601a      	str	r2, [r3, #0]
1a0013fe:	f3bf 8f4f 	dsb	sy
1a001402:	f3bf 8f6f 	isb	sy
	}
1a001406:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
1a001408:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a00140a:	e7f1      	b.n	1a0013f0 <vTaskDelayUntil+0x7c>
1a00140c:	100021d4 	.word	0x100021d4
1a001410:	10002254 	.word	0x10002254
1a001414:	e000ed04 	.word	0xe000ed04

1a001418 <vTaskDelay>:
	{
1a001418:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00141a:	b1a8      	cbz	r0, 1a001448 <vTaskDelay+0x30>
1a00141c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00141e:	4b0f      	ldr	r3, [pc, #60]	; (1a00145c <vTaskDelay+0x44>)
1a001420:	681b      	ldr	r3, [r3, #0]
1a001422:	b143      	cbz	r3, 1a001436 <vTaskDelay+0x1e>
1a001424:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001428:	f383 8811 	msr	BASEPRI, r3
1a00142c:	f3bf 8f6f 	isb	sy
1a001430:	f3bf 8f4f 	dsb	sy
1a001434:	e7fe      	b.n	1a001434 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001436:	f7ff fe85 	bl	1a001144 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00143a:	2100      	movs	r1, #0
1a00143c:	4620      	mov	r0, r4
1a00143e:	f7ff fdc1 	bl	1a000fc4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001442:	f7ff ff19 	bl	1a001278 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001446:	b938      	cbnz	r0, 1a001458 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001448:	4b05      	ldr	r3, [pc, #20]	; (1a001460 <vTaskDelay+0x48>)
1a00144a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00144e:	601a      	str	r2, [r3, #0]
1a001450:	f3bf 8f4f 	dsb	sy
1a001454:	f3bf 8f6f 	isb	sy
	}
1a001458:	bd10      	pop	{r4, pc}
1a00145a:	bf00      	nop
1a00145c:	100021d4 	.word	0x100021d4
1a001460:	e000ed04 	.word	0xe000ed04

1a001464 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001464:	4b2d      	ldr	r3, [pc, #180]	; (1a00151c <vTaskSwitchContext+0xb8>)
1a001466:	681b      	ldr	r3, [r3, #0]
1a001468:	b11b      	cbz	r3, 1a001472 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00146a:	4b2d      	ldr	r3, [pc, #180]	; (1a001520 <vTaskSwitchContext+0xbc>)
1a00146c:	2201      	movs	r2, #1
1a00146e:	601a      	str	r2, [r3, #0]
1a001470:	4770      	bx	lr
{
1a001472:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001474:	4b2a      	ldr	r3, [pc, #168]	; (1a001520 <vTaskSwitchContext+0xbc>)
1a001476:	2200      	movs	r2, #0
1a001478:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00147a:	4b2a      	ldr	r3, [pc, #168]	; (1a001524 <vTaskSwitchContext+0xc0>)
1a00147c:	681b      	ldr	r3, [r3, #0]
1a00147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001480:	681a      	ldr	r2, [r3, #0]
1a001482:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001486:	d103      	bne.n	1a001490 <vTaskSwitchContext+0x2c>
1a001488:	685a      	ldr	r2, [r3, #4]
1a00148a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00148e:	d01b      	beq.n	1a0014c8 <vTaskSwitchContext+0x64>
1a001490:	4b24      	ldr	r3, [pc, #144]	; (1a001524 <vTaskSwitchContext+0xc0>)
1a001492:	6818      	ldr	r0, [r3, #0]
1a001494:	6819      	ldr	r1, [r3, #0]
1a001496:	3134      	adds	r1, #52	; 0x34
1a001498:	f000 f9a6 	bl	1a0017e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00149c:	4b22      	ldr	r3, [pc, #136]	; (1a001528 <vTaskSwitchContext+0xc4>)
1a00149e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0014a0:	fab3 f383 	clz	r3, r3
1a0014a4:	b2db      	uxtb	r3, r3
1a0014a6:	f1c3 031f 	rsb	r3, r3, #31
1a0014aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0014ae:	008a      	lsls	r2, r1, #2
1a0014b0:	491e      	ldr	r1, [pc, #120]	; (1a00152c <vTaskSwitchContext+0xc8>)
1a0014b2:	588a      	ldr	r2, [r1, r2]
1a0014b4:	b98a      	cbnz	r2, 1a0014da <vTaskSwitchContext+0x76>
	__asm volatile
1a0014b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ba:	f383 8811 	msr	BASEPRI, r3
1a0014be:	f3bf 8f6f 	isb	sy
1a0014c2:	f3bf 8f4f 	dsb	sy
1a0014c6:	e7fe      	b.n	1a0014c6 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0014c8:	689a      	ldr	r2, [r3, #8]
1a0014ca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0014ce:	d1df      	bne.n	1a001490 <vTaskSwitchContext+0x2c>
1a0014d0:	68db      	ldr	r3, [r3, #12]
1a0014d2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0014d6:	d1db      	bne.n	1a001490 <vTaskSwitchContext+0x2c>
1a0014d8:	e7e0      	b.n	1a00149c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0014da:	4814      	ldr	r0, [pc, #80]	; (1a00152c <vTaskSwitchContext+0xc8>)
1a0014dc:	009a      	lsls	r2, r3, #2
1a0014de:	18d4      	adds	r4, r2, r3
1a0014e0:	00a1      	lsls	r1, r4, #2
1a0014e2:	4401      	add	r1, r0
1a0014e4:	684c      	ldr	r4, [r1, #4]
1a0014e6:	6864      	ldr	r4, [r4, #4]
1a0014e8:	604c      	str	r4, [r1, #4]
1a0014ea:	441a      	add	r2, r3
1a0014ec:	0091      	lsls	r1, r2, #2
1a0014ee:	3108      	adds	r1, #8
1a0014f0:	4408      	add	r0, r1
1a0014f2:	4284      	cmp	r4, r0
1a0014f4:	d009      	beq.n	1a00150a <vTaskSwitchContext+0xa6>
1a0014f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014fa:	009a      	lsls	r2, r3, #2
1a0014fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00152c <vTaskSwitchContext+0xc8>)
1a0014fe:	4413      	add	r3, r2
1a001500:	685b      	ldr	r3, [r3, #4]
1a001502:	68da      	ldr	r2, [r3, #12]
1a001504:	4b07      	ldr	r3, [pc, #28]	; (1a001524 <vTaskSwitchContext+0xc0>)
1a001506:	601a      	str	r2, [r3, #0]
}
1a001508:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00150a:	6860      	ldr	r0, [r4, #4]
1a00150c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001510:	0091      	lsls	r1, r2, #2
1a001512:	4a06      	ldr	r2, [pc, #24]	; (1a00152c <vTaskSwitchContext+0xc8>)
1a001514:	440a      	add	r2, r1
1a001516:	6050      	str	r0, [r2, #4]
1a001518:	e7ed      	b.n	1a0014f6 <vTaskSwitchContext+0x92>
1a00151a:	bf00      	nop
1a00151c:	100021d4 	.word	0x100021d4
1a001520:	10002258 	.word	0x10002258
1a001524:	10002130 	.word	0x10002130
1a001528:	100021dc 	.word	0x100021dc
1a00152c:	1000213c 	.word	0x1000213c

1a001530 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001530:	b158      	cbz	r0, 1a00154a <vTaskPlaceOnEventList+0x1a>
{
1a001532:	b510      	push	{r4, lr}
1a001534:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001536:	4b09      	ldr	r3, [pc, #36]	; (1a00155c <vTaskPlaceOnEventList+0x2c>)
1a001538:	6819      	ldr	r1, [r3, #0]
1a00153a:	3118      	adds	r1, #24
1a00153c:	f000 f97b 	bl	1a001836 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001540:	2101      	movs	r1, #1
1a001542:	4620      	mov	r0, r4
1a001544:	f7ff fd3e 	bl	1a000fc4 <prvAddCurrentTaskToDelayedList>
}
1a001548:	bd10      	pop	{r4, pc}
1a00154a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154e:	f383 8811 	msr	BASEPRI, r3
1a001552:	f3bf 8f6f 	isb	sy
1a001556:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a00155a:	e7fe      	b.n	1a00155a <vTaskPlaceOnEventList+0x2a>
1a00155c:	10002130 	.word	0x10002130

1a001560 <vTaskPlaceOnEventListRestricted>:
	{
1a001560:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001562:	b170      	cbz	r0, 1a001582 <vTaskPlaceOnEventListRestricted+0x22>
1a001564:	460c      	mov	r4, r1
1a001566:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001568:	4a0a      	ldr	r2, [pc, #40]	; (1a001594 <vTaskPlaceOnEventListRestricted+0x34>)
1a00156a:	6811      	ldr	r1, [r2, #0]
1a00156c:	3118      	adds	r1, #24
1a00156e:	f000 f957 	bl	1a001820 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001572:	b10d      	cbz	r5, 1a001578 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001574:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001578:	4629      	mov	r1, r5
1a00157a:	4620      	mov	r0, r4
1a00157c:	f7ff fd22 	bl	1a000fc4 <prvAddCurrentTaskToDelayedList>
	}
1a001580:	bd38      	pop	{r3, r4, r5, pc}
1a001582:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001586:	f383 8811 	msr	BASEPRI, r3
1a00158a:	f3bf 8f6f 	isb	sy
1a00158e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a001592:	e7fe      	b.n	1a001592 <vTaskPlaceOnEventListRestricted+0x32>
1a001594:	10002130 	.word	0x10002130

1a001598 <xTaskRemoveFromEventList>:
{
1a001598:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00159a:	68c3      	ldr	r3, [r0, #12]
1a00159c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00159e:	b324      	cbz	r4, 1a0015ea <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0015a0:	f104 0518 	add.w	r5, r4, #24
1a0015a4:	4628      	mov	r0, r5
1a0015a6:	f000 f960 	bl	1a00186a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0015aa:	4b18      	ldr	r3, [pc, #96]	; (1a00160c <xTaskRemoveFromEventList+0x74>)
1a0015ac:	681b      	ldr	r3, [r3, #0]
1a0015ae:	bb2b      	cbnz	r3, 1a0015fc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0015b0:	1d25      	adds	r5, r4, #4
1a0015b2:	4628      	mov	r0, r5
1a0015b4:	f000 f959 	bl	1a00186a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0015b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0015ba:	2201      	movs	r2, #1
1a0015bc:	409a      	lsls	r2, r3
1a0015be:	4914      	ldr	r1, [pc, #80]	; (1a001610 <xTaskRemoveFromEventList+0x78>)
1a0015c0:	6808      	ldr	r0, [r1, #0]
1a0015c2:	4302      	orrs	r2, r0
1a0015c4:	600a      	str	r2, [r1, #0]
1a0015c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0015ca:	009a      	lsls	r2, r3, #2
1a0015cc:	4629      	mov	r1, r5
1a0015ce:	4811      	ldr	r0, [pc, #68]	; (1a001614 <xTaskRemoveFromEventList+0x7c>)
1a0015d0:	4410      	add	r0, r2
1a0015d2:	f000 f925 	bl	1a001820 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0015d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015d8:	4b0f      	ldr	r3, [pc, #60]	; (1a001618 <xTaskRemoveFromEventList+0x80>)
1a0015da:	681b      	ldr	r3, [r3, #0]
1a0015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0015de:	429a      	cmp	r2, r3
1a0015e0:	d911      	bls.n	1a001606 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0015e2:	2001      	movs	r0, #1
1a0015e4:	4b0d      	ldr	r3, [pc, #52]	; (1a00161c <xTaskRemoveFromEventList+0x84>)
1a0015e6:	6018      	str	r0, [r3, #0]
1a0015e8:	e00e      	b.n	1a001608 <xTaskRemoveFromEventList+0x70>
1a0015ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ee:	f383 8811 	msr	BASEPRI, r3
1a0015f2:	f3bf 8f6f 	isb	sy
1a0015f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0015fa:	e7fe      	b.n	1a0015fa <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0015fc:	4629      	mov	r1, r5
1a0015fe:	4808      	ldr	r0, [pc, #32]	; (1a001620 <xTaskRemoveFromEventList+0x88>)
1a001600:	f000 f90e 	bl	1a001820 <vListInsertEnd>
1a001604:	e7e7      	b.n	1a0015d6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001606:	2000      	movs	r0, #0
}
1a001608:	bd38      	pop	{r3, r4, r5, pc}
1a00160a:	bf00      	nop
1a00160c:	100021d4 	.word	0x100021d4
1a001610:	100021dc 	.word	0x100021dc
1a001614:	1000213c 	.word	0x1000213c
1a001618:	10002130 	.word	0x10002130
1a00161c:	10002258 	.word	0x10002258
1a001620:	10002214 	.word	0x10002214

1a001624 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001624:	4b03      	ldr	r3, [pc, #12]	; (1a001634 <vTaskInternalSetTimeOutState+0x10>)
1a001626:	681b      	ldr	r3, [r3, #0]
1a001628:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00162a:	4b03      	ldr	r3, [pc, #12]	; (1a001638 <vTaskInternalSetTimeOutState+0x14>)
1a00162c:	681b      	ldr	r3, [r3, #0]
1a00162e:	6043      	str	r3, [r0, #4]
}
1a001630:	4770      	bx	lr
1a001632:	bf00      	nop
1a001634:	10002210 	.word	0x10002210
1a001638:	10002254 	.word	0x10002254

1a00163c <xTaskCheckForTimeOut>:
{
1a00163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00163e:	b1c8      	cbz	r0, 1a001674 <xTaskCheckForTimeOut+0x38>
1a001640:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001642:	b301      	cbz	r1, 1a001686 <xTaskCheckForTimeOut+0x4a>
1a001644:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001646:	f000 fcb5 	bl	1a001fb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00164a:	4b1b      	ldr	r3, [pc, #108]	; (1a0016b8 <xTaskCheckForTimeOut+0x7c>)
1a00164c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00164e:	686b      	ldr	r3, [r5, #4]
1a001650:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a001652:	6822      	ldr	r2, [r4, #0]
1a001654:	f1b2 3fff 	cmp.w	r2, #4294967295
1a001658:	d026      	beq.n	1a0016a8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00165a:	682f      	ldr	r7, [r5, #0]
1a00165c:	4e17      	ldr	r6, [pc, #92]	; (1a0016bc <xTaskCheckForTimeOut+0x80>)
1a00165e:	6836      	ldr	r6, [r6, #0]
1a001660:	42b7      	cmp	r7, r6
1a001662:	d001      	beq.n	1a001668 <xTaskCheckForTimeOut+0x2c>
1a001664:	428b      	cmp	r3, r1
1a001666:	d924      	bls.n	1a0016b2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001668:	4282      	cmp	r2, r0
1a00166a:	d815      	bhi.n	1a001698 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a00166c:	2300      	movs	r3, #0
1a00166e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001670:	2401      	movs	r4, #1
1a001672:	e01a      	b.n	1a0016aa <xTaskCheckForTimeOut+0x6e>
1a001674:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001678:	f383 8811 	msr	BASEPRI, r3
1a00167c:	f3bf 8f6f 	isb	sy
1a001680:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a001684:	e7fe      	b.n	1a001684 <xTaskCheckForTimeOut+0x48>
1a001686:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00168a:	f383 8811 	msr	BASEPRI, r3
1a00168e:	f3bf 8f6f 	isb	sy
1a001692:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a001696:	e7fe      	b.n	1a001696 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001698:	1a5b      	subs	r3, r3, r1
1a00169a:	4413      	add	r3, r2
1a00169c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a00169e:	4628      	mov	r0, r5
1a0016a0:	f7ff ffc0 	bl	1a001624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0016a4:	2400      	movs	r4, #0
1a0016a6:	e000      	b.n	1a0016aa <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a0016a8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0016aa:	f000 fca5 	bl	1a001ff8 <vPortExitCritical>
}
1a0016ae:	4620      	mov	r0, r4
1a0016b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a0016b2:	2401      	movs	r4, #1
1a0016b4:	e7f9      	b.n	1a0016aa <xTaskCheckForTimeOut+0x6e>
1a0016b6:	bf00      	nop
1a0016b8:	10002254 	.word	0x10002254
1a0016bc:	10002210 	.word	0x10002210

1a0016c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0016c0:	4b01      	ldr	r3, [pc, #4]	; (1a0016c8 <vTaskMissedYield+0x8>)
1a0016c2:	2201      	movs	r2, #1
1a0016c4:	601a      	str	r2, [r3, #0]
}
1a0016c6:	4770      	bx	lr
1a0016c8:	10002258 	.word	0x10002258

1a0016cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0016cc:	4b05      	ldr	r3, [pc, #20]	; (1a0016e4 <xTaskGetSchedulerState+0x18>)
1a0016ce:	681b      	ldr	r3, [r3, #0]
1a0016d0:	b133      	cbz	r3, 1a0016e0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0016d2:	4b05      	ldr	r3, [pc, #20]	; (1a0016e8 <xTaskGetSchedulerState+0x1c>)
1a0016d4:	681b      	ldr	r3, [r3, #0]
1a0016d6:	b10b      	cbz	r3, 1a0016dc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0016d8:	2000      	movs	r0, #0
	}
1a0016da:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0016dc:	2002      	movs	r0, #2
1a0016de:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0016e0:	2001      	movs	r0, #1
1a0016e2:	4770      	bx	lr
1a0016e4:	10002228 	.word	0x10002228
1a0016e8:	100021d4 	.word	0x100021d4

1a0016ec <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0016ec:	2800      	cmp	r0, #0
1a0016ee:	d04c      	beq.n	1a00178a <xTaskPriorityDisinherit+0x9e>
	{
1a0016f0:	b538      	push	{r3, r4, r5, lr}
1a0016f2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0016f4:	4a27      	ldr	r2, [pc, #156]	; (1a001794 <xTaskPriorityDisinherit+0xa8>)
1a0016f6:	6812      	ldr	r2, [r2, #0]
1a0016f8:	4282      	cmp	r2, r0
1a0016fa:	d008      	beq.n	1a00170e <xTaskPriorityDisinherit+0x22>
1a0016fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001700:	f383 8811 	msr	BASEPRI, r3
1a001704:	f3bf 8f6f 	isb	sy
1a001708:	f3bf 8f4f 	dsb	sy
1a00170c:	e7fe      	b.n	1a00170c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00170e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001710:	b942      	cbnz	r2, 1a001724 <xTaskPriorityDisinherit+0x38>
1a001712:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001716:	f383 8811 	msr	BASEPRI, r3
1a00171a:	f3bf 8f6f 	isb	sy
1a00171e:	f3bf 8f4f 	dsb	sy
1a001722:	e7fe      	b.n	1a001722 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001724:	3a01      	subs	r2, #1
1a001726:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001728:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00172a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00172c:	4288      	cmp	r0, r1
1a00172e:	d02e      	beq.n	1a00178e <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001730:	b10a      	cbz	r2, 1a001736 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001732:	2000      	movs	r0, #0
	}
1a001734:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001736:	1d25      	adds	r5, r4, #4
1a001738:	4628      	mov	r0, r5
1a00173a:	f000 f896 	bl	1a00186a <uxListRemove>
1a00173e:	b970      	cbnz	r0, 1a00175e <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001740:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001742:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001746:	008b      	lsls	r3, r1, #2
1a001748:	4913      	ldr	r1, [pc, #76]	; (1a001798 <xTaskPriorityDisinherit+0xac>)
1a00174a:	58cb      	ldr	r3, [r1, r3]
1a00174c:	b93b      	cbnz	r3, 1a00175e <xTaskPriorityDisinherit+0x72>
1a00174e:	2301      	movs	r3, #1
1a001750:	fa03 f202 	lsl.w	r2, r3, r2
1a001754:	4911      	ldr	r1, [pc, #68]	; (1a00179c <xTaskPriorityDisinherit+0xb0>)
1a001756:	680b      	ldr	r3, [r1, #0]
1a001758:	ea23 0302 	bic.w	r3, r3, r2
1a00175c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00175e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001760:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001762:	f1c3 0207 	rsb	r2, r3, #7
1a001766:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001768:	2401      	movs	r4, #1
1a00176a:	fa04 f203 	lsl.w	r2, r4, r3
1a00176e:	490b      	ldr	r1, [pc, #44]	; (1a00179c <xTaskPriorityDisinherit+0xb0>)
1a001770:	6808      	ldr	r0, [r1, #0]
1a001772:	4302      	orrs	r2, r0
1a001774:	600a      	str	r2, [r1, #0]
1a001776:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00177a:	009a      	lsls	r2, r3, #2
1a00177c:	4629      	mov	r1, r5
1a00177e:	4806      	ldr	r0, [pc, #24]	; (1a001798 <xTaskPriorityDisinherit+0xac>)
1a001780:	4410      	add	r0, r2
1a001782:	f000 f84d 	bl	1a001820 <vListInsertEnd>
					xReturn = pdTRUE;
1a001786:	4620      	mov	r0, r4
1a001788:	e7d4      	b.n	1a001734 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a00178a:	2000      	movs	r0, #0
	}
1a00178c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a00178e:	2000      	movs	r0, #0
1a001790:	e7d0      	b.n	1a001734 <xTaskPriorityDisinherit+0x48>
1a001792:	bf00      	nop
1a001794:	10002130 	.word	0x10002130
1a001798:	1000213c 	.word	0x1000213c
1a00179c:	100021dc 	.word	0x100021dc

1a0017a0 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0017a0:	b510      	push	{r4, lr}
1a0017a2:	b082      	sub	sp, #8
1a0017a4:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0017a6:	9001      	str	r0, [sp, #4]
1a0017a8:	2300      	movs	r3, #0
1a0017aa:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0017ac:	f000 fc02 	bl	1a001fb4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0017b0:	9901      	ldr	r1, [sp, #4]
1a0017b2:	4622      	mov	r2, r4
1a0017b4:	4804      	ldr	r0, [pc, #16]	; (1a0017c8 <vAssertCalled+0x28>)
1a0017b6:	f003 fa67 	bl	1a004c88 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a0017ba:	9b00      	ldr	r3, [sp, #0]
1a0017bc:	2b00      	cmp	r3, #0
1a0017be:	d0fc      	beq.n	1a0017ba <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a0017c0:	f000 fc1a 	bl	1a001ff8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a0017c4:	b002      	add	sp, #8
1a0017c6:	bd10      	pop	{r4, pc}
1a0017c8:	1a0085f4 	.word	0x1a0085f4

1a0017cc <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0017cc:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0017ce:	4804      	ldr	r0, [pc, #16]	; (1a0017e0 <vApplicationMallocFailedHook+0x14>)
1a0017d0:	f003 fae0 	bl	1a004d94 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0017d4:	4903      	ldr	r1, [pc, #12]	; (1a0017e4 <vApplicationMallocFailedHook+0x18>)
1a0017d6:	202c      	movs	r0, #44	; 0x2c
1a0017d8:	f7ff ffe2 	bl	1a0017a0 <vAssertCalled>
}
1a0017dc:	bd08      	pop	{r3, pc}
1a0017de:	bf00      	nop
1a0017e0:	1a008580 	.word	0x1a008580
1a0017e4:	1a0085a4 	.word	0x1a0085a4

1a0017e8 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0017e8:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0017ea:	4804      	ldr	r0, [pc, #16]	; (1a0017fc <vApplicationStackOverflowHook+0x14>)
1a0017ec:	f003 fa4c 	bl	1a004c88 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0017f0:	4903      	ldr	r1, [pc, #12]	; (1a001800 <vApplicationStackOverflowHook+0x18>)
1a0017f2:	2050      	movs	r0, #80	; 0x50
1a0017f4:	f7ff ffd4 	bl	1a0017a0 <vAssertCalled>
}
1a0017f8:	bd08      	pop	{r3, pc}
1a0017fa:	bf00      	nop
1a0017fc:	1a0085c4 	.word	0x1a0085c4
1a001800:	1a0085a4 	.word	0x1a0085a4

1a001804 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001804:	f100 0308 	add.w	r3, r0, #8
1a001808:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00180a:	f04f 32ff 	mov.w	r2, #4294967295
1a00180e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001810:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001812:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001814:	2300      	movs	r3, #0
1a001816:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001818:	4770      	bx	lr

1a00181a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00181a:	2300      	movs	r3, #0
1a00181c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a00181e:	4770      	bx	lr

1a001820 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001820:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001822:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001824:	689a      	ldr	r2, [r3, #8]
1a001826:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001828:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00182a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00182c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00182e:	6803      	ldr	r3, [r0, #0]
1a001830:	3301      	adds	r3, #1
1a001832:	6003      	str	r3, [r0, #0]
}
1a001834:	4770      	bx	lr

1a001836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001836:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001838:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00183a:	f1b5 3fff 	cmp.w	r5, #4294967295
1a00183e:	d002      	beq.n	1a001846 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001840:	f100 0208 	add.w	r2, r0, #8
1a001844:	e002      	b.n	1a00184c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001846:	6902      	ldr	r2, [r0, #16]
1a001848:	e004      	b.n	1a001854 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00184a:	461a      	mov	r2, r3
1a00184c:	6853      	ldr	r3, [r2, #4]
1a00184e:	681c      	ldr	r4, [r3, #0]
1a001850:	42ac      	cmp	r4, r5
1a001852:	d9fa      	bls.n	1a00184a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001854:	6853      	ldr	r3, [r2, #4]
1a001856:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001858:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00185a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00185c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00185e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001860:	6803      	ldr	r3, [r0, #0]
1a001862:	3301      	adds	r3, #1
1a001864:	6003      	str	r3, [r0, #0]
}
1a001866:	bc30      	pop	{r4, r5}
1a001868:	4770      	bx	lr

1a00186a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00186a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a00186c:	6841      	ldr	r1, [r0, #4]
1a00186e:	6882      	ldr	r2, [r0, #8]
1a001870:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001872:	6841      	ldr	r1, [r0, #4]
1a001874:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001876:	685a      	ldr	r2, [r3, #4]
1a001878:	4282      	cmp	r2, r0
1a00187a:	d006      	beq.n	1a00188a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00187c:	2200      	movs	r2, #0
1a00187e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001880:	681a      	ldr	r2, [r3, #0]
1a001882:	3a01      	subs	r2, #1
1a001884:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001886:	6818      	ldr	r0, [r3, #0]
}
1a001888:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a00188a:	6882      	ldr	r2, [r0, #8]
1a00188c:	605a      	str	r2, [r3, #4]
1a00188e:	e7f5      	b.n	1a00187c <uxListRemove+0x12>

1a001890 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001890:	b510      	push	{r4, lr}
1a001892:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001894:	f000 fb8e 	bl	1a001fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a001898:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00189a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00189c:	429a      	cmp	r2, r3
1a00189e:	d004      	beq.n	1a0018aa <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0018a0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0018a2:	f000 fba9 	bl	1a001ff8 <vPortExitCritical>

	return xReturn;
}
1a0018a6:	4620      	mov	r0, r4
1a0018a8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0018aa:	2401      	movs	r4, #1
1a0018ac:	e7f9      	b.n	1a0018a2 <prvIsQueueFull+0x12>

1a0018ae <prvIsQueueEmpty>:
{
1a0018ae:	b510      	push	{r4, lr}
1a0018b0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0018b2:	f000 fb7f 	bl	1a001fb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0018b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0018b8:	b923      	cbnz	r3, 1a0018c4 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a0018ba:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a0018bc:	f000 fb9c 	bl	1a001ff8 <vPortExitCritical>
}
1a0018c0:	4620      	mov	r0, r4
1a0018c2:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a0018c4:	2400      	movs	r4, #0
1a0018c6:	e7f9      	b.n	1a0018bc <prvIsQueueEmpty+0xe>

1a0018c8 <prvCopyDataToQueue>:
{
1a0018c8:	b570      	push	{r4, r5, r6, lr}
1a0018ca:	4604      	mov	r4, r0
1a0018cc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0018ce:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0018d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0018d2:	b95a      	cbnz	r2, 1a0018ec <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0018d4:	6803      	ldr	r3, [r0, #0]
1a0018d6:	b11b      	cbz	r3, 1a0018e0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0018d8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0018da:	3501      	adds	r5, #1
1a0018dc:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0018de:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0018e0:	6840      	ldr	r0, [r0, #4]
1a0018e2:	f7ff ff03 	bl	1a0016ec <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0018e6:	2300      	movs	r3, #0
1a0018e8:	6063      	str	r3, [r4, #4]
1a0018ea:	e7f6      	b.n	1a0018da <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0018ec:	b96e      	cbnz	r6, 1a00190a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0018ee:	6880      	ldr	r0, [r0, #8]
1a0018f0:	f002 fe2f 	bl	1a004552 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0018f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0018f6:	68a3      	ldr	r3, [r4, #8]
1a0018f8:	4413      	add	r3, r2
1a0018fa:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0018fc:	6862      	ldr	r2, [r4, #4]
1a0018fe:	4293      	cmp	r3, r2
1a001900:	d319      	bcc.n	1a001936 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a001902:	6823      	ldr	r3, [r4, #0]
1a001904:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a001906:	2000      	movs	r0, #0
1a001908:	e7e7      	b.n	1a0018da <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00190a:	68c0      	ldr	r0, [r0, #12]
1a00190c:	f002 fe21 	bl	1a004552 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001910:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001912:	4252      	negs	r2, r2
1a001914:	68e3      	ldr	r3, [r4, #12]
1a001916:	4413      	add	r3, r2
1a001918:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00191a:	6821      	ldr	r1, [r4, #0]
1a00191c:	428b      	cmp	r3, r1
1a00191e:	d202      	bcs.n	1a001926 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001920:	6863      	ldr	r3, [r4, #4]
1a001922:	441a      	add	r2, r3
1a001924:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a001926:	2e02      	cmp	r6, #2
1a001928:	d001      	beq.n	1a00192e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00192a:	2000      	movs	r0, #0
1a00192c:	e7d5      	b.n	1a0018da <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00192e:	b125      	cbz	r5, 1a00193a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001930:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001932:	2000      	movs	r0, #0
1a001934:	e7d1      	b.n	1a0018da <prvCopyDataToQueue+0x12>
1a001936:	2000      	movs	r0, #0
1a001938:	e7cf      	b.n	1a0018da <prvCopyDataToQueue+0x12>
1a00193a:	2000      	movs	r0, #0
1a00193c:	e7cd      	b.n	1a0018da <prvCopyDataToQueue+0x12>

1a00193e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00193e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001940:	b172      	cbz	r2, 1a001960 <prvCopyDataFromQueue+0x22>
{
1a001942:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001944:	68c3      	ldr	r3, [r0, #12]
1a001946:	4413      	add	r3, r2
1a001948:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00194a:	6844      	ldr	r4, [r0, #4]
1a00194c:	42a3      	cmp	r3, r4
1a00194e:	d301      	bcc.n	1a001954 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001950:	6803      	ldr	r3, [r0, #0]
1a001952:	60c3      	str	r3, [r0, #12]
1a001954:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a001956:	68c1      	ldr	r1, [r0, #12]
1a001958:	4620      	mov	r0, r4
1a00195a:	f002 fdfa 	bl	1a004552 <memcpy>
}
1a00195e:	bd10      	pop	{r4, pc}
1a001960:	4770      	bx	lr

1a001962 <prvUnlockQueue>:
{
1a001962:	b538      	push	{r3, r4, r5, lr}
1a001964:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a001966:	f000 fb25 	bl	1a001fb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00196a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00196e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001970:	e003      	b.n	1a00197a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001972:	f7ff fea5 	bl	1a0016c0 <vTaskMissedYield>
			--cTxLock;
1a001976:	3c01      	subs	r4, #1
1a001978:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00197a:	2c00      	cmp	r4, #0
1a00197c:	dd08      	ble.n	1a001990 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00197e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001980:	b133      	cbz	r3, 1a001990 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001982:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001986:	f7ff fe07 	bl	1a001598 <xTaskRemoveFromEventList>
1a00198a:	2800      	cmp	r0, #0
1a00198c:	d0f3      	beq.n	1a001976 <prvUnlockQueue+0x14>
1a00198e:	e7f0      	b.n	1a001972 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001990:	23ff      	movs	r3, #255	; 0xff
1a001992:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001996:	f000 fb2f 	bl	1a001ff8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00199a:	f000 fb0b 	bl	1a001fb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00199e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0019a2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0019a4:	e003      	b.n	1a0019ae <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0019a6:	f7ff fe8b 	bl	1a0016c0 <vTaskMissedYield>
				--cRxLock;
1a0019aa:	3c01      	subs	r4, #1
1a0019ac:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0019ae:	2c00      	cmp	r4, #0
1a0019b0:	dd08      	ble.n	1a0019c4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0019b2:	692b      	ldr	r3, [r5, #16]
1a0019b4:	b133      	cbz	r3, 1a0019c4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0019b6:	f105 0010 	add.w	r0, r5, #16
1a0019ba:	f7ff fded 	bl	1a001598 <xTaskRemoveFromEventList>
1a0019be:	2800      	cmp	r0, #0
1a0019c0:	d0f3      	beq.n	1a0019aa <prvUnlockQueue+0x48>
1a0019c2:	e7f0      	b.n	1a0019a6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0019c4:	23ff      	movs	r3, #255	; 0xff
1a0019c6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0019ca:	f000 fb15 	bl	1a001ff8 <vPortExitCritical>
}
1a0019ce:	bd38      	pop	{r3, r4, r5, pc}

1a0019d0 <xQueueGenericReset>:
{
1a0019d0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0019d2:	b1e0      	cbz	r0, 1a001a0e <xQueueGenericReset+0x3e>
1a0019d4:	4604      	mov	r4, r0
1a0019d6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0019d8:	f000 faec 	bl	1a001fb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0019dc:	6821      	ldr	r1, [r4, #0]
1a0019de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0019e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0019e2:	fb03 1002 	mla	r0, r3, r2, r1
1a0019e6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0019e8:	2000      	movs	r0, #0
1a0019ea:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0019ec:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0019ee:	3a01      	subs	r2, #1
1a0019f0:	fb02 1303 	mla	r3, r2, r3, r1
1a0019f4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0019f6:	23ff      	movs	r3, #255	; 0xff
1a0019f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0019fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001a00:	b9ed      	cbnz	r5, 1a001a3e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001a02:	6923      	ldr	r3, [r4, #16]
1a001a04:	b963      	cbnz	r3, 1a001a20 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a001a06:	f000 faf7 	bl	1a001ff8 <vPortExitCritical>
}
1a001a0a:	2001      	movs	r0, #1
1a001a0c:	bd38      	pop	{r3, r4, r5, pc}
1a001a0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a12:	f383 8811 	msr	BASEPRI, r3
1a001a16:	f3bf 8f6f 	isb	sy
1a001a1a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001a1e:	e7fe      	b.n	1a001a1e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001a20:	f104 0010 	add.w	r0, r4, #16
1a001a24:	f7ff fdb8 	bl	1a001598 <xTaskRemoveFromEventList>
1a001a28:	2800      	cmp	r0, #0
1a001a2a:	d0ec      	beq.n	1a001a06 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a001a2c:	4b08      	ldr	r3, [pc, #32]	; (1a001a50 <xQueueGenericReset+0x80>)
1a001a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a32:	601a      	str	r2, [r3, #0]
1a001a34:	f3bf 8f4f 	dsb	sy
1a001a38:	f3bf 8f6f 	isb	sy
1a001a3c:	e7e3      	b.n	1a001a06 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001a3e:	f104 0010 	add.w	r0, r4, #16
1a001a42:	f7ff fedf 	bl	1a001804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a001a46:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a4a:	f7ff fedb 	bl	1a001804 <vListInitialise>
1a001a4e:	e7da      	b.n	1a001a06 <xQueueGenericReset+0x36>
1a001a50:	e000ed04 	.word	0xe000ed04

1a001a54 <prvInitialiseNewQueue>:
{
1a001a54:	b538      	push	{r3, r4, r5, lr}
1a001a56:	461d      	mov	r5, r3
1a001a58:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001a5a:	460b      	mov	r3, r1
1a001a5c:	b949      	cbnz	r1, 1a001a72 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001a5e:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001a60:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001a62:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001a64:	2101      	movs	r1, #1
1a001a66:	4620      	mov	r0, r4
1a001a68:	f7ff ffb2 	bl	1a0019d0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001a6c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001a70:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001a72:	6022      	str	r2, [r4, #0]
1a001a74:	e7f4      	b.n	1a001a60 <prvInitialiseNewQueue+0xc>

1a001a76 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001a76:	b940      	cbnz	r0, 1a001a8a <xQueueGenericCreate+0x14>
1a001a78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a7c:	f383 8811 	msr	BASEPRI, r3
1a001a80:	f3bf 8f6f 	isb	sy
1a001a84:	f3bf 8f4f 	dsb	sy
1a001a88:	e7fe      	b.n	1a001a88 <xQueueGenericCreate+0x12>
	{
1a001a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a8c:	b083      	sub	sp, #12
1a001a8e:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001a90:	b199      	cbz	r1, 1a001aba <xQueueGenericCreate+0x44>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a92:	fb01 f000 	mul.w	r0, r1, r0
1a001a96:	4617      	mov	r7, r2
1a001a98:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001a9a:	3050      	adds	r0, #80	; 0x50
1a001a9c:	f7fe ff20 	bl	1a0008e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001aa0:	4606      	mov	r6, r0
1a001aa2:	b138      	cbz	r0, 1a001ab4 <xQueueGenericCreate+0x3e>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001aa4:	9000      	str	r0, [sp, #0]
1a001aa6:	463b      	mov	r3, r7
1a001aa8:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001aac:	4621      	mov	r1, r4
1a001aae:	4628      	mov	r0, r5
1a001ab0:	f7ff ffd0 	bl	1a001a54 <prvInitialiseNewQueue>
	}
1a001ab4:	4630      	mov	r0, r6
1a001ab6:	b003      	add	sp, #12
1a001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a001aba:	2000      	movs	r0, #0
1a001abc:	e7eb      	b.n	1a001a96 <xQueueGenericCreate+0x20>
1a001abe:	Address 0x1a001abe is out of bounds.


1a001ac0 <xQueueGenericSend>:
{
1a001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001ac2:	b085      	sub	sp, #20
1a001ac4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001ac6:	b178      	cbz	r0, 1a001ae8 <xQueueGenericSend+0x28>
1a001ac8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001aca:	b1b1      	cbz	r1, 1a001afa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001acc:	2b02      	cmp	r3, #2
1a001ace:	d120      	bne.n	1a001b12 <xQueueGenericSend+0x52>
1a001ad0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001ad2:	2a01      	cmp	r2, #1
1a001ad4:	d01d      	beq.n	1a001b12 <xQueueGenericSend+0x52>
1a001ad6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ada:	f383 8811 	msr	BASEPRI, r3
1a001ade:	f3bf 8f6f 	isb	sy
1a001ae2:	f3bf 8f4f 	dsb	sy
1a001ae6:	e7fe      	b.n	1a001ae6 <xQueueGenericSend+0x26>
1a001ae8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aec:	f383 8811 	msr	BASEPRI, r3
1a001af0:	f3bf 8f6f 	isb	sy
1a001af4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001af8:	e7fe      	b.n	1a001af8 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001afa:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001afc:	2a00      	cmp	r2, #0
1a001afe:	d0e5      	beq.n	1a001acc <xQueueGenericSend+0xc>
1a001b00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b04:	f383 8811 	msr	BASEPRI, r3
1a001b08:	f3bf 8f6f 	isb	sy
1a001b0c:	f3bf 8f4f 	dsb	sy
1a001b10:	e7fe      	b.n	1a001b10 <xQueueGenericSend+0x50>
1a001b12:	461e      	mov	r6, r3
1a001b14:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001b16:	f7ff fdd9 	bl	1a0016cc <xTaskGetSchedulerState>
1a001b1a:	b950      	cbnz	r0, 1a001b32 <xQueueGenericSend+0x72>
1a001b1c:	9b01      	ldr	r3, [sp, #4]
1a001b1e:	b153      	cbz	r3, 1a001b36 <xQueueGenericSend+0x76>
1a001b20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b24:	f383 8811 	msr	BASEPRI, r3
1a001b28:	f3bf 8f6f 	isb	sy
1a001b2c:	f3bf 8f4f 	dsb	sy
1a001b30:	e7fe      	b.n	1a001b30 <xQueueGenericSend+0x70>
1a001b32:	2500      	movs	r5, #0
1a001b34:	e03b      	b.n	1a001bae <xQueueGenericSend+0xee>
1a001b36:	2500      	movs	r5, #0
1a001b38:	e039      	b.n	1a001bae <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001b3a:	4632      	mov	r2, r6
1a001b3c:	4639      	mov	r1, r7
1a001b3e:	4620      	mov	r0, r4
1a001b40:	f7ff fec2 	bl	1a0018c8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001b46:	b96b      	cbnz	r3, 1a001b64 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a001b48:	b138      	cbz	r0, 1a001b5a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a001b4a:	4b3c      	ldr	r3, [pc, #240]	; (1a001c3c <xQueueGenericSend+0x17c>)
1a001b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b50:	601a      	str	r2, [r3, #0]
1a001b52:	f3bf 8f4f 	dsb	sy
1a001b56:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001b5a:	f000 fa4d 	bl	1a001ff8 <vPortExitCritical>
				return pdPASS;
1a001b5e:	2001      	movs	r0, #1
}
1a001b60:	b005      	add	sp, #20
1a001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001b64:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b68:	f7ff fd16 	bl	1a001598 <xTaskRemoveFromEventList>
1a001b6c:	2800      	cmp	r0, #0
1a001b6e:	d0f4      	beq.n	1a001b5a <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a001b70:	4b32      	ldr	r3, [pc, #200]	; (1a001c3c <xQueueGenericSend+0x17c>)
1a001b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b76:	601a      	str	r2, [r3, #0]
1a001b78:	f3bf 8f4f 	dsb	sy
1a001b7c:	f3bf 8f6f 	isb	sy
1a001b80:	e7eb      	b.n	1a001b5a <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a001b82:	f000 fa39 	bl	1a001ff8 <vPortExitCritical>
					return errQUEUE_FULL;
1a001b86:	2000      	movs	r0, #0
1a001b88:	e7ea      	b.n	1a001b60 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001b8a:	a802      	add	r0, sp, #8
1a001b8c:	f7ff fd4a 	bl	1a001624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001b90:	2501      	movs	r5, #1
1a001b92:	e019      	b.n	1a001bc8 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a001b94:	2300      	movs	r3, #0
1a001b96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001b9a:	e021      	b.n	1a001be0 <xQueueGenericSend+0x120>
1a001b9c:	2300      	movs	r3, #0
1a001b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001ba2:	e023      	b.n	1a001bec <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a001ba4:	4620      	mov	r0, r4
1a001ba6:	f7ff fedc 	bl	1a001962 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001baa:	f7ff fb65 	bl	1a001278 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001bae:	f000 fa01 	bl	1a001fb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001bb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001bb6:	429a      	cmp	r2, r3
1a001bb8:	d3bf      	bcc.n	1a001b3a <xQueueGenericSend+0x7a>
1a001bba:	2e02      	cmp	r6, #2
1a001bbc:	d0bd      	beq.n	1a001b3a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001bbe:	9b01      	ldr	r3, [sp, #4]
1a001bc0:	2b00      	cmp	r3, #0
1a001bc2:	d0de      	beq.n	1a001b82 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a001bc4:	2d00      	cmp	r5, #0
1a001bc6:	d0e0      	beq.n	1a001b8a <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a001bc8:	f000 fa16 	bl	1a001ff8 <vPortExitCritical>
		vTaskSuspendAll();
1a001bcc:	f7ff faba 	bl	1a001144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001bd0:	f000 f9f0 	bl	1a001fb4 <vPortEnterCritical>
1a001bd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001bd8:	b25b      	sxtb	r3, r3
1a001bda:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001bde:	d0d9      	beq.n	1a001b94 <xQueueGenericSend+0xd4>
1a001be0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001be4:	b25b      	sxtb	r3, r3
1a001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001bea:	d0d7      	beq.n	1a001b9c <xQueueGenericSend+0xdc>
1a001bec:	f000 fa04 	bl	1a001ff8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001bf0:	a901      	add	r1, sp, #4
1a001bf2:	a802      	add	r0, sp, #8
1a001bf4:	f7ff fd22 	bl	1a00163c <xTaskCheckForTimeOut>
1a001bf8:	b9c8      	cbnz	r0, 1a001c2e <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001bfa:	4620      	mov	r0, r4
1a001bfc:	f7ff fe48 	bl	1a001890 <prvIsQueueFull>
1a001c00:	2800      	cmp	r0, #0
1a001c02:	d0cf      	beq.n	1a001ba4 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001c04:	9901      	ldr	r1, [sp, #4]
1a001c06:	f104 0010 	add.w	r0, r4, #16
1a001c0a:	f7ff fc91 	bl	1a001530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001c0e:	4620      	mov	r0, r4
1a001c10:	f7ff fea7 	bl	1a001962 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001c14:	f7ff fb30 	bl	1a001278 <xTaskResumeAll>
1a001c18:	2800      	cmp	r0, #0
1a001c1a:	d1c8      	bne.n	1a001bae <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a001c1c:	4b07      	ldr	r3, [pc, #28]	; (1a001c3c <xQueueGenericSend+0x17c>)
1a001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c22:	601a      	str	r2, [r3, #0]
1a001c24:	f3bf 8f4f 	dsb	sy
1a001c28:	f3bf 8f6f 	isb	sy
1a001c2c:	e7bf      	b.n	1a001bae <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a001c2e:	4620      	mov	r0, r4
1a001c30:	f7ff fe97 	bl	1a001962 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001c34:	f7ff fb20 	bl	1a001278 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001c38:	2000      	movs	r0, #0
1a001c3a:	e791      	b.n	1a001b60 <xQueueGenericSend+0xa0>
1a001c3c:	e000ed04 	.word	0xe000ed04

1a001c40 <xQueueGenericSendFromISR>:
{
1a001c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001c44:	b178      	cbz	r0, 1a001c66 <xQueueGenericSendFromISR+0x26>
1a001c46:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001c48:	b1b1      	cbz	r1, 1a001c78 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001c4a:	2b02      	cmp	r3, #2
1a001c4c:	d120      	bne.n	1a001c90 <xQueueGenericSendFromISR+0x50>
1a001c4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001c50:	2801      	cmp	r0, #1
1a001c52:	d01d      	beq.n	1a001c90 <xQueueGenericSendFromISR+0x50>
1a001c54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c58:	f383 8811 	msr	BASEPRI, r3
1a001c5c:	f3bf 8f6f 	isb	sy
1a001c60:	f3bf 8f4f 	dsb	sy
1a001c64:	e7fe      	b.n	1a001c64 <xQueueGenericSendFromISR+0x24>
1a001c66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c6a:	f383 8811 	msr	BASEPRI, r3
1a001c6e:	f3bf 8f6f 	isb	sy
1a001c72:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001c76:	e7fe      	b.n	1a001c76 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001c78:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001c7a:	2800      	cmp	r0, #0
1a001c7c:	d0e5      	beq.n	1a001c4a <xQueueGenericSendFromISR+0xa>
1a001c7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c82:	f383 8811 	msr	BASEPRI, r3
1a001c86:	f3bf 8f6f 	isb	sy
1a001c8a:	f3bf 8f4f 	dsb	sy
1a001c8e:	e7fe      	b.n	1a001c8e <xQueueGenericSendFromISR+0x4e>
1a001c90:	461f      	mov	r7, r3
1a001c92:	4690      	mov	r8, r2
1a001c94:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001c96:	f000 fab7 	bl	1a002208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001c9a:	f3ef 8611 	mrs	r6, BASEPRI
1a001c9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ca2:	f383 8811 	msr	BASEPRI, r3
1a001ca6:	f3bf 8f6f 	isb	sy
1a001caa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001cae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001cb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001cb2:	429a      	cmp	r2, r3
1a001cb4:	d306      	bcc.n	1a001cc4 <xQueueGenericSendFromISR+0x84>
1a001cb6:	2f02      	cmp	r7, #2
1a001cb8:	d004      	beq.n	1a001cc4 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a001cba:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001cbc:	f386 8811 	msr	BASEPRI, r6
}
1a001cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a001cc4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001cc8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001cca:	463a      	mov	r2, r7
1a001ccc:	4649      	mov	r1, r9
1a001cce:	4620      	mov	r0, r4
1a001cd0:	f7ff fdfa 	bl	1a0018c8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001cd4:	f1b5 3fff 	cmp.w	r5, #4294967295
1a001cd8:	d005      	beq.n	1a001ce6 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001cda:	1c6b      	adds	r3, r5, #1
1a001cdc:	b25b      	sxtb	r3, r3
1a001cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001ce2:	2001      	movs	r0, #1
1a001ce4:	e7ea      	b.n	1a001cbc <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001ce8:	b90b      	cbnz	r3, 1a001cee <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a001cea:	2001      	movs	r0, #1
1a001cec:	e7e6      	b.n	1a001cbc <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001cee:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001cf2:	f7ff fc51 	bl	1a001598 <xTaskRemoveFromEventList>
1a001cf6:	b130      	cbz	r0, 1a001d06 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a001cf8:	f1b8 0f00 	cmp.w	r8, #0
1a001cfc:	d005      	beq.n	1a001d0a <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001cfe:	2001      	movs	r0, #1
1a001d00:	f8c8 0000 	str.w	r0, [r8]
1a001d04:	e7da      	b.n	1a001cbc <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a001d06:	2001      	movs	r0, #1
1a001d08:	e7d8      	b.n	1a001cbc <xQueueGenericSendFromISR+0x7c>
1a001d0a:	2001      	movs	r0, #1
1a001d0c:	e7d6      	b.n	1a001cbc <xQueueGenericSendFromISR+0x7c>
1a001d0e:	Address 0x1a001d0e is out of bounds.


1a001d10 <xQueueReceive>:
{
1a001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001d12:	b085      	sub	sp, #20
1a001d14:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001d16:	b180      	cbz	r0, 1a001d3a <xQueueReceive+0x2a>
1a001d18:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001d1a:	b1b9      	cbz	r1, 1a001d4c <xQueueReceive+0x3c>
1a001d1c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001d1e:	f7ff fcd5 	bl	1a0016cc <xTaskGetSchedulerState>
1a001d22:	b9f8      	cbnz	r0, 1a001d64 <xQueueReceive+0x54>
1a001d24:	9b01      	ldr	r3, [sp, #4]
1a001d26:	b1fb      	cbz	r3, 1a001d68 <xQueueReceive+0x58>
	__asm volatile
1a001d28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d2c:	f383 8811 	msr	BASEPRI, r3
1a001d30:	f3bf 8f6f 	isb	sy
1a001d34:	f3bf 8f4f 	dsb	sy
1a001d38:	e7fe      	b.n	1a001d38 <xQueueReceive+0x28>
1a001d3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d3e:	f383 8811 	msr	BASEPRI, r3
1a001d42:	f3bf 8f6f 	isb	sy
1a001d46:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a001d4a:	e7fe      	b.n	1a001d4a <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001d4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001d4e:	2b00      	cmp	r3, #0
1a001d50:	d0e4      	beq.n	1a001d1c <xQueueReceive+0xc>
1a001d52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d56:	f383 8811 	msr	BASEPRI, r3
1a001d5a:	f3bf 8f6f 	isb	sy
1a001d5e:	f3bf 8f4f 	dsb	sy
1a001d62:	e7fe      	b.n	1a001d62 <xQueueReceive+0x52>
1a001d64:	2600      	movs	r6, #0
1a001d66:	e03e      	b.n	1a001de6 <xQueueReceive+0xd6>
1a001d68:	2600      	movs	r6, #0
1a001d6a:	e03c      	b.n	1a001de6 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001d6c:	4639      	mov	r1, r7
1a001d6e:	4620      	mov	r0, r4
1a001d70:	f7ff fde5 	bl	1a00193e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001d74:	3d01      	subs	r5, #1
1a001d76:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001d78:	6923      	ldr	r3, [r4, #16]
1a001d7a:	b923      	cbnz	r3, 1a001d86 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a001d7c:	f000 f93c 	bl	1a001ff8 <vPortExitCritical>
				return pdPASS;
1a001d80:	2001      	movs	r0, #1
}
1a001d82:	b005      	add	sp, #20
1a001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001d86:	f104 0010 	add.w	r0, r4, #16
1a001d8a:	f7ff fc05 	bl	1a001598 <xTaskRemoveFromEventList>
1a001d8e:	2800      	cmp	r0, #0
1a001d90:	d0f4      	beq.n	1a001d7c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a001d92:	4b35      	ldr	r3, [pc, #212]	; (1a001e68 <xQueueReceive+0x158>)
1a001d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d98:	601a      	str	r2, [r3, #0]
1a001d9a:	f3bf 8f4f 	dsb	sy
1a001d9e:	f3bf 8f6f 	isb	sy
1a001da2:	e7eb      	b.n	1a001d7c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a001da4:	f000 f928 	bl	1a001ff8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001da8:	2000      	movs	r0, #0
1a001daa:	e7ea      	b.n	1a001d82 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001dac:	a802      	add	r0, sp, #8
1a001dae:	f7ff fc39 	bl	1a001624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001db2:	2601      	movs	r6, #1
1a001db4:	e021      	b.n	1a001dfa <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a001db6:	2300      	movs	r3, #0
1a001db8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001dbc:	e029      	b.n	1a001e12 <xQueueReceive+0x102>
1a001dbe:	2300      	movs	r3, #0
1a001dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001dc4:	e02b      	b.n	1a001e1e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a001dc6:	4620      	mov	r0, r4
1a001dc8:	f7ff fdcb 	bl	1a001962 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001dcc:	f7ff fa54 	bl	1a001278 <xTaskResumeAll>
1a001dd0:	e009      	b.n	1a001de6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a001dd2:	4620      	mov	r0, r4
1a001dd4:	f7ff fdc5 	bl	1a001962 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001dd8:	f7ff fa4e 	bl	1a001278 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001ddc:	4620      	mov	r0, r4
1a001dde:	f7ff fd66 	bl	1a0018ae <prvIsQueueEmpty>
1a001de2:	2800      	cmp	r0, #0
1a001de4:	d13d      	bne.n	1a001e62 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001de6:	f000 f8e5 	bl	1a001fb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001dea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001dec:	2d00      	cmp	r5, #0
1a001dee:	d1bd      	bne.n	1a001d6c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001df0:	9b01      	ldr	r3, [sp, #4]
1a001df2:	2b00      	cmp	r3, #0
1a001df4:	d0d6      	beq.n	1a001da4 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001df6:	2e00      	cmp	r6, #0
1a001df8:	d0d8      	beq.n	1a001dac <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a001dfa:	f000 f8fd 	bl	1a001ff8 <vPortExitCritical>
		vTaskSuspendAll();
1a001dfe:	f7ff f9a1 	bl	1a001144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001e02:	f000 f8d7 	bl	1a001fb4 <vPortEnterCritical>
1a001e06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001e0a:	b25b      	sxtb	r3, r3
1a001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001e10:	d0d1      	beq.n	1a001db6 <xQueueReceive+0xa6>
1a001e12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001e16:	b25b      	sxtb	r3, r3
1a001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001e1c:	d0cf      	beq.n	1a001dbe <xQueueReceive+0xae>
1a001e1e:	f000 f8eb 	bl	1a001ff8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001e22:	a901      	add	r1, sp, #4
1a001e24:	a802      	add	r0, sp, #8
1a001e26:	f7ff fc09 	bl	1a00163c <xTaskCheckForTimeOut>
1a001e2a:	2800      	cmp	r0, #0
1a001e2c:	d1d1      	bne.n	1a001dd2 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001e2e:	4620      	mov	r0, r4
1a001e30:	f7ff fd3d 	bl	1a0018ae <prvIsQueueEmpty>
1a001e34:	2800      	cmp	r0, #0
1a001e36:	d0c6      	beq.n	1a001dc6 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001e38:	9901      	ldr	r1, [sp, #4]
1a001e3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001e3e:	f7ff fb77 	bl	1a001530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001e42:	4620      	mov	r0, r4
1a001e44:	f7ff fd8d 	bl	1a001962 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001e48:	f7ff fa16 	bl	1a001278 <xTaskResumeAll>
1a001e4c:	2800      	cmp	r0, #0
1a001e4e:	d1ca      	bne.n	1a001de6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001e50:	4b05      	ldr	r3, [pc, #20]	; (1a001e68 <xQueueReceive+0x158>)
1a001e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e56:	601a      	str	r2, [r3, #0]
1a001e58:	f3bf 8f4f 	dsb	sy
1a001e5c:	f3bf 8f6f 	isb	sy
1a001e60:	e7c1      	b.n	1a001de6 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a001e62:	2000      	movs	r0, #0
1a001e64:	e78d      	b.n	1a001d82 <xQueueReceive+0x72>
1a001e66:	bf00      	nop
1a001e68:	e000ed04 	.word	0xe000ed04

1a001e6c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001e6c:	2300      	movs	r3, #0
1a001e6e:	2b07      	cmp	r3, #7
1a001e70:	d80c      	bhi.n	1a001e8c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001e72:	4a07      	ldr	r2, [pc, #28]	; (1a001e90 <vQueueAddToRegistry+0x24>)
1a001e74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001e78:	b10a      	cbz	r2, 1a001e7e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001e7a:	3301      	adds	r3, #1
1a001e7c:	e7f7      	b.n	1a001e6e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001e7e:	4a04      	ldr	r2, [pc, #16]	; (1a001e90 <vQueueAddToRegistry+0x24>)
1a001e80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001e84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001e88:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001e8a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001e8c:	4770      	bx	lr
1a001e8e:	bf00      	nop
1a001e90:	10002280 	.word	0x10002280

1a001e94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001e94:	b570      	push	{r4, r5, r6, lr}
1a001e96:	4604      	mov	r4, r0
1a001e98:	460d      	mov	r5, r1
1a001e9a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001e9c:	f000 f88a 	bl	1a001fb4 <vPortEnterCritical>
1a001ea0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001ea4:	b25b      	sxtb	r3, r3
1a001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001eaa:	d00d      	beq.n	1a001ec8 <vQueueWaitForMessageRestricted+0x34>
1a001eac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001eb0:	b25b      	sxtb	r3, r3
1a001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001eb6:	d00b      	beq.n	1a001ed0 <vQueueWaitForMessageRestricted+0x3c>
1a001eb8:	f000 f89e 	bl	1a001ff8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001ebc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001ebe:	b15b      	cbz	r3, 1a001ed8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001ec0:	4620      	mov	r0, r4
1a001ec2:	f7ff fd4e 	bl	1a001962 <prvUnlockQueue>
	}
1a001ec6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001ec8:	2300      	movs	r3, #0
1a001eca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001ece:	e7ed      	b.n	1a001eac <vQueueWaitForMessageRestricted+0x18>
1a001ed0:	2300      	movs	r3, #0
1a001ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001ed6:	e7ef      	b.n	1a001eb8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001ed8:	4632      	mov	r2, r6
1a001eda:	4629      	mov	r1, r5
1a001edc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001ee0:	f7ff fb3e 	bl	1a001560 <vTaskPlaceOnEventListRestricted>
1a001ee4:	e7ec      	b.n	1a001ec0 <vQueueWaitForMessageRestricted+0x2c>
1a001ee6:	Address 0x1a001ee6 is out of bounds.


1a001ee8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001ee8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001eea:	2300      	movs	r3, #0
1a001eec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001eee:	4b0d      	ldr	r3, [pc, #52]	; (1a001f24 <prvTaskExitError+0x3c>)
1a001ef0:	681b      	ldr	r3, [r3, #0]
1a001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001ef6:	d008      	beq.n	1a001f0a <prvTaskExitError+0x22>
1a001ef8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001efc:	f383 8811 	msr	BASEPRI, r3
1a001f00:	f3bf 8f6f 	isb	sy
1a001f04:	f3bf 8f4f 	dsb	sy
1a001f08:	e7fe      	b.n	1a001f08 <prvTaskExitError+0x20>
1a001f0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f0e:	f383 8811 	msr	BASEPRI, r3
1a001f12:	f3bf 8f6f 	isb	sy
1a001f16:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001f1a:	9b01      	ldr	r3, [sp, #4]
1a001f1c:	2b00      	cmp	r3, #0
1a001f1e:	d0fc      	beq.n	1a001f1a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001f20:	b002      	add	sp, #8
1a001f22:	4770      	bx	lr
1a001f24:	10000000 	.word	0x10000000

1a001f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001f28:	4808      	ldr	r0, [pc, #32]	; (1a001f4c <prvPortStartFirstTask+0x24>)
1a001f2a:	6800      	ldr	r0, [r0, #0]
1a001f2c:	6800      	ldr	r0, [r0, #0]
1a001f2e:	f380 8808 	msr	MSP, r0
1a001f32:	f04f 0000 	mov.w	r0, #0
1a001f36:	f380 8814 	msr	CONTROL, r0
1a001f3a:	b662      	cpsie	i
1a001f3c:	b661      	cpsie	f
1a001f3e:	f3bf 8f4f 	dsb	sy
1a001f42:	f3bf 8f6f 	isb	sy
1a001f46:	df00      	svc	0
1a001f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a001f4a:	0000      	.short	0x0000
1a001f4c:	e000ed08 	.word	0xe000ed08

1a001f50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001f50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001f60 <vPortEnableVFP+0x10>
1a001f54:	6801      	ldr	r1, [r0, #0]
1a001f56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001f5a:	6001      	str	r1, [r0, #0]
1a001f5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a001f5e:	0000      	.short	0x0000
1a001f60:	e000ed88 	.word	0xe000ed88

1a001f64 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001f68:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001f6c:	f021 0101 	bic.w	r1, r1, #1
1a001f70:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001f74:	4b05      	ldr	r3, [pc, #20]	; (1a001f8c <pxPortInitialiseStack+0x28>)
1a001f76:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001f7a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001f7e:	f06f 0302 	mvn.w	r3, #2
1a001f82:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001f86:	3844      	subs	r0, #68	; 0x44
1a001f88:	4770      	bx	lr
1a001f8a:	bf00      	nop
1a001f8c:	1a001ee9 	.word	0x1a001ee9

1a001f90 <SVC_Handler>:
	__asm volatile (
1a001f90:	4b07      	ldr	r3, [pc, #28]	; (1a001fb0 <pxCurrentTCBConst2>)
1a001f92:	6819      	ldr	r1, [r3, #0]
1a001f94:	6808      	ldr	r0, [r1, #0]
1a001f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001f9a:	f380 8809 	msr	PSP, r0
1a001f9e:	f3bf 8f6f 	isb	sy
1a001fa2:	f04f 0000 	mov.w	r0, #0
1a001fa6:	f380 8811 	msr	BASEPRI, r0
1a001faa:	4770      	bx	lr
1a001fac:	f3af 8000 	nop.w

1a001fb0 <pxCurrentTCBConst2>:
1a001fb0:	10002130 	.word	0x10002130

1a001fb4 <vPortEnterCritical>:
1a001fb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fb8:	f383 8811 	msr	BASEPRI, r3
1a001fbc:	f3bf 8f6f 	isb	sy
1a001fc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001fc4:	4a0a      	ldr	r2, [pc, #40]	; (1a001ff0 <vPortEnterCritical+0x3c>)
1a001fc6:	6813      	ldr	r3, [r2, #0]
1a001fc8:	3301      	adds	r3, #1
1a001fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001fcc:	2b01      	cmp	r3, #1
1a001fce:	d000      	beq.n	1a001fd2 <vPortEnterCritical+0x1e>
}
1a001fd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001fd2:	4b08      	ldr	r3, [pc, #32]	; (1a001ff4 <vPortEnterCritical+0x40>)
1a001fd4:	681b      	ldr	r3, [r3, #0]
1a001fd6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001fda:	d0f9      	beq.n	1a001fd0 <vPortEnterCritical+0x1c>
1a001fdc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fe0:	f383 8811 	msr	BASEPRI, r3
1a001fe4:	f3bf 8f6f 	isb	sy
1a001fe8:	f3bf 8f4f 	dsb	sy
1a001fec:	e7fe      	b.n	1a001fec <vPortEnterCritical+0x38>
1a001fee:	bf00      	nop
1a001ff0:	10000000 	.word	0x10000000
1a001ff4:	e000ed04 	.word	0xe000ed04

1a001ff8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001ff8:	4b09      	ldr	r3, [pc, #36]	; (1a002020 <vPortExitCritical+0x28>)
1a001ffa:	681b      	ldr	r3, [r3, #0]
1a001ffc:	b943      	cbnz	r3, 1a002010 <vPortExitCritical+0x18>
1a001ffe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002002:	f383 8811 	msr	BASEPRI, r3
1a002006:	f3bf 8f6f 	isb	sy
1a00200a:	f3bf 8f4f 	dsb	sy
1a00200e:	e7fe      	b.n	1a00200e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002010:	3b01      	subs	r3, #1
1a002012:	4a03      	ldr	r2, [pc, #12]	; (1a002020 <vPortExitCritical+0x28>)
1a002014:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002016:	b90b      	cbnz	r3, 1a00201c <vPortExitCritical+0x24>
	__asm volatile
1a002018:	f383 8811 	msr	BASEPRI, r3
}
1a00201c:	4770      	bx	lr
1a00201e:	bf00      	nop
1a002020:	10000000 	.word	0x10000000
1a002024:	ffffffff 	.word	0xffffffff
1a002028:	ffffffff 	.word	0xffffffff
1a00202c:	ffffffff 	.word	0xffffffff

1a002030 <PendSV_Handler>:
	__asm volatile
1a002030:	f3ef 8009 	mrs	r0, PSP
1a002034:	f3bf 8f6f 	isb	sy
1a002038:	4b15      	ldr	r3, [pc, #84]	; (1a002090 <pxCurrentTCBConst>)
1a00203a:	681a      	ldr	r2, [r3, #0]
1a00203c:	f01e 0f10 	tst.w	lr, #16
1a002040:	bf08      	it	eq
1a002042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00204a:	6010      	str	r0, [r2, #0]
1a00204c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002050:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002054:	f380 8811 	msr	BASEPRI, r0
1a002058:	f3bf 8f4f 	dsb	sy
1a00205c:	f3bf 8f6f 	isb	sy
1a002060:	f7ff fa00 	bl	1a001464 <vTaskSwitchContext>
1a002064:	f04f 0000 	mov.w	r0, #0
1a002068:	f380 8811 	msr	BASEPRI, r0
1a00206c:	bc09      	pop	{r0, r3}
1a00206e:	6819      	ldr	r1, [r3, #0]
1a002070:	6808      	ldr	r0, [r1, #0]
1a002072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002076:	f01e 0f10 	tst.w	lr, #16
1a00207a:	bf08      	it	eq
1a00207c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002080:	f380 8809 	msr	PSP, r0
1a002084:	f3bf 8f6f 	isb	sy
1a002088:	4770      	bx	lr
1a00208a:	bf00      	nop
1a00208c:	f3af 8000 	nop.w

1a002090 <pxCurrentTCBConst>:
1a002090:	10002130 	.word	0x10002130

1a002094 <SysTick_Handler>:
{
1a002094:	b508      	push	{r3, lr}
	__asm volatile
1a002096:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00209a:	f383 8811 	msr	BASEPRI, r3
1a00209e:	f3bf 8f6f 	isb	sy
1a0020a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0020a6:	f7ff f85b 	bl	1a001160 <xTaskIncrementTick>
1a0020aa:	b118      	cbz	r0, 1a0020b4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0020ac:	4b03      	ldr	r3, [pc, #12]	; (1a0020bc <SysTick_Handler+0x28>)
1a0020ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020b2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0020b4:	2300      	movs	r3, #0
1a0020b6:	f383 8811 	msr	BASEPRI, r3
}
1a0020ba:	bd08      	pop	{r3, pc}
1a0020bc:	e000ed04 	.word	0xe000ed04

1a0020c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0020c0:	4a08      	ldr	r2, [pc, #32]	; (1a0020e4 <vPortSetupTimerInterrupt+0x24>)
1a0020c2:	2300      	movs	r3, #0
1a0020c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0020c6:	4908      	ldr	r1, [pc, #32]	; (1a0020e8 <vPortSetupTimerInterrupt+0x28>)
1a0020c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0020ca:	4b08      	ldr	r3, [pc, #32]	; (1a0020ec <vPortSetupTimerInterrupt+0x2c>)
1a0020cc:	681b      	ldr	r3, [r3, #0]
1a0020ce:	4908      	ldr	r1, [pc, #32]	; (1a0020f0 <vPortSetupTimerInterrupt+0x30>)
1a0020d0:	fba1 1303 	umull	r1, r3, r1, r3
1a0020d4:	099b      	lsrs	r3, r3, #6
1a0020d6:	3b01      	subs	r3, #1
1a0020d8:	4906      	ldr	r1, [pc, #24]	; (1a0020f4 <vPortSetupTimerInterrupt+0x34>)
1a0020da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0020dc:	2307      	movs	r3, #7
1a0020de:	6013      	str	r3, [r2, #0]
}
1a0020e0:	4770      	bx	lr
1a0020e2:	bf00      	nop
1a0020e4:	e000e010 	.word	0xe000e010
1a0020e8:	e000e018 	.word	0xe000e018
1a0020ec:	100022c0 	.word	0x100022c0
1a0020f0:	10624dd3 	.word	0x10624dd3
1a0020f4:	e000e014 	.word	0xe000e014

1a0020f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0020f8:	4b3a      	ldr	r3, [pc, #232]	; (1a0021e4 <xPortStartScheduler+0xec>)
1a0020fa:	681a      	ldr	r2, [r3, #0]
1a0020fc:	4b3a      	ldr	r3, [pc, #232]	; (1a0021e8 <xPortStartScheduler+0xf0>)
1a0020fe:	429a      	cmp	r2, r3
1a002100:	d029      	beq.n	1a002156 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002102:	4b38      	ldr	r3, [pc, #224]	; (1a0021e4 <xPortStartScheduler+0xec>)
1a002104:	681a      	ldr	r2, [r3, #0]
1a002106:	4b39      	ldr	r3, [pc, #228]	; (1a0021ec <xPortStartScheduler+0xf4>)
1a002108:	429a      	cmp	r2, r3
1a00210a:	d02d      	beq.n	1a002168 <xPortStartScheduler+0x70>
{
1a00210c:	b510      	push	{r4, lr}
1a00210e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002110:	4b37      	ldr	r3, [pc, #220]	; (1a0021f0 <xPortStartScheduler+0xf8>)
1a002112:	781a      	ldrb	r2, [r3, #0]
1a002114:	b2d2      	uxtb	r2, r2
1a002116:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002118:	22ff      	movs	r2, #255	; 0xff
1a00211a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00211c:	781b      	ldrb	r3, [r3, #0]
1a00211e:	b2db      	uxtb	r3, r3
1a002120:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002124:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002128:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00212c:	4a31      	ldr	r2, [pc, #196]	; (1a0021f4 <xPortStartScheduler+0xfc>)
1a00212e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002130:	4b31      	ldr	r3, [pc, #196]	; (1a0021f8 <xPortStartScheduler+0x100>)
1a002132:	2207      	movs	r2, #7
1a002134:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002136:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00213a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00213e:	d01c      	beq.n	1a00217a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002140:	4a2d      	ldr	r2, [pc, #180]	; (1a0021f8 <xPortStartScheduler+0x100>)
1a002142:	6813      	ldr	r3, [r2, #0]
1a002144:	3b01      	subs	r3, #1
1a002146:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002148:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00214c:	005b      	lsls	r3, r3, #1
1a00214e:	b2db      	uxtb	r3, r3
1a002150:	f88d 3003 	strb.w	r3, [sp, #3]
1a002154:	e7ef      	b.n	1a002136 <xPortStartScheduler+0x3e>
	__asm volatile
1a002156:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00215a:	f383 8811 	msr	BASEPRI, r3
1a00215e:	f3bf 8f6f 	isb	sy
1a002162:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002166:	e7fe      	b.n	1a002166 <xPortStartScheduler+0x6e>
1a002168:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00216c:	f383 8811 	msr	BASEPRI, r3
1a002170:	f3bf 8f6f 	isb	sy
1a002174:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002178:	e7fe      	b.n	1a002178 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00217a:	4b1f      	ldr	r3, [pc, #124]	; (1a0021f8 <xPortStartScheduler+0x100>)
1a00217c:	681b      	ldr	r3, [r3, #0]
1a00217e:	2b04      	cmp	r3, #4
1a002180:	d008      	beq.n	1a002194 <xPortStartScheduler+0x9c>
1a002182:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002186:	f383 8811 	msr	BASEPRI, r3
1a00218a:	f3bf 8f6f 	isb	sy
1a00218e:	f3bf 8f4f 	dsb	sy
1a002192:	e7fe      	b.n	1a002192 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002194:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00219a:	4a17      	ldr	r2, [pc, #92]	; (1a0021f8 <xPortStartScheduler+0x100>)
1a00219c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00219e:	9b01      	ldr	r3, [sp, #4]
1a0021a0:	b2db      	uxtb	r3, r3
1a0021a2:	4a13      	ldr	r2, [pc, #76]	; (1a0021f0 <xPortStartScheduler+0xf8>)
1a0021a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0021a6:	4b15      	ldr	r3, [pc, #84]	; (1a0021fc <xPortStartScheduler+0x104>)
1a0021a8:	681a      	ldr	r2, [r3, #0]
1a0021aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0021ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0021b0:	681a      	ldr	r2, [r3, #0]
1a0021b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0021b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0021b8:	f7ff ff82 	bl	1a0020c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0021bc:	2400      	movs	r4, #0
1a0021be:	4b10      	ldr	r3, [pc, #64]	; (1a002200 <xPortStartScheduler+0x108>)
1a0021c0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0021c2:	f7ff fec5 	bl	1a001f50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0021c6:	4a0f      	ldr	r2, [pc, #60]	; (1a002204 <xPortStartScheduler+0x10c>)
1a0021c8:	6813      	ldr	r3, [r2, #0]
1a0021ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0021ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0021d0:	f7ff feaa 	bl	1a001f28 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0021d4:	f7ff f946 	bl	1a001464 <vTaskSwitchContext>
	prvTaskExitError();
1a0021d8:	f7ff fe86 	bl	1a001ee8 <prvTaskExitError>
}
1a0021dc:	4620      	mov	r0, r4
1a0021de:	b002      	add	sp, #8
1a0021e0:	bd10      	pop	{r4, pc}
1a0021e2:	bf00      	nop
1a0021e4:	e000ed00 	.word	0xe000ed00
1a0021e8:	410fc271 	.word	0x410fc271
1a0021ec:	410fc270 	.word	0x410fc270
1a0021f0:	e000e400 	.word	0xe000e400
1a0021f4:	1000225c 	.word	0x1000225c
1a0021f8:	10002260 	.word	0x10002260
1a0021fc:	e000ed20 	.word	0xe000ed20
1a002200:	10000000 	.word	0x10000000
1a002204:	e000ef34 	.word	0xe000ef34

1a002208 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002208:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00220c:	2b0f      	cmp	r3, #15
1a00220e:	d90f      	bls.n	1a002230 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002210:	4a10      	ldr	r2, [pc, #64]	; (1a002254 <vPortValidateInterruptPriority+0x4c>)
1a002212:	5c9b      	ldrb	r3, [r3, r2]
1a002214:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002216:	4a10      	ldr	r2, [pc, #64]	; (1a002258 <vPortValidateInterruptPriority+0x50>)
1a002218:	7812      	ldrb	r2, [r2, #0]
1a00221a:	429a      	cmp	r2, r3
1a00221c:	d908      	bls.n	1a002230 <vPortValidateInterruptPriority+0x28>
1a00221e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002222:	f383 8811 	msr	BASEPRI, r3
1a002226:	f3bf 8f6f 	isb	sy
1a00222a:	f3bf 8f4f 	dsb	sy
1a00222e:	e7fe      	b.n	1a00222e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002230:	4b0a      	ldr	r3, [pc, #40]	; (1a00225c <vPortValidateInterruptPriority+0x54>)
1a002232:	681b      	ldr	r3, [r3, #0]
1a002234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002238:	4a09      	ldr	r2, [pc, #36]	; (1a002260 <vPortValidateInterruptPriority+0x58>)
1a00223a:	6812      	ldr	r2, [r2, #0]
1a00223c:	4293      	cmp	r3, r2
1a00223e:	d908      	bls.n	1a002252 <vPortValidateInterruptPriority+0x4a>
1a002240:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002244:	f383 8811 	msr	BASEPRI, r3
1a002248:	f3bf 8f6f 	isb	sy
1a00224c:	f3bf 8f4f 	dsb	sy
1a002250:	e7fe      	b.n	1a002250 <vPortValidateInterruptPriority+0x48>
	}
1a002252:	4770      	bx	lr
1a002254:	e000e3f0 	.word	0xe000e3f0
1a002258:	1000225c 	.word	0x1000225c
1a00225c:	e000ed0c 	.word	0xe000ed0c
1a002260:	10002260 	.word	0x10002260

1a002264 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002264:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002266:	4b05      	ldr	r3, [pc, #20]	; (1a00227c <DAC_IRQHandler+0x18>)
1a002268:	2201      	movs	r2, #1
1a00226a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00226e:	4b04      	ldr	r3, [pc, #16]	; (1a002280 <DAC_IRQHandler+0x1c>)
1a002270:	681b      	ldr	r3, [r3, #0]
1a002272:	b113      	cbz	r3, 1a00227a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002274:	4b02      	ldr	r3, [pc, #8]	; (1a002280 <DAC_IRQHandler+0x1c>)
1a002276:	681b      	ldr	r3, [r3, #0]
1a002278:	4798      	blx	r3
   }
}
1a00227a:	bd08      	pop	{r3, pc}
1a00227c:	e000e100 	.word	0xe000e100
1a002280:	10002264 	.word	0x10002264

1a002284 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002284:	2300      	movs	r3, #0
1a002286:	2b1c      	cmp	r3, #28
1a002288:	d812      	bhi.n	1a0022b0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00228a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00228c:	4a09      	ldr	r2, [pc, #36]	; (1a0022b4 <Board_SetupMuxing+0x30>)
1a00228e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002292:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002296:	784a      	ldrb	r2, [r1, #1]
1a002298:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00229a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00229e:	4906      	ldr	r1, [pc, #24]	; (1a0022b8 <Board_SetupMuxing+0x34>)
1a0022a0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0022a4:	3301      	adds	r3, #1
1a0022a6:	2b1c      	cmp	r3, #28
1a0022a8:	d9f0      	bls.n	1a00228c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0022aa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0022ae:	4770      	bx	lr
1a0022b0:	4770      	bx	lr
1a0022b2:	bf00      	nop
1a0022b4:	1a008638 	.word	0x1a008638
1a0022b8:	40086000 	.word	0x40086000

1a0022bc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0022bc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0022be:	4a17      	ldr	r2, [pc, #92]	; (1a00231c <Board_SetupClocking+0x60>)
1a0022c0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0022c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0022c8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0022cc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0022d0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0022d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0022d8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0022dc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0022e0:	2201      	movs	r2, #1
1a0022e2:	490f      	ldr	r1, [pc, #60]	; (1a002320 <Board_SetupClocking+0x64>)
1a0022e4:	2006      	movs	r0, #6
1a0022e6:	f000 fb1f 	bl	1a002928 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0022ea:	2400      	movs	r4, #0
1a0022ec:	b14c      	cbz	r4, 1a002302 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0022ee:	4b0b      	ldr	r3, [pc, #44]	; (1a00231c <Board_SetupClocking+0x60>)
1a0022f0:	685a      	ldr	r2, [r3, #4]
1a0022f2:	f022 020c 	bic.w	r2, r2, #12
1a0022f6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0022f8:	685a      	ldr	r2, [r3, #4]
1a0022fa:	f042 0203 	orr.w	r2, r2, #3
1a0022fe:	605a      	str	r2, [r3, #4]
}
1a002300:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002302:	4808      	ldr	r0, [pc, #32]	; (1a002324 <Board_SetupClocking+0x68>)
1a002304:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002308:	2301      	movs	r3, #1
1a00230a:	788a      	ldrb	r2, [r1, #2]
1a00230c:	7849      	ldrb	r1, [r1, #1]
1a00230e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002312:	f000 fde1 	bl	1a002ed8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002316:	3401      	adds	r4, #1
1a002318:	e7e8      	b.n	1a0022ec <Board_SetupClocking+0x30>
1a00231a:	bf00      	nop
1a00231c:	40043000 	.word	0x40043000
1a002320:	0c28cb00 	.word	0x0c28cb00
1a002324:	1a008634 	.word	0x1a008634

1a002328 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002328:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00232a:	f7ff ffab 	bl	1a002284 <Board_SetupMuxing>
    Board_SetupClocking();
1a00232e:	f7ff ffc5 	bl	1a0022bc <Board_SetupClocking>
}
1a002332:	bd08      	pop	{r3, pc}

1a002334 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002334:	2200      	movs	r2, #0
1a002336:	2a05      	cmp	r2, #5
1a002338:	d819      	bhi.n	1a00236e <Board_LED_Init+0x3a>
{
1a00233a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00233c:	490c      	ldr	r1, [pc, #48]	; (1a002370 <Board_LED_Init+0x3c>)
1a00233e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002342:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002346:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002348:	4b0a      	ldr	r3, [pc, #40]	; (1a002374 <Board_LED_Init+0x40>)
1a00234a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00234e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002352:	2001      	movs	r0, #1
1a002354:	40a0      	lsls	r0, r4
1a002356:	4301      	orrs	r1, r0
1a002358:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00235c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002360:	2100      	movs	r1, #0
1a002362:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002364:	3201      	adds	r2, #1
1a002366:	2a05      	cmp	r2, #5
1a002368:	d9e8      	bls.n	1a00233c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00236a:	bc70      	pop	{r4, r5, r6}
1a00236c:	4770      	bx	lr
1a00236e:	4770      	bx	lr
1a002370:	1a0086b8 	.word	0x1a0086b8
1a002374:	400f4000 	.word	0x400f4000

1a002378 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002378:	2300      	movs	r3, #0
1a00237a:	2b03      	cmp	r3, #3
1a00237c:	d816      	bhi.n	1a0023ac <Board_TEC_Init+0x34>
{
1a00237e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002380:	490b      	ldr	r1, [pc, #44]	; (1a0023b0 <Board_TEC_Init+0x38>)
1a002382:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002386:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00238a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00238c:	4c09      	ldr	r4, [pc, #36]	; (1a0023b4 <Board_TEC_Init+0x3c>)
1a00238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002392:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002396:	2001      	movs	r0, #1
1a002398:	40a8      	lsls	r0, r5
1a00239a:	ea21 0100 	bic.w	r1, r1, r0
1a00239e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0023a2:	3301      	adds	r3, #1
1a0023a4:	2b03      	cmp	r3, #3
1a0023a6:	d9eb      	bls.n	1a002380 <Board_TEC_Init+0x8>
   }
}
1a0023a8:	bc30      	pop	{r4, r5}
1a0023aa:	4770      	bx	lr
1a0023ac:	4770      	bx	lr
1a0023ae:	bf00      	nop
1a0023b0:	1a0086b0 	.word	0x1a0086b0
1a0023b4:	400f4000 	.word	0x400f4000

1a0023b8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0023b8:	2300      	movs	r3, #0
1a0023ba:	2b08      	cmp	r3, #8
1a0023bc:	d816      	bhi.n	1a0023ec <Board_GPIO_Init+0x34>
{
1a0023be:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0023c0:	490b      	ldr	r1, [pc, #44]	; (1a0023f0 <Board_GPIO_Init+0x38>)
1a0023c2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0023c6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0023ca:	784d      	ldrb	r5, [r1, #1]
1a0023cc:	4c09      	ldr	r4, [pc, #36]	; (1a0023f4 <Board_GPIO_Init+0x3c>)
1a0023ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0023d2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0023d6:	2001      	movs	r0, #1
1a0023d8:	40a8      	lsls	r0, r5
1a0023da:	ea21 0100 	bic.w	r1, r1, r0
1a0023de:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0023e2:	3301      	adds	r3, #1
1a0023e4:	2b08      	cmp	r3, #8
1a0023e6:	d9eb      	bls.n	1a0023c0 <Board_GPIO_Init+0x8>
   }
}
1a0023e8:	bc30      	pop	{r4, r5}
1a0023ea:	4770      	bx	lr
1a0023ec:	4770      	bx	lr
1a0023ee:	bf00      	nop
1a0023f0:	1a0086c4 	.word	0x1a0086c4
1a0023f4:	400f4000 	.word	0x400f4000

1a0023f8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0023f8:	b510      	push	{r4, lr}
1a0023fa:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0023fc:	4c08      	ldr	r4, [pc, #32]	; (1a002420 <Board_ADC_Init+0x28>)
1a0023fe:	4669      	mov	r1, sp
1a002400:	4620      	mov	r0, r4
1a002402:	f000 fa0d 	bl	1a002820 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002406:	4a07      	ldr	r2, [pc, #28]	; (1a002424 <Board_ADC_Init+0x2c>)
1a002408:	4669      	mov	r1, sp
1a00240a:	4620      	mov	r0, r4
1a00240c:	f000 fa57 	bl	1a0028be <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002410:	2200      	movs	r2, #0
1a002412:	4669      	mov	r1, sp
1a002414:	4620      	mov	r0, r4
1a002416:	f000 fa6b 	bl	1a0028f0 <Chip_ADC_SetResolution>
}
1a00241a:	b002      	add	sp, #8
1a00241c:	bd10      	pop	{r4, pc}
1a00241e:	bf00      	nop
1a002420:	400e3000 	.word	0x400e3000
1a002424:	00061a80 	.word	0x00061a80

1a002428 <Board_SPI_Init>:
{
1a002428:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00242a:	4c0b      	ldr	r4, [pc, #44]	; (1a002458 <Board_SPI_Init+0x30>)
1a00242c:	4620      	mov	r0, r4
1a00242e:	f000 f965 	bl	1a0026fc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002432:	6863      	ldr	r3, [r4, #4]
1a002434:	f023 0304 	bic.w	r3, r3, #4
1a002438:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00243a:	6823      	ldr	r3, [r4, #0]
1a00243c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002440:	f043 0307 	orr.w	r3, r3, #7
1a002444:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002446:	4905      	ldr	r1, [pc, #20]	; (1a00245c <Board_SPI_Init+0x34>)
1a002448:	4620      	mov	r0, r4
1a00244a:	f000 f938 	bl	1a0026be <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00244e:	6863      	ldr	r3, [r4, #4]
1a002450:	f043 0302 	orr.w	r3, r3, #2
1a002454:	6063      	str	r3, [r4, #4]
}
1a002456:	bd10      	pop	{r4, pc}
1a002458:	400c5000 	.word	0x400c5000
1a00245c:	000186a0 	.word	0x000186a0

1a002460 <Board_I2C_Init>:
{
1a002460:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002462:	2000      	movs	r0, #0
1a002464:	f000 f976 	bl	1a002754 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002468:	4b04      	ldr	r3, [pc, #16]	; (1a00247c <Board_I2C_Init+0x1c>)
1a00246a:	f640 0208 	movw	r2, #2056	; 0x808
1a00246e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002472:	4903      	ldr	r1, [pc, #12]	; (1a002480 <Board_I2C_Init+0x20>)
1a002474:	2000      	movs	r0, #0
1a002476:	f000 f97f 	bl	1a002778 <Chip_I2C_SetClockRate>
}
1a00247a:	bd08      	pop	{r3, pc}
1a00247c:	40086000 	.word	0x40086000
1a002480:	000f4240 	.word	0x000f4240

1a002484 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002484:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002486:	4c07      	ldr	r4, [pc, #28]	; (1a0024a4 <Board_Debug_Init+0x20>)
1a002488:	4620      	mov	r0, r4
1a00248a:	f000 fddf 	bl	1a00304c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00248e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002492:	4620      	mov	r0, r4
1a002494:	f000 fe24 	bl	1a0030e0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002498:	2303      	movs	r3, #3
1a00249a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00249c:	2301      	movs	r3, #1
1a00249e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0024a0:	bd10      	pop	{r4, pc}
1a0024a2:	bf00      	nop
1a0024a4:	400c1000 	.word	0x400c1000

1a0024a8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0024a8:	4b03      	ldr	r3, [pc, #12]	; (1a0024b8 <Board_UARTPutChar+0x10>)
1a0024aa:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0024ac:	f013 0f20 	tst.w	r3, #32
1a0024b0:	d0fa      	beq.n	1a0024a8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0024b2:	4b01      	ldr	r3, [pc, #4]	; (1a0024b8 <Board_UARTPutChar+0x10>)
1a0024b4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0024b6:	4770      	bx	lr
1a0024b8:	400c1000 	.word	0x400c1000

1a0024bc <Board_UARTGetChar>:
	return pUART->LSR;
1a0024bc:	4b05      	ldr	r3, [pc, #20]	; (1a0024d4 <Board_UARTGetChar+0x18>)
1a0024be:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0024c0:	f013 0f01 	tst.w	r3, #1
1a0024c4:	d003      	beq.n	1a0024ce <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0024c6:	4b03      	ldr	r3, [pc, #12]	; (1a0024d4 <Board_UARTGetChar+0x18>)
1a0024c8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0024ca:	b2c0      	uxtb	r0, r0
1a0024cc:	4770      	bx	lr
   }
   return EOF;
1a0024ce:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0024d2:	4770      	bx	lr
1a0024d4:	400c1000 	.word	0x400c1000

1a0024d8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0024d8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0024da:	f7ff ffd3 	bl	1a002484 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0024de:	4809      	ldr	r0, [pc, #36]	; (1a002504 <Board_Init+0x2c>)
1a0024e0:	f000 f966 	bl	1a0027b0 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0024e4:	f7ff ff68 	bl	1a0023b8 <Board_GPIO_Init>
   Board_ADC_Init();
1a0024e8:	f7ff ff86 	bl	1a0023f8 <Board_ADC_Init>
   Board_SPI_Init();
1a0024ec:	f7ff ff9c 	bl	1a002428 <Board_SPI_Init>
   Board_I2C_Init();
1a0024f0:	f7ff ffb6 	bl	1a002460 <Board_I2C_Init>

   Board_LED_Init();
1a0024f4:	f7ff ff1e 	bl	1a002334 <Board_LED_Init>
   Board_TEC_Init();
1a0024f8:	f7ff ff3e 	bl	1a002378 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0024fc:	f000 fac0 	bl	1a002a80 <SystemCoreClockUpdate>
}
1a002500:	bd08      	pop	{r3, pc}
1a002502:	bf00      	nop
1a002504:	400f4000 	.word	0x400f4000

1a002508 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002508:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00250a:	b2c0      	uxtb	r0, r0
1a00250c:	f7ff ffcc 	bl	1a0024a8 <Board_UARTPutChar>
}
1a002510:	bd08      	pop	{r3, pc}

1a002512 <__stdio_getchar>:

int __stdio_getchar()
{
1a002512:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002514:	f7ff ffd2 	bl	1a0024bc <Board_UARTGetChar>
}
1a002518:	bd08      	pop	{r3, pc}

1a00251a <__stdio_init>:

void __stdio_init()
{
1a00251a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00251c:	f7ff ffb2 	bl	1a002484 <Board_Debug_Init>
1a002520:	bd08      	pop	{r3, pc}

1a002522 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a002522:	680b      	ldr	r3, [r1, #0]
1a002524:	b133      	cbz	r3, 1a002534 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a002526:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a002528:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a00252a:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a00252c:	684b      	ldr	r3, [r1, #4]
1a00252e:	3302      	adds	r3, #2
1a002530:	604b      	str	r3, [r1, #4]
}
1a002532:	4770      	bx	lr
1a002534:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002538:	6083      	str	r3, [r0, #8]
1a00253a:	e7f7      	b.n	1a00252c <SSP_Write2BFifo+0xa>

1a00253c <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a00253c:	680b      	ldr	r3, [r1, #0]
1a00253e:	b133      	cbz	r3, 1a00254e <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a002540:	684a      	ldr	r2, [r1, #4]
1a002542:	5c9b      	ldrb	r3, [r3, r2]
1a002544:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a002546:	684b      	ldr	r3, [r1, #4]
1a002548:	3301      	adds	r3, #1
1a00254a:	604b      	str	r3, [r1, #4]
}
1a00254c:	4770      	bx	lr
1a00254e:	23ff      	movs	r3, #255	; 0xff
1a002550:	6083      	str	r3, [r0, #8]
1a002552:	e7f8      	b.n	1a002546 <SSP_Write1BFifo+0xa>

1a002554 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a002554:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002556:	f013 0f04 	tst.w	r3, #4
1a00255a:	d01b      	beq.n	1a002594 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00255c:	68ca      	ldr	r2, [r1, #12]
1a00255e:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002560:	429a      	cmp	r2, r3
1a002562:	d216      	bcs.n	1a002592 <SSP_Read2BFifo+0x3e>
{
1a002564:	b410      	push	{r4}
1a002566:	e00a      	b.n	1a00257e <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a002568:	68cb      	ldr	r3, [r1, #12]
1a00256a:	3302      	adds	r3, #2
1a00256c:	60cb      	str	r3, [r1, #12]
1a00256e:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002570:	f013 0f04 	tst.w	r3, #4
1a002574:	d00a      	beq.n	1a00258c <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002576:	68ca      	ldr	r2, [r1, #12]
1a002578:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00257a:	429a      	cmp	r2, r3
1a00257c:	d206      	bcs.n	1a00258c <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00257e:	6883      	ldr	r3, [r0, #8]
1a002580:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a002582:	688c      	ldr	r4, [r1, #8]
1a002584:	2c00      	cmp	r4, #0
1a002586:	d0ef      	beq.n	1a002568 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a002588:	52a3      	strh	r3, [r4, r2]
1a00258a:	e7ed      	b.n	1a002568 <SSP_Read2BFifo+0x14>
	}
}
1a00258c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002590:	4770      	bx	lr
1a002592:	4770      	bx	lr
1a002594:	4770      	bx	lr

1a002596 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a002596:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002598:	f013 0f04 	tst.w	r3, #4
1a00259c:	d01a      	beq.n	1a0025d4 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00259e:	68cb      	ldr	r3, [r1, #12]
1a0025a0:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0025a2:	4293      	cmp	r3, r2
1a0025a4:	d215      	bcs.n	1a0025d2 <SSP_Read1BFifo+0x3c>
{
1a0025a6:	b410      	push	{r4}
1a0025a8:	e00a      	b.n	1a0025c0 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a0025aa:	68cb      	ldr	r3, [r1, #12]
1a0025ac:	3301      	adds	r3, #1
1a0025ae:	60cb      	str	r3, [r1, #12]
1a0025b0:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0025b2:	f013 0f04 	tst.w	r3, #4
1a0025b6:	d009      	beq.n	1a0025cc <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0025b8:	68cb      	ldr	r3, [r1, #12]
1a0025ba:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0025bc:	4293      	cmp	r3, r2
1a0025be:	d205      	bcs.n	1a0025cc <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0025c0:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a0025c2:	688a      	ldr	r2, [r1, #8]
1a0025c4:	2a00      	cmp	r2, #0
1a0025c6:	d0f0      	beq.n	1a0025aa <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0025c8:	54d4      	strb	r4, [r2, r3]
1a0025ca:	e7ee      	b.n	1a0025aa <SSP_Read1BFifo+0x14>
	}
}
1a0025cc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025d0:	4770      	bx	lr
1a0025d2:	4770      	bx	lr
1a0025d4:	4770      	bx	lr
1a0025d6:	Address 0x1a0025d6 is out of bounds.


1a0025d8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0025d8:	4b03      	ldr	r3, [pc, #12]	; (1a0025e8 <Chip_SSP_GetClockIndex+0x10>)
1a0025da:	4298      	cmp	r0, r3
1a0025dc:	d001      	beq.n	1a0025e2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0025de:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0025e0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0025e2:	20a5      	movs	r0, #165	; 0xa5
1a0025e4:	4770      	bx	lr
1a0025e6:	bf00      	nop
1a0025e8:	400c5000 	.word	0x400c5000

1a0025ec <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0025ec:	4b04      	ldr	r3, [pc, #16]	; (1a002600 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0025ee:	4298      	cmp	r0, r3
1a0025f0:	d002      	beq.n	1a0025f8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0025f2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0025f6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0025f8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0025fc:	4770      	bx	lr
1a0025fe:	bf00      	nop
1a002600:	400c5000 	.word	0x400c5000

1a002604 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002604:	6803      	ldr	r3, [r0, #0]
1a002606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00260a:	0209      	lsls	r1, r1, #8
1a00260c:	b289      	uxth	r1, r1
1a00260e:	4319      	orrs	r1, r3
1a002610:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002612:	6102      	str	r2, [r0, #16]
}
1a002614:	4770      	bx	lr

1a002616 <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a002616:	b538      	push	{r3, r4, r5, lr}
1a002618:	4604      	mov	r4, r0
1a00261a:	460d      	mov	r5, r1
	return (pSSP->SR & Stat) ? SET : RESET;
1a00261c:	68e3      	ldr	r3, [r4, #12]
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a00261e:	f013 0f04 	tst.w	r3, #4
1a002622:	d001      	beq.n	1a002628 <Chip_SSP_RWFrames_Blocking+0x12>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002624:	68a3      	ldr	r3, [r4, #8]
1a002626:	e7f9      	b.n	1a00261c <Chip_SSP_RWFrames_Blocking+0x6>
	pSSP->ICR = IntClear;
1a002628:	2303      	movs	r3, #3
1a00262a:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a00262c:	6823      	ldr	r3, [r4, #0]
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a00262e:	f013 0f08 	tst.w	r3, #8
1a002632:	d108      	bne.n	1a002646 <Chip_SSP_RWFrames_Blocking+0x30>
1a002634:	e022      	b.n	1a00267c <Chip_SSP_RWFrames_Blocking+0x66>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a002636:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a002638:	f013 0f01 	tst.w	r3, #1
1a00263c:	d139      	bne.n	1a0026b2 <Chip_SSP_RWFrames_Blocking+0x9c>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a00263e:	4629      	mov	r1, r5
1a002640:	4620      	mov	r0, r4
1a002642:	f7ff ff87 	bl	1a002554 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a002646:	68ea      	ldr	r2, [r5, #12]
1a002648:	692b      	ldr	r3, [r5, #16]
1a00264a:	429a      	cmp	r2, r3
1a00264c:	d302      	bcc.n	1a002654 <Chip_SSP_RWFrames_Blocking+0x3e>
1a00264e:	686a      	ldr	r2, [r5, #4]
1a002650:	4293      	cmp	r3, r2
1a002652:	d926      	bls.n	1a0026a2 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a002654:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a002656:	f012 0f02 	tst.w	r2, #2
1a00265a:	d0ec      	beq.n	1a002636 <Chip_SSP_RWFrames_Blocking+0x20>
1a00265c:	686a      	ldr	r2, [r5, #4]
1a00265e:	429a      	cmp	r2, r3
1a002660:	d2e9      	bcs.n	1a002636 <Chip_SSP_RWFrames_Blocking+0x20>
				SSP_Write2BFifo(pSSP, xf_setup);
1a002662:	4629      	mov	r1, r5
1a002664:	4620      	mov	r0, r4
1a002666:	f7ff ff5c 	bl	1a002522 <SSP_Write2BFifo>
1a00266a:	e7e4      	b.n	1a002636 <Chip_SSP_RWFrames_Blocking+0x20>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00266c:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00266e:	f013 0f01 	tst.w	r3, #1
1a002672:	d120      	bne.n	1a0026b6 <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a002674:	4629      	mov	r1, r5
1a002676:	4620      	mov	r0, r4
1a002678:	f7ff ff8d 	bl	1a002596 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a00267c:	68ea      	ldr	r2, [r5, #12]
1a00267e:	692b      	ldr	r3, [r5, #16]
1a002680:	429a      	cmp	r2, r3
1a002682:	d302      	bcc.n	1a00268a <Chip_SSP_RWFrames_Blocking+0x74>
1a002684:	686a      	ldr	r2, [r5, #4]
1a002686:	4293      	cmp	r3, r2
1a002688:	d90b      	bls.n	1a0026a2 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a00268a:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00268c:	f012 0f02 	tst.w	r2, #2
1a002690:	d0ec      	beq.n	1a00266c <Chip_SSP_RWFrames_Blocking+0x56>
1a002692:	686a      	ldr	r2, [r5, #4]
1a002694:	429a      	cmp	r2, r3
1a002696:	d2e9      	bcs.n	1a00266c <Chip_SSP_RWFrames_Blocking+0x56>
				SSP_Write1BFifo(pSSP, xf_setup);
1a002698:	4629      	mov	r1, r5
1a00269a:	4620      	mov	r0, r4
1a00269c:	f7ff ff4e 	bl	1a00253c <SSP_Write1BFifo>
1a0026a0:	e7e4      	b.n	1a00266c <Chip_SSP_RWFrames_Blocking+0x56>
		}
	}
	if (xf_setup->tx_data) {
1a0026a2:	682b      	ldr	r3, [r5, #0]
1a0026a4:	b10b      	cbz	r3, 1a0026aa <Chip_SSP_RWFrames_Blocking+0x94>
		return xf_setup->tx_cnt;
1a0026a6:	6868      	ldr	r0, [r5, #4]
1a0026a8:	e004      	b.n	1a0026b4 <Chip_SSP_RWFrames_Blocking+0x9e>
	}
	else if (xf_setup->rx_data) {
1a0026aa:	68ab      	ldr	r3, [r5, #8]
1a0026ac:	b12b      	cbz	r3, 1a0026ba <Chip_SSP_RWFrames_Blocking+0xa4>
		return xf_setup->rx_cnt;
1a0026ae:	68e8      	ldr	r0, [r5, #12]
1a0026b0:	e000      	b.n	1a0026b4 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
1a0026b2:	2000      	movs	r0, #0
	}

	return 0;
}
1a0026b4:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a0026b6:	2000      	movs	r0, #0
1a0026b8:	e7fc      	b.n	1a0026b4 <Chip_SSP_RWFrames_Blocking+0x9e>
	return 0;
1a0026ba:	2000      	movs	r0, #0
1a0026bc:	e7fa      	b.n	1a0026b4 <Chip_SSP_RWFrames_Blocking+0x9e>

1a0026be <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0026be:	b570      	push	{r4, r5, r6, lr}
1a0026c0:	4606      	mov	r6, r0
1a0026c2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0026c4:	f7ff ff92 	bl	1a0025ec <Chip_SSP_GetPeriphClockIndex>
1a0026c8:	f000 fc84 	bl	1a002fd4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0026cc:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0026ce:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0026d2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0026d4:	e000      	b.n	1a0026d8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0026d6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0026d8:	42ab      	cmp	r3, r5
1a0026da:	d90b      	bls.n	1a0026f4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0026dc:	1c4c      	adds	r4, r1, #1
1a0026de:	fb02 f304 	mul.w	r3, r2, r4
1a0026e2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0026e6:	429d      	cmp	r5, r3
1a0026e8:	d2f6      	bcs.n	1a0026d8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0026ea:	2cff      	cmp	r4, #255	; 0xff
1a0026ec:	d9f3      	bls.n	1a0026d6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0026ee:	3202      	adds	r2, #2
				cr0_div = 0;
1a0026f0:	2100      	movs	r1, #0
1a0026f2:	e7f1      	b.n	1a0026d8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0026f4:	4630      	mov	r0, r6
1a0026f6:	f7ff ff85 	bl	1a002604 <Chip_SSP_SetClockRate>
}
1a0026fa:	bd70      	pop	{r4, r5, r6, pc}

1a0026fc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0026fc:	b510      	push	{r4, lr}
1a0026fe:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002700:	f7ff ff6a 	bl	1a0025d8 <Chip_SSP_GetClockIndex>
1a002704:	f000 fc4c 	bl	1a002fa0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002708:	4620      	mov	r0, r4
1a00270a:	f7ff ff6f 	bl	1a0025ec <Chip_SSP_GetPeriphClockIndex>
1a00270e:	f000 fc47 	bl	1a002fa0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002712:	6863      	ldr	r3, [r4, #4]
1a002714:	f023 0304 	bic.w	r3, r3, #4
1a002718:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00271a:	6823      	ldr	r3, [r4, #0]
1a00271c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002720:	f043 0307 	orr.w	r3, r3, #7
1a002724:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002726:	4902      	ldr	r1, [pc, #8]	; (1a002730 <Chip_SSP_Init+0x34>)
1a002728:	4620      	mov	r0, r4
1a00272a:	f7ff ffc8 	bl	1a0026be <Chip_SSP_SetBitRate>
}
1a00272e:	bd10      	pop	{r4, pc}
1a002730:	000186a0 	.word	0x000186a0

1a002734 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002734:	2901      	cmp	r1, #1
1a002736:	d109      	bne.n	1a00274c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002738:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00273c:	0082      	lsls	r2, r0, #2
1a00273e:	4b04      	ldr	r3, [pc, #16]	; (1a002750 <Chip_I2C_EventHandler+0x1c>)
1a002740:	4413      	add	r3, r2
1a002742:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002744:	7d13      	ldrb	r3, [r2, #20]
1a002746:	b2db      	uxtb	r3, r3
1a002748:	2b04      	cmp	r3, #4
1a00274a:	d0fb      	beq.n	1a002744 <Chip_I2C_EventHandler+0x10>
}
1a00274c:	4770      	bx	lr
1a00274e:	bf00      	nop
1a002750:	10000004 	.word	0x10000004

1a002754 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002754:	b570      	push	{r4, r5, r6, lr}
1a002756:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002758:	4e06      	ldr	r6, [pc, #24]	; (1a002774 <Chip_I2C_Init+0x20>)
1a00275a:	00c4      	lsls	r4, r0, #3
1a00275c:	1a22      	subs	r2, r4, r0
1a00275e:	0093      	lsls	r3, r2, #2
1a002760:	4433      	add	r3, r6
1a002762:	8898      	ldrh	r0, [r3, #4]
1a002764:	f000 fc1c 	bl	1a002fa0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002768:	1b64      	subs	r4, r4, r5
1a00276a:	00a3      	lsls	r3, r4, #2
1a00276c:	58f3      	ldr	r3, [r6, r3]
1a00276e:	226c      	movs	r2, #108	; 0x6c
1a002770:	619a      	str	r2, [r3, #24]
}
1a002772:	bd70      	pop	{r4, r5, r6, pc}
1a002774:	10000004 	.word	0x10000004

1a002778 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00277c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00277e:	4e0b      	ldr	r6, [pc, #44]	; (1a0027ac <Chip_I2C_SetClockRate+0x34>)
1a002780:	00c5      	lsls	r5, r0, #3
1a002782:	1a2b      	subs	r3, r5, r0
1a002784:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002788:	eb06 0308 	add.w	r3, r6, r8
1a00278c:	8898      	ldrh	r0, [r3, #4]
1a00278e:	f000 fc21 	bl	1a002fd4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002792:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002796:	f856 3008 	ldr.w	r3, [r6, r8]
1a00279a:	0842      	lsrs	r2, r0, #1
1a00279c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00279e:	f856 3008 	ldr.w	r3, [r6, r8]
1a0027a2:	691a      	ldr	r2, [r3, #16]
1a0027a4:	1a80      	subs	r0, r0, r2
1a0027a6:	6158      	str	r0, [r3, #20]
}
1a0027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0027ac:	10000004 	.word	0x10000004

1a0027b0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0027b0:	4770      	bx	lr
1a0027b2:	Address 0x1a0027b2 is out of bounds.


1a0027b4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0027b4:	4b03      	ldr	r3, [pc, #12]	; (1a0027c4 <Chip_ADC_GetClockIndex+0x10>)
1a0027b6:	4298      	cmp	r0, r3
1a0027b8:	d001      	beq.n	1a0027be <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0027ba:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0027bc:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0027be:	2004      	movs	r0, #4
1a0027c0:	4770      	bx	lr
1a0027c2:	bf00      	nop
1a0027c4:	400e4000 	.word	0x400e4000

1a0027c8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0027c8:	b570      	push	{r4, r5, r6, lr}
1a0027ca:	460d      	mov	r5, r1
1a0027cc:	4614      	mov	r4, r2
1a0027ce:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0027d0:	f7ff fff0 	bl	1a0027b4 <Chip_ADC_GetClockIndex>
1a0027d4:	f000 fbfe 	bl	1a002fd4 <Chip_Clock_GetRate>
	if (burstMode) {
1a0027d8:	b155      	cbz	r5, 1a0027f0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0027da:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0027de:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0027e2:	0064      	lsls	r4, r4, #1
1a0027e4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0027e8:	b2c0      	uxtb	r0, r0
1a0027ea:	3801      	subs	r0, #1
	return div;
}
1a0027ec:	b2c0      	uxtb	r0, r0
1a0027ee:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0027f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0027f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0027f8:	e7f1      	b.n	1a0027de <getClkDiv+0x16>

1a0027fa <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a0027fa:	6803      	ldr	r3, [r0, #0]
1a0027fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a002800:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a002804:	6001      	str	r1, [r0, #0]
}
1a002806:	4770      	bx	lr

1a002808 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a002808:	3104      	adds	r1, #4
1a00280a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a00280e:	2b00      	cmp	r3, #0
1a002810:	da04      	bge.n	1a00281c <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a002812:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a002816:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a002818:	2001      	movs	r0, #1
1a00281a:	4770      	bx	lr
		return ERROR;
1a00281c:	2000      	movs	r0, #0
}
1a00281e:	4770      	bx	lr

1a002820 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002820:	b538      	push	{r3, r4, r5, lr}
1a002822:	4605      	mov	r5, r0
1a002824:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002826:	f7ff ffc5 	bl	1a0027b4 <Chip_ADC_GetClockIndex>
1a00282a:	2301      	movs	r3, #1
1a00282c:	461a      	mov	r2, r3
1a00282e:	4619      	mov	r1, r3
1a002830:	f000 fb98 	bl	1a002f64 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002834:	2100      	movs	r1, #0
1a002836:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002838:	4a08      	ldr	r2, [pc, #32]	; (1a00285c <Chip_ADC_Init+0x3c>)
1a00283a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00283c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00283e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002840:	230b      	movs	r3, #11
1a002842:	4628      	mov	r0, r5
1a002844:	f7ff ffc0 	bl	1a0027c8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002848:	0200      	lsls	r0, r0, #8
1a00284a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00284e:	7920      	ldrb	r0, [r4, #4]
1a002850:	0440      	lsls	r0, r0, #17
1a002852:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002856:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002858:	6028      	str	r0, [r5, #0]
}
1a00285a:	bd38      	pop	{r3, r4, r5, pc}
1a00285c:	00061a80 	.word	0x00061a80

1a002860 <Chip_ADC_ReadValue>:
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a002860:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a002862:	f7ff ffd1 	bl	1a002808 <readAdcVal>
}
1a002866:	bd08      	pop	{r3, pc}

1a002868 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a002868:	2a01      	cmp	r2, #1
1a00286a:	d00a      	beq.n	1a002882 <Chip_ADC_ReadStatus+0x1a>
1a00286c:	b11a      	cbz	r2, 1a002876 <Chip_ADC_ReadStatus+0xe>
1a00286e:	2a02      	cmp	r2, #2
1a002870:	d00f      	beq.n	1a002892 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a002872:	2000      	movs	r0, #0
1a002874:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002876:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002878:	40c8      	lsrs	r0, r1
1a00287a:	f000 0001 	and.w	r0, r0, #1
1a00287e:	b2c0      	uxtb	r0, r0
1a002880:	4770      	bx	lr
		channel += 8;
1a002882:	3108      	adds	r1, #8
1a002884:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002886:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002888:	40c8      	lsrs	r0, r1
1a00288a:	f000 0001 	and.w	r0, r0, #1
1a00288e:	b2c0      	uxtb	r0, r0
1a002890:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a002892:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a002894:	0c1b      	lsrs	r3, r3, #16
1a002896:	bf14      	ite	ne
1a002898:	2001      	movne	r0, #1
1a00289a:	2000      	moveq	r0, #0
}
1a00289c:	4770      	bx	lr

1a00289e <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a00289e:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0028a0:	2901      	cmp	r1, #1
1a0028a2:	d904      	bls.n	1a0028ae <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a0028a4:	b132      	cbz	r2, 1a0028b4 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a0028a6:	6803      	ldr	r3, [r0, #0]
1a0028a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a0028ac:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a0028ae:	f7ff ffa4 	bl	1a0027fa <setStartMode>
}
1a0028b2:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a0028b4:	6803      	ldr	r3, [r0, #0]
1a0028b6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a0028ba:	6003      	str	r3, [r0, #0]
1a0028bc:	e7f7      	b.n	1a0028ae <Chip_ADC_SetStartMode+0x10>

1a0028be <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0028be:	b570      	push	{r4, r5, r6, lr}
1a0028c0:	4605      	mov	r5, r0
1a0028c2:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0028c4:	6804      	ldr	r4, [r0, #0]
1a0028c6:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0028ca:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0028ce:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0028d0:	790b      	ldrb	r3, [r1, #4]
1a0028d2:	f1c3 030b 	rsb	r3, r3, #11
1a0028d6:	b2db      	uxtb	r3, r3
1a0028d8:	7949      	ldrb	r1, [r1, #5]
1a0028da:	f7ff ff75 	bl	1a0027c8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0028de:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0028e2:	7933      	ldrb	r3, [r6, #4]
1a0028e4:	045b      	lsls	r3, r3, #17
1a0028e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0028ea:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0028ec:	602b      	str	r3, [r5, #0]
}
1a0028ee:	bd70      	pop	{r4, r5, r6, pc}

1a0028f0 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0028f0:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0028f2:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0028f4:	680a      	ldr	r2, [r1, #0]
1a0028f6:	f7ff ffe2 	bl	1a0028be <Chip_ADC_SetSampleRate>
}
1a0028fa:	bd08      	pop	{r3, pc}

1a0028fc <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0028fc:	2a01      	cmp	r2, #1
1a0028fe:	d00a      	beq.n	1a002916 <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a002900:	6802      	ldr	r2, [r0, #0]
1a002902:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a002906:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a002908:	6803      	ldr	r3, [r0, #0]
1a00290a:	2201      	movs	r2, #1
1a00290c:	408a      	lsls	r2, r1
1a00290e:	ea23 0302 	bic.w	r3, r3, r2
1a002912:	6003      	str	r3, [r0, #0]
1a002914:	4770      	bx	lr
{
1a002916:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a002918:	6804      	ldr	r4, [r0, #0]
1a00291a:	408a      	lsls	r2, r1
1a00291c:	4314      	orrs	r4, r2
1a00291e:	6004      	str	r4, [r0, #0]
	}
}
1a002920:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002924:	4770      	bx	lr
1a002926:	Address 0x1a002926 is out of bounds.


1a002928 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002928:	b570      	push	{r4, r5, r6, lr}
1a00292a:	b08a      	sub	sp, #40	; 0x28
1a00292c:	4605      	mov	r5, r0
1a00292e:	460e      	mov	r6, r1
1a002930:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002932:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002936:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002938:	2806      	cmp	r0, #6
1a00293a:	d018      	beq.n	1a00296e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00293c:	2300      	movs	r3, #0
1a00293e:	2201      	movs	r2, #1
1a002940:	4629      	mov	r1, r5
1a002942:	2004      	movs	r0, #4
1a002944:	f000 fac8 	bl	1a002ed8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002948:	4a4a      	ldr	r2, [pc, #296]	; (1a002a74 <Chip_SetupCoreClock+0x14c>)
1a00294a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00294c:	f043 0301 	orr.w	r3, r3, #1
1a002950:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002952:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002956:	a901      	add	r1, sp, #4
1a002958:	4630      	mov	r0, r6
1a00295a:	f000 fa35 	bl	1a002dc8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00295e:	4b46      	ldr	r3, [pc, #280]	; (1a002a78 <Chip_SetupCoreClock+0x150>)
1a002960:	429e      	cmp	r6, r3
1a002962:	d916      	bls.n	1a002992 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002964:	9b01      	ldr	r3, [sp, #4]
1a002966:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00296a:	d003      	beq.n	1a002974 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00296c:	e7fe      	b.n	1a00296c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00296e:	f000 f98d 	bl	1a002c8c <Chip_Clock_EnableCrystal>
1a002972:	e7e3      	b.n	1a00293c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002974:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002978:	d005      	beq.n	1a002986 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00297a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00297e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002980:	2500      	movs	r5, #0
			direct = 1;
1a002982:	2601      	movs	r6, #1
1a002984:	e007      	b.n	1a002996 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002986:	9b04      	ldr	r3, [sp, #16]
1a002988:	3301      	adds	r3, #1
1a00298a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00298c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00298e:	2600      	movs	r6, #0
1a002990:	e001      	b.n	1a002996 <Chip_SetupCoreClock+0x6e>
1a002992:	2500      	movs	r5, #0
1a002994:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002996:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00299a:	9b01      	ldr	r3, [sp, #4]
1a00299c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0029a0:	9a05      	ldr	r2, [sp, #20]
1a0029a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0029a6:	9a03      	ldr	r2, [sp, #12]
1a0029a8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0029ac:	9a04      	ldr	r2, [sp, #16]
1a0029ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0029b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0029b6:	4a2f      	ldr	r2, [pc, #188]	; (1a002a74 <Chip_SetupCoreClock+0x14c>)
1a0029b8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0029ba:	4b2e      	ldr	r3, [pc, #184]	; (1a002a74 <Chip_SetupCoreClock+0x14c>)
1a0029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0029be:	f013 0f01 	tst.w	r3, #1
1a0029c2:	d0fa      	beq.n	1a0029ba <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0029c4:	2300      	movs	r3, #0
1a0029c6:	2201      	movs	r2, #1
1a0029c8:	2109      	movs	r1, #9
1a0029ca:	2004      	movs	r0, #4
1a0029cc:	f000 fa84 	bl	1a002ed8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0029d0:	b306      	cbz	r6, 1a002a14 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0029d2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0029d6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0029d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0029da:	1e5a      	subs	r2, r3, #1
1a0029dc:	9209      	str	r2, [sp, #36]	; 0x24
1a0029de:	2b00      	cmp	r3, #0
1a0029e0:	d1fa      	bne.n	1a0029d8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0029e2:	9b01      	ldr	r3, [sp, #4]
1a0029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0029e8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0029ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0029ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0029f2:	9a05      	ldr	r2, [sp, #20]
1a0029f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0029f8:	9a03      	ldr	r2, [sp, #12]
1a0029fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0029fe:	9a04      	ldr	r2, [sp, #16]
1a002a00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002a08:	4a1a      	ldr	r2, [pc, #104]	; (1a002a74 <Chip_SetupCoreClock+0x14c>)
1a002a0a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002a0c:	2c00      	cmp	r4, #0
1a002a0e:	d12e      	bne.n	1a002a6e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002a10:	b00a      	add	sp, #40	; 0x28
1a002a12:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002a14:	2d00      	cmp	r5, #0
1a002a16:	d0f9      	beq.n	1a002a0c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002a18:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002a1c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002a20:	1e5a      	subs	r2, r3, #1
1a002a22:	9209      	str	r2, [sp, #36]	; 0x24
1a002a24:	2b00      	cmp	r3, #0
1a002a26:	d1fa      	bne.n	1a002a1e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002a28:	9b04      	ldr	r3, [sp, #16]
1a002a2a:	1e5a      	subs	r2, r3, #1
1a002a2c:	9204      	str	r2, [sp, #16]
1a002a2e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002a32:	9b01      	ldr	r3, [sp, #4]
1a002a34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002a38:	9905      	ldr	r1, [sp, #20]
1a002a3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002a3e:	9903      	ldr	r1, [sp, #12]
1a002a40:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002a44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002a4c:	4a09      	ldr	r2, [pc, #36]	; (1a002a74 <Chip_SetupCoreClock+0x14c>)
1a002a4e:	6453      	str	r3, [r2, #68]	; 0x44
1a002a50:	e7dc      	b.n	1a002a0c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002a52:	480a      	ldr	r0, [pc, #40]	; (1a002a7c <Chip_SetupCoreClock+0x154>)
1a002a54:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002a58:	78cb      	ldrb	r3, [r1, #3]
1a002a5a:	788a      	ldrb	r2, [r1, #2]
1a002a5c:	7849      	ldrb	r1, [r1, #1]
1a002a5e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002a62:	f000 fa39 	bl	1a002ed8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002a66:	3401      	adds	r4, #1
1a002a68:	2c11      	cmp	r4, #17
1a002a6a:	d9f2      	bls.n	1a002a52 <Chip_SetupCoreClock+0x12a>
1a002a6c:	e7d0      	b.n	1a002a10 <Chip_SetupCoreClock+0xe8>
1a002a6e:	2400      	movs	r4, #0
1a002a70:	e7fa      	b.n	1a002a68 <Chip_SetupCoreClock+0x140>
1a002a72:	bf00      	nop
1a002a74:	40050000 	.word	0x40050000
1a002a78:	068e7780 	.word	0x068e7780
1a002a7c:	1a0086dc 	.word	0x1a0086dc

1a002a80 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002a80:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002a82:	2069      	movs	r0, #105	; 0x69
1a002a84:	f000 faa6 	bl	1a002fd4 <Chip_Clock_GetRate>
1a002a88:	4b01      	ldr	r3, [pc, #4]	; (1a002a90 <SystemCoreClockUpdate+0x10>)
1a002a8a:	6018      	str	r0, [r3, #0]
}
1a002a8c:	bd08      	pop	{r3, pc}
1a002a8e:	bf00      	nop
1a002a90:	100022c0 	.word	0x100022c0

1a002a94 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002a94:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002a96:	680b      	ldr	r3, [r1, #0]
1a002a98:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002a9c:	d002      	beq.n	1a002aa4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002aa2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002aa4:	4607      	mov	r7, r0
1a002aa6:	2501      	movs	r5, #1
1a002aa8:	e03a      	b.n	1a002b20 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002aaa:	694b      	ldr	r3, [r1, #20]
1a002aac:	fb03 f302 	mul.w	r3, r3, r2
1a002ab0:	fbb3 f3f5 	udiv	r3, r3, r5
1a002ab4:	e01c      	b.n	1a002af0 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002ab6:	461c      	mov	r4, r3
	if (val < 0)
1a002ab8:	ebb0 0c04 	subs.w	ip, r0, r4
1a002abc:	d427      	bmi.n	1a002b0e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002abe:	4567      	cmp	r7, ip
1a002ac0:	d906      	bls.n	1a002ad0 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002ac2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002ac4:	1c77      	adds	r7, r6, #1
1a002ac6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002ac8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002aca:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002acc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002ace:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002ad0:	3201      	adds	r2, #1
1a002ad2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002ad6:	dc1d      	bgt.n	1a002b14 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a002ad8:	680c      	ldr	r4, [r1, #0]
1a002ada:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002ade:	d0e4      	beq.n	1a002aaa <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002ae0:	1c73      	adds	r3, r6, #1
1a002ae2:	fa02 fc03 	lsl.w	ip, r2, r3
1a002ae6:	694b      	ldr	r3, [r1, #20]
1a002ae8:	fb03 f30c 	mul.w	r3, r3, ip
1a002aec:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002af0:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002b2c <pll_calc_divs+0x98>
1a002af4:	4563      	cmp	r3, ip
1a002af6:	d9eb      	bls.n	1a002ad0 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002af8:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002b30 <pll_calc_divs+0x9c>
1a002afc:	4563      	cmp	r3, ip
1a002afe:	d809      	bhi.n	1a002b14 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002b00:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002b04:	d1d7      	bne.n	1a002ab6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a002b06:	1c74      	adds	r4, r6, #1
1a002b08:	fa23 f404 	lsr.w	r4, r3, r4
1a002b0c:	e7d4      	b.n	1a002ab8 <pll_calc_divs+0x24>
		return -val;
1a002b0e:	f1cc 0c00 	rsb	ip, ip, #0
1a002b12:	e7d4      	b.n	1a002abe <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002b14:	3601      	adds	r6, #1
1a002b16:	2e03      	cmp	r6, #3
1a002b18:	dc01      	bgt.n	1a002b1e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a002b1a:	2201      	movs	r2, #1
1a002b1c:	e7d9      	b.n	1a002ad2 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002b1e:	3501      	adds	r5, #1
1a002b20:	2d04      	cmp	r5, #4
1a002b22:	dc01      	bgt.n	1a002b28 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002b24:	2600      	movs	r6, #0
1a002b26:	e7f6      	b.n	1a002b16 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a002b28:	bcf0      	pop	{r4, r5, r6, r7}
1a002b2a:	4770      	bx	lr
1a002b2c:	094c5eff 	.word	0x094c5eff
1a002b30:	1312d000 	.word	0x1312d000

1a002b34 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002b36:	b099      	sub	sp, #100	; 0x64
1a002b38:	4605      	mov	r5, r0
1a002b3a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002b3c:	225c      	movs	r2, #92	; 0x5c
1a002b3e:	2100      	movs	r1, #0
1a002b40:	a801      	add	r0, sp, #4
1a002b42:	f001 fd14 	bl	1a00456e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002b46:	2380      	movs	r3, #128	; 0x80
1a002b48:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002b4a:	6963      	ldr	r3, [r4, #20]
1a002b4c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002b4e:	7923      	ldrb	r3, [r4, #4]
1a002b50:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002b54:	4669      	mov	r1, sp
1a002b56:	4628      	mov	r0, r5
1a002b58:	f7ff ff9c 	bl	1a002a94 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002b5c:	9b06      	ldr	r3, [sp, #24]
1a002b5e:	42ab      	cmp	r3, r5
1a002b60:	d027      	beq.n	1a002bb2 <pll_get_frac+0x7e>
	if (val < 0)
1a002b62:	1aeb      	subs	r3, r5, r3
1a002b64:	d42e      	bmi.n	1a002bc4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002b66:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002b6e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002b70:	6963      	ldr	r3, [r4, #20]
1a002b72:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002b74:	7923      	ldrb	r3, [r4, #4]
1a002b76:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002b7a:	a910      	add	r1, sp, #64	; 0x40
1a002b7c:	4628      	mov	r0, r5
1a002b7e:	f7ff ff89 	bl	1a002a94 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002b84:	42ab      	cmp	r3, r5
1a002b86:	d01f      	beq.n	1a002bc8 <pll_get_frac+0x94>
	if (val < 0)
1a002b88:	1aeb      	subs	r3, r5, r3
1a002b8a:	d425      	bmi.n	1a002bd8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002b8c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002b8e:	4b2b      	ldr	r3, [pc, #172]	; (1a002c3c <pll_get_frac+0x108>)
1a002b90:	429d      	cmp	r5, r3
1a002b92:	d923      	bls.n	1a002bdc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002b96:	1aed      	subs	r5, r5, r3
1a002b98:	d433      	bmi.n	1a002c02 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002b9a:	42ae      	cmp	r6, r5
1a002b9c:	dc3b      	bgt.n	1a002c16 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002b9e:	42be      	cmp	r6, r7
1a002ba0:	dc31      	bgt.n	1a002c06 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002ba2:	466d      	mov	r5, sp
1a002ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ba8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002bb0:	e006      	b.n	1a002bc0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002bb2:	466d      	mov	r5, sp
1a002bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002bc0:	b019      	add	sp, #100	; 0x64
1a002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002bc4:	425b      	negs	r3, r3
1a002bc6:	e7ce      	b.n	1a002b66 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002bc8:	ad10      	add	r5, sp, #64	; 0x40
1a002bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002bd6:	e7f3      	b.n	1a002bc0 <pll_get_frac+0x8c>
		return -val;
1a002bd8:	425b      	negs	r3, r3
1a002bda:	e7d7      	b.n	1a002b8c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002bdc:	2340      	movs	r3, #64	; 0x40
1a002bde:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002be0:	6963      	ldr	r3, [r4, #20]
1a002be2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002be4:	a908      	add	r1, sp, #32
1a002be6:	4628      	mov	r0, r5
1a002be8:	f7ff ff54 	bl	1a002a94 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002bee:	42ab      	cmp	r3, r5
1a002bf0:	d1d0      	bne.n	1a002b94 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002bf2:	ad08      	add	r5, sp, #32
1a002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002c00:	e7de      	b.n	1a002bc0 <pll_get_frac+0x8c>
		return -val;
1a002c02:	426d      	negs	r5, r5
1a002c04:	e7c9      	b.n	1a002b9a <pll_get_frac+0x66>
			*ppll = pll[2];
1a002c06:	ad10      	add	r5, sp, #64	; 0x40
1a002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c14:	e7d4      	b.n	1a002bc0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002c16:	42af      	cmp	r7, r5
1a002c18:	db07      	blt.n	1a002c2a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002c1a:	ad08      	add	r5, sp, #32
1a002c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c28:	e7ca      	b.n	1a002bc0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002c2a:	ad10      	add	r5, sp, #64	; 0x40
1a002c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c38:	e7c2      	b.n	1a002bc0 <pll_get_frac+0x8c>
1a002c3a:	bf00      	nop
1a002c3c:	068e7780 	.word	0x068e7780

1a002c40 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002c40:	b430      	push	{r4, r5}
1a002c42:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002c44:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002c46:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c48:	e000      	b.n	1a002c4c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002c4a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c4c:	281c      	cmp	r0, #28
1a002c4e:	d118      	bne.n	1a002c82 <Chip_Clock_FindBaseClock+0x42>
1a002c50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c54:	0051      	lsls	r1, r2, #1
1a002c56:	4a0c      	ldr	r2, [pc, #48]	; (1a002c88 <Chip_Clock_FindBaseClock+0x48>)
1a002c58:	440a      	add	r2, r1
1a002c5a:	7914      	ldrb	r4, [r2, #4]
1a002c5c:	4284      	cmp	r4, r0
1a002c5e:	d010      	beq.n	1a002c82 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002c60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002c64:	004a      	lsls	r2, r1, #1
1a002c66:	4908      	ldr	r1, [pc, #32]	; (1a002c88 <Chip_Clock_FindBaseClock+0x48>)
1a002c68:	5a8a      	ldrh	r2, [r1, r2]
1a002c6a:	42aa      	cmp	r2, r5
1a002c6c:	d8ed      	bhi.n	1a002c4a <Chip_Clock_FindBaseClock+0xa>
1a002c6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c72:	0051      	lsls	r1, r2, #1
1a002c74:	4a04      	ldr	r2, [pc, #16]	; (1a002c88 <Chip_Clock_FindBaseClock+0x48>)
1a002c76:	440a      	add	r2, r1
1a002c78:	8852      	ldrh	r2, [r2, #2]
1a002c7a:	42aa      	cmp	r2, r5
1a002c7c:	d3e5      	bcc.n	1a002c4a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002c7e:	4620      	mov	r0, r4
1a002c80:	e7e4      	b.n	1a002c4c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002c82:	bc30      	pop	{r4, r5}
1a002c84:	4770      	bx	lr
1a002c86:	bf00      	nop
1a002c88:	1a008730 	.word	0x1a008730

1a002c8c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002c8c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002c92:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002c94:	4a0d      	ldr	r2, [pc, #52]	; (1a002ccc <Chip_Clock_EnableCrystal+0x40>)
1a002c96:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002c98:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002c9c:	6992      	ldr	r2, [r2, #24]
1a002c9e:	428a      	cmp	r2, r1
1a002ca0:	d001      	beq.n	1a002ca6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002ca2:	4a0a      	ldr	r2, [pc, #40]	; (1a002ccc <Chip_Clock_EnableCrystal+0x40>)
1a002ca4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002ca6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002caa:	4a09      	ldr	r2, [pc, #36]	; (1a002cd0 <Chip_Clock_EnableCrystal+0x44>)
1a002cac:	6811      	ldr	r1, [r2, #0]
1a002cae:	4a09      	ldr	r2, [pc, #36]	; (1a002cd4 <Chip_Clock_EnableCrystal+0x48>)
1a002cb0:	4291      	cmp	r1, r2
1a002cb2:	d901      	bls.n	1a002cb8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002cb4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002cb8:	4a04      	ldr	r2, [pc, #16]	; (1a002ccc <Chip_Clock_EnableCrystal+0x40>)
1a002cba:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002cbc:	9b01      	ldr	r3, [sp, #4]
1a002cbe:	1e5a      	subs	r2, r3, #1
1a002cc0:	9201      	str	r2, [sp, #4]
1a002cc2:	2b00      	cmp	r3, #0
1a002cc4:	d1fa      	bne.n	1a002cbc <Chip_Clock_EnableCrystal+0x30>
}
1a002cc6:	b002      	add	sp, #8
1a002cc8:	4770      	bx	lr
1a002cca:	bf00      	nop
1a002ccc:	40050000 	.word	0x40050000
1a002cd0:	1a0086d8 	.word	0x1a0086d8
1a002cd4:	01312cff 	.word	0x01312cff

1a002cd8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002cd8:	3012      	adds	r0, #18
1a002cda:	4b05      	ldr	r3, [pc, #20]	; (1a002cf0 <Chip_Clock_GetDividerSource+0x18>)
1a002cdc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002ce0:	f010 0f01 	tst.w	r0, #1
1a002ce4:	d102      	bne.n	1a002cec <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ce6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002cea:	4770      	bx	lr
		return CLKINPUT_PD;
1a002cec:	2011      	movs	r0, #17
}
1a002cee:	4770      	bx	lr
1a002cf0:	40050000 	.word	0x40050000

1a002cf4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002cf4:	f100 0212 	add.w	r2, r0, #18
1a002cf8:	4b03      	ldr	r3, [pc, #12]	; (1a002d08 <Chip_Clock_GetDividerDivisor+0x14>)
1a002cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002cfe:	4b03      	ldr	r3, [pc, #12]	; (1a002d0c <Chip_Clock_GetDividerDivisor+0x18>)
1a002d00:	5c18      	ldrb	r0, [r3, r0]
}
1a002d02:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002d06:	4770      	bx	lr
1a002d08:	40050000 	.word	0x40050000
1a002d0c:	1a008728 	.word	0x1a008728

1a002d10 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002d10:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002d12:	2810      	cmp	r0, #16
1a002d14:	d80a      	bhi.n	1a002d2c <Chip_Clock_GetClockInputHz+0x1c>
1a002d16:	e8df f000 	tbb	[pc, r0]
1a002d1a:	0b44      	.short	0x0b44
1a002d1c:	0921180d 	.word	0x0921180d
1a002d20:	2d2a2724 	.word	0x2d2a2724
1a002d24:	34300909 	.word	0x34300909
1a002d28:	3c38      	.short	0x3c38
1a002d2a:	40          	.byte	0x40
1a002d2b:	00          	.byte	0x00
	uint32_t rate = 0;
1a002d2c:	2000      	movs	r0, #0
1a002d2e:	e03a      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002d30:	481e      	ldr	r0, [pc, #120]	; (1a002dac <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002d32:	e038      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d34:	4b1e      	ldr	r3, [pc, #120]	; (1a002db0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002d36:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d3a:	f003 0307 	and.w	r3, r3, #7
1a002d3e:	2b04      	cmp	r3, #4
1a002d40:	d001      	beq.n	1a002d46 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002d42:	481c      	ldr	r0, [pc, #112]	; (1a002db4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d44:	e02f      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002d46:	2000      	movs	r0, #0
1a002d48:	e02d      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d4a:	4b19      	ldr	r3, [pc, #100]	; (1a002db0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002d4c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d50:	f003 0307 	and.w	r3, r3, #7
1a002d54:	2b04      	cmp	r3, #4
1a002d56:	d027      	beq.n	1a002da8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002d58:	4816      	ldr	r0, [pc, #88]	; (1a002db4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d5a:	e024      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002d5c:	4b16      	ldr	r3, [pc, #88]	; (1a002db8 <Chip_Clock_GetClockInputHz+0xa8>)
1a002d5e:	6818      	ldr	r0, [r3, #0]
		break;
1a002d60:	e021      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002d62:	4b16      	ldr	r3, [pc, #88]	; (1a002dbc <Chip_Clock_GetClockInputHz+0xac>)
1a002d64:	6818      	ldr	r0, [r3, #0]
		break;
1a002d66:	e01e      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002d68:	4b15      	ldr	r3, [pc, #84]	; (1a002dc0 <Chip_Clock_GetClockInputHz+0xb0>)
1a002d6a:	6818      	ldr	r0, [r3, #0]
		break;
1a002d6c:	e01b      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002d6e:	4b14      	ldr	r3, [pc, #80]	; (1a002dc0 <Chip_Clock_GetClockInputHz+0xb0>)
1a002d70:	6858      	ldr	r0, [r3, #4]
		break;
1a002d72:	e018      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002d74:	f000 f868 	bl	1a002e48 <Chip_Clock_GetMainPLLHz>
		break;
1a002d78:	e015      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002d7a:	2100      	movs	r1, #0
1a002d7c:	f000 f89a 	bl	1a002eb4 <Chip_Clock_GetDivRate>
		break;
1a002d80:	e011      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002d82:	2101      	movs	r1, #1
1a002d84:	f000 f896 	bl	1a002eb4 <Chip_Clock_GetDivRate>
		break;
1a002d88:	e00d      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002d8a:	2102      	movs	r1, #2
1a002d8c:	f000 f892 	bl	1a002eb4 <Chip_Clock_GetDivRate>
		break;
1a002d90:	e009      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002d92:	2103      	movs	r1, #3
1a002d94:	f000 f88e 	bl	1a002eb4 <Chip_Clock_GetDivRate>
		break;
1a002d98:	e005      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002d9a:	2104      	movs	r1, #4
1a002d9c:	f000 f88a 	bl	1a002eb4 <Chip_Clock_GetDivRate>
		break;
1a002da0:	e001      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002da2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002da6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002da8:	4806      	ldr	r0, [pc, #24]	; (1a002dc4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002daa:	e7fc      	b.n	1a002da6 <Chip_Clock_GetClockInputHz+0x96>
1a002dac:	00b71b00 	.word	0x00b71b00
1a002db0:	40043000 	.word	0x40043000
1a002db4:	017d7840 	.word	0x017d7840
1a002db8:	1a0086ac 	.word	0x1a0086ac
1a002dbc:	1a0086d8 	.word	0x1a0086d8
1a002dc0:	10002268 	.word	0x10002268
1a002dc4:	02faf080 	.word	0x02faf080

1a002dc8 <Chip_Clock_CalcMainPLLValue>:
{
1a002dc8:	b538      	push	{r3, r4, r5, lr}
1a002dca:	4605      	mov	r5, r0
1a002dcc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002dce:	7908      	ldrb	r0, [r1, #4]
1a002dd0:	f7ff ff9e 	bl	1a002d10 <Chip_Clock_GetClockInputHz>
1a002dd4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002dd6:	4b19      	ldr	r3, [pc, #100]	; (1a002e3c <Chip_Clock_CalcMainPLLValue+0x74>)
1a002dd8:	442b      	add	r3, r5
1a002dda:	4a19      	ldr	r2, [pc, #100]	; (1a002e40 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002ddc:	4293      	cmp	r3, r2
1a002dde:	d821      	bhi.n	1a002e24 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002de0:	b318      	cbz	r0, 1a002e2a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002de2:	2380      	movs	r3, #128	; 0x80
1a002de4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002de6:	2300      	movs	r3, #0
1a002de8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002dea:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002dec:	fbb5 f3f0 	udiv	r3, r5, r0
1a002df0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002df2:	4a14      	ldr	r2, [pc, #80]	; (1a002e44 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002df4:	4295      	cmp	r5, r2
1a002df6:	d903      	bls.n	1a002e00 <Chip_Clock_CalcMainPLLValue+0x38>
1a002df8:	fb03 f000 	mul.w	r0, r3, r0
1a002dfc:	42a8      	cmp	r0, r5
1a002dfe:	d007      	beq.n	1a002e10 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002e00:	4621      	mov	r1, r4
1a002e02:	4628      	mov	r0, r5
1a002e04:	f7ff fe96 	bl	1a002b34 <pll_get_frac>
		if (!ppll->nsel) {
1a002e08:	68a3      	ldr	r3, [r4, #8]
1a002e0a:	b18b      	cbz	r3, 1a002e30 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002e0c:	3b01      	subs	r3, #1
1a002e0e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002e10:	6923      	ldr	r3, [r4, #16]
1a002e12:	b183      	cbz	r3, 1a002e36 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002e14:	68e2      	ldr	r2, [r4, #12]
1a002e16:	b10a      	cbz	r2, 1a002e1c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002e18:	3a01      	subs	r2, #1
1a002e1a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002e1c:	3b01      	subs	r3, #1
1a002e1e:	6123      	str	r3, [r4, #16]
	return 0;
1a002e20:	2000      	movs	r0, #0
}
1a002e22:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002e24:	f04f 30ff 	mov.w	r0, #4294967295
1a002e28:	e7fb      	b.n	1a002e22 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002e2a:	f04f 30ff 	mov.w	r0, #4294967295
1a002e2e:	e7f8      	b.n	1a002e22 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002e30:	f04f 30ff 	mov.w	r0, #4294967295
1a002e34:	e7f5      	b.n	1a002e22 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002e36:	f04f 30ff 	mov.w	r0, #4294967295
1a002e3a:	e7f2      	b.n	1a002e22 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002e3c:	ff6b3a10 	.word	0xff6b3a10
1a002e40:	0b940510 	.word	0x0b940510
1a002e44:	094c5eff 	.word	0x094c5eff

1a002e48 <Chip_Clock_GetMainPLLHz>:
{
1a002e48:	b530      	push	{r4, r5, lr}
1a002e4a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002e4c:	4d17      	ldr	r5, [pc, #92]	; (1a002eac <Chip_Clock_GetMainPLLHz+0x64>)
1a002e4e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002e50:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002e54:	f7ff ff5c 	bl	1a002d10 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002e58:	4b15      	ldr	r3, [pc, #84]	; (1a002eb0 <Chip_Clock_GetMainPLLHz+0x68>)
1a002e5a:	681b      	ldr	r3, [r3, #0]
1a002e5c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002e5e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002e60:	f013 0f01 	tst.w	r3, #1
1a002e64:	d020      	beq.n	1a002ea8 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a002e66:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002e6a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002e6e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002e72:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002e76:	3301      	adds	r3, #1
	n = nsel + 1;
1a002e78:	3201      	adds	r2, #1
	p = ptab[psel];
1a002e7a:	f10d 0c08 	add.w	ip, sp, #8
1a002e7e:	4461      	add	r1, ip
1a002e80:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002e84:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002e88:	d108      	bne.n	1a002e9c <Chip_Clock_GetMainPLLHz+0x54>
1a002e8a:	b93d      	cbnz	r5, 1a002e9c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002e8c:	0049      	lsls	r1, r1, #1
1a002e8e:	fbb3 f3f1 	udiv	r3, r3, r1
1a002e92:	fbb0 f0f2 	udiv	r0, r0, r2
1a002e96:	fb00 f003 	mul.w	r0, r0, r3
1a002e9a:	e003      	b.n	1a002ea4 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002e9c:	fbb0 f0f2 	udiv	r0, r0, r2
1a002ea0:	fb03 f000 	mul.w	r0, r3, r0
}
1a002ea4:	b003      	add	sp, #12
1a002ea6:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002ea8:	2000      	movs	r0, #0
1a002eaa:	e7fb      	b.n	1a002ea4 <Chip_Clock_GetMainPLLHz+0x5c>
1a002eac:	40050000 	.word	0x40050000
1a002eb0:	1a008724 	.word	0x1a008724

1a002eb4 <Chip_Clock_GetDivRate>:
{
1a002eb4:	b538      	push	{r3, r4, r5, lr}
1a002eb6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002eb8:	4608      	mov	r0, r1
1a002eba:	f7ff ff0d 	bl	1a002cd8 <Chip_Clock_GetDividerSource>
1a002ebe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002ec0:	4620      	mov	r0, r4
1a002ec2:	f7ff ff17 	bl	1a002cf4 <Chip_Clock_GetDividerDivisor>
1a002ec6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002ec8:	4628      	mov	r0, r5
1a002eca:	f7ff ff21 	bl	1a002d10 <Chip_Clock_GetClockInputHz>
1a002ece:	3401      	adds	r4, #1
}
1a002ed0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002ed4:	bd38      	pop	{r3, r4, r5, pc}
1a002ed6:	Address 0x1a002ed6 is out of bounds.


1a002ed8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002ed8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002eda:	f100 0416 	add.w	r4, r0, #22
1a002ede:	00a4      	lsls	r4, r4, #2
1a002ee0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002ee4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002ee8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002eea:	281b      	cmp	r0, #27
1a002eec:	d813      	bhi.n	1a002f16 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002eee:	2911      	cmp	r1, #17
1a002ef0:	d01a      	beq.n	1a002f28 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002ef2:	4d0e      	ldr	r5, [pc, #56]	; (1a002f2c <Chip_Clock_SetBaseClock+0x54>)
1a002ef4:	4025      	ands	r5, r4

			if (autoblocken) {
1a002ef6:	b10a      	cbz	r2, 1a002efc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002ef8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002efc:	b10b      	cbz	r3, 1a002f02 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002efe:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002f02:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002f06:	3016      	adds	r0, #22
1a002f08:	0080      	lsls	r0, r0, #2
1a002f0a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f0e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f12:	6045      	str	r5, [r0, #4]
1a002f14:	e008      	b.n	1a002f28 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002f16:	f044 0401 	orr.w	r4, r4, #1
1a002f1a:	3016      	adds	r0, #22
1a002f1c:	0080      	lsls	r0, r0, #2
1a002f1e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f22:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f26:	6044      	str	r4, [r0, #4]
	}
}
1a002f28:	bc30      	pop	{r4, r5}
1a002f2a:	4770      	bx	lr
1a002f2c:	e0fff7fe 	.word	0xe0fff7fe

1a002f30 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002f30:	281b      	cmp	r0, #27
1a002f32:	d80c      	bhi.n	1a002f4e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f34:	3016      	adds	r0, #22
1a002f36:	0080      	lsls	r0, r0, #2
1a002f38:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f3c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f40:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002f42:	f010 0f01 	tst.w	r0, #1
1a002f46:	d104      	bne.n	1a002f52 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002f48:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002f4c:	4770      	bx	lr
		return CLKINPUT_PD;
1a002f4e:	2011      	movs	r0, #17
1a002f50:	4770      	bx	lr
		return CLKINPUT_PD;
1a002f52:	2011      	movs	r0, #17
}
1a002f54:	4770      	bx	lr

1a002f56 <Chip_Clock_GetBaseClocktHz>:
{
1a002f56:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002f58:	f7ff ffea 	bl	1a002f30 <Chip_Clock_GetBaseClock>
1a002f5c:	f7ff fed8 	bl	1a002d10 <Chip_Clock_GetClockInputHz>
}
1a002f60:	bd08      	pop	{r3, pc}
1a002f62:	Address 0x1a002f62 is out of bounds.


1a002f64 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002f64:	b971      	cbnz	r1, 1a002f84 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002f66:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002f68:	b10a      	cbz	r2, 1a002f6e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002f6a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002f6e:	2b02      	cmp	r3, #2
1a002f70:	d00a      	beq.n	1a002f88 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002f72:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f76:	d30a      	bcc.n	1a002f8e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002f78:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002f7c:	4b06      	ldr	r3, [pc, #24]	; (1a002f98 <Chip_Clock_EnableOpts+0x34>)
1a002f7e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002f82:	4770      	bx	lr
		reg |= (1 << 1);
1a002f84:	2103      	movs	r1, #3
1a002f86:	e7ef      	b.n	1a002f68 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002f88:	f041 0120 	orr.w	r1, r1, #32
1a002f8c:	e7f1      	b.n	1a002f72 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002f8e:	3020      	adds	r0, #32
1a002f90:	4b02      	ldr	r3, [pc, #8]	; (1a002f9c <Chip_Clock_EnableOpts+0x38>)
1a002f92:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002f96:	4770      	bx	lr
1a002f98:	40052000 	.word	0x40052000
1a002f9c:	40051000 	.word	0x40051000

1a002fa0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002fa0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fa4:	d309      	bcc.n	1a002fba <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002fa6:	4a09      	ldr	r2, [pc, #36]	; (1a002fcc <Chip_Clock_Enable+0x2c>)
1a002fa8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002fac:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002fb0:	f043 0301 	orr.w	r3, r3, #1
1a002fb4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002fb8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002fba:	4a05      	ldr	r2, [pc, #20]	; (1a002fd0 <Chip_Clock_Enable+0x30>)
1a002fbc:	3020      	adds	r0, #32
1a002fbe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002fc2:	f043 0301 	orr.w	r3, r3, #1
1a002fc6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002fca:	4770      	bx	lr
1a002fcc:	40052000 	.word	0x40052000
1a002fd0:	40051000 	.word	0x40051000

1a002fd4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002fd4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002fd6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fda:	d309      	bcc.n	1a002ff0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002fdc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002fe0:	4a0d      	ldr	r2, [pc, #52]	; (1a003018 <Chip_Clock_GetRate+0x44>)
1a002fe2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002fe6:	f014 0f01 	tst.w	r4, #1
1a002fea:	d107      	bne.n	1a002ffc <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002fec:	2000      	movs	r0, #0
	}

	return rate;
}
1a002fee:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002ff0:	f100 0320 	add.w	r3, r0, #32
1a002ff4:	4a09      	ldr	r2, [pc, #36]	; (1a00301c <Chip_Clock_GetRate+0x48>)
1a002ff6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002ffa:	e7f4      	b.n	1a002fe6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002ffc:	f7ff fe20 	bl	1a002c40 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003000:	f7ff ffa9 	bl	1a002f56 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003004:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003008:	d103      	bne.n	1a003012 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00300a:	2301      	movs	r3, #1
		rate = rate / div;
1a00300c:	fbb0 f0f3 	udiv	r0, r0, r3
1a003010:	e7ed      	b.n	1a002fee <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003012:	2302      	movs	r3, #2
1a003014:	e7fa      	b.n	1a00300c <Chip_Clock_GetRate+0x38>
1a003016:	bf00      	nop
1a003018:	40052000 	.word	0x40052000
1a00301c:	40051000 	.word	0x40051000

1a003020 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003020:	4b09      	ldr	r3, [pc, #36]	; (1a003048 <Chip_UART_GetIndex+0x28>)
1a003022:	4298      	cmp	r0, r3
1a003024:	d009      	beq.n	1a00303a <Chip_UART_GetIndex+0x1a>
1a003026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00302a:	4298      	cmp	r0, r3
1a00302c:	d007      	beq.n	1a00303e <Chip_UART_GetIndex+0x1e>
1a00302e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003032:	4298      	cmp	r0, r3
1a003034:	d005      	beq.n	1a003042 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003036:	2000      	movs	r0, #0
1a003038:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00303a:	2002      	movs	r0, #2
1a00303c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00303e:	2003      	movs	r0, #3
1a003040:	4770      	bx	lr
			return 1;
1a003042:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003044:	4770      	bx	lr
1a003046:	bf00      	nop
1a003048:	400c1000 	.word	0x400c1000

1a00304c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00304c:	b530      	push	{r4, r5, lr}
1a00304e:	b083      	sub	sp, #12
1a003050:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003052:	f7ff ffe5 	bl	1a003020 <Chip_UART_GetIndex>
1a003056:	2301      	movs	r3, #1
1a003058:	461a      	mov	r2, r3
1a00305a:	4619      	mov	r1, r3
1a00305c:	4d0e      	ldr	r5, [pc, #56]	; (1a003098 <Chip_UART_Init+0x4c>)
1a00305e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003062:	f7ff ff7f 	bl	1a002f64 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003066:	2307      	movs	r3, #7
1a003068:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00306a:	2300      	movs	r3, #0
1a00306c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00306e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003070:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003072:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003074:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003076:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003078:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00307a:	4b08      	ldr	r3, [pc, #32]	; (1a00309c <Chip_UART_Init+0x50>)
1a00307c:	429c      	cmp	r4, r3
1a00307e:	d006      	beq.n	1a00308e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003080:	2303      	movs	r3, #3
1a003082:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003084:	2310      	movs	r3, #16
1a003086:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003088:	9b01      	ldr	r3, [sp, #4]
}
1a00308a:	b003      	add	sp, #12
1a00308c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00308e:	2300      	movs	r3, #0
1a003090:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003092:	69a3      	ldr	r3, [r4, #24]
1a003094:	9301      	str	r3, [sp, #4]
1a003096:	e7f3      	b.n	1a003080 <Chip_UART_Init+0x34>
1a003098:	1a0087a4 	.word	0x1a0087a4
1a00309c:	40082000 	.word	0x40082000

1a0030a0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0030a0:	b538      	push	{r3, r4, r5, lr}
1a0030a2:	4605      	mov	r5, r0
1a0030a4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0030a6:	f7ff ffbb 	bl	1a003020 <Chip_UART_GetIndex>
1a0030aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0030dc <Chip_UART_SetBaud+0x3c>)
1a0030ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0030b0:	f7ff ff90 	bl	1a002fd4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0030b4:	0123      	lsls	r3, r4, #4
1a0030b6:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0030ba:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0030bc:	68ea      	ldr	r2, [r5, #12]
1a0030be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0030c2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0030c4:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0030c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0030ca:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0030cc:	68ea      	ldr	r2, [r5, #12]
1a0030ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0030d2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0030d4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0030d8:	0900      	lsrs	r0, r0, #4
1a0030da:	bd38      	pop	{r3, r4, r5, pc}
1a0030dc:	1a00879c 	.word	0x1a00879c

1a0030e0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0030e4:	b083      	sub	sp, #12
1a0030e6:	9001      	str	r0, [sp, #4]
1a0030e8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0030ea:	f7ff ff99 	bl	1a003020 <Chip_UART_GetIndex>
1a0030ee:	4b32      	ldr	r3, [pc, #200]	; (1a0031b8 <Chip_UART_SetBaudFDR+0xd8>)
1a0030f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0030f4:	f7ff ff6e 	bl	1a002fd4 <Chip_Clock_GetRate>
1a0030f8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0030fa:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0030fe:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003100:	f04f 0b00 	mov.w	fp, #0
1a003104:	46a2      	mov	sl, r4
1a003106:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a003108:	e02a      	b.n	1a003160 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00310a:	4242      	negs	r2, r0
				div ++;
1a00310c:	1c4b      	adds	r3, r1, #1
1a00310e:	e017      	b.n	1a003140 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003110:	b30a      	cbz	r2, 1a003156 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003112:	4617      	mov	r7, r2
			sd = d;
1a003114:	46ab      	mov	fp, r5
			sm = m;
1a003116:	46a2      	mov	sl, r4
			sdiv = div;
1a003118:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00311a:	3501      	adds	r5, #1
1a00311c:	42ac      	cmp	r4, r5
1a00311e:	d91e      	bls.n	1a00315e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003120:	0933      	lsrs	r3, r6, #4
1a003122:	0730      	lsls	r0, r6, #28
1a003124:	fba4 0100 	umull	r0, r1, r4, r0
1a003128:	fb04 1103 	mla	r1, r4, r3, r1
1a00312c:	1962      	adds	r2, r4, r5
1a00312e:	fb08 f202 	mul.w	r2, r8, r2
1a003132:	2300      	movs	r3, #0
1a003134:	f000 feae 	bl	1a003e94 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003138:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00313a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00313c:	2800      	cmp	r0, #0
1a00313e:	dbe4      	blt.n	1a00310a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003140:	4297      	cmp	r7, r2
1a003142:	d3ea      	bcc.n	1a00311a <Chip_UART_SetBaudFDR+0x3a>
1a003144:	2b00      	cmp	r3, #0
1a003146:	d0e8      	beq.n	1a00311a <Chip_UART_SetBaudFDR+0x3a>
1a003148:	0c19      	lsrs	r1, r3, #16
1a00314a:	d1e6      	bne.n	1a00311a <Chip_UART_SetBaudFDR+0x3a>
1a00314c:	2b02      	cmp	r3, #2
1a00314e:	d8df      	bhi.n	1a003110 <Chip_UART_SetBaudFDR+0x30>
1a003150:	2d00      	cmp	r5, #0
1a003152:	d0dd      	beq.n	1a003110 <Chip_UART_SetBaudFDR+0x30>
1a003154:	e7e1      	b.n	1a00311a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003156:	4617      	mov	r7, r2
			sd = d;
1a003158:	46ab      	mov	fp, r5
			sm = m;
1a00315a:	46a2      	mov	sl, r4
			sdiv = div;
1a00315c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00315e:	3401      	adds	r4, #1
1a003160:	b11f      	cbz	r7, 1a00316a <Chip_UART_SetBaudFDR+0x8a>
1a003162:	2c0f      	cmp	r4, #15
1a003164:	d801      	bhi.n	1a00316a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003166:	2500      	movs	r5, #0
1a003168:	e7d8      	b.n	1a00311c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00316a:	f1b9 0f00 	cmp.w	r9, #0
1a00316e:	d01e      	beq.n	1a0031ae <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003170:	9a01      	ldr	r2, [sp, #4]
1a003172:	4611      	mov	r1, r2
1a003174:	68d3      	ldr	r3, [r2, #12]
1a003176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00317a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00317c:	fa5f f389 	uxtb.w	r3, r9
1a003180:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a003182:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a003186:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003188:	68d3      	ldr	r3, [r2, #12]
1a00318a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00318e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003190:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003194:	b2db      	uxtb	r3, r3
1a003196:	f00b 020f 	and.w	r2, fp, #15
1a00319a:	4313      	orrs	r3, r2
1a00319c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00319e:	0933      	lsrs	r3, r6, #4
1a0031a0:	fb0a f303 	mul.w	r3, sl, r3
1a0031a4:	44da      	add	sl, fp
1a0031a6:	fb09 f90a 	mul.w	r9, r9, sl
1a0031aa:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0031ae:	4648      	mov	r0, r9
1a0031b0:	b003      	add	sp, #12
1a0031b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0031b6:	bf00      	nop
1a0031b8:	1a00879c 	.word	0x1a00879c

1a0031bc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0031bc:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0031be:	4a0b      	ldr	r2, [pc, #44]	; (1a0031ec <SystemInit+0x30>)
1a0031c0:	4b0b      	ldr	r3, [pc, #44]	; (1a0031f0 <SystemInit+0x34>)
1a0031c2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0031c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0031c8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0031ca:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0031ce:	2b20      	cmp	r3, #32
1a0031d0:	d004      	beq.n	1a0031dc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0031d2:	f7ff f8a9 	bl	1a002328 <Board_SystemInit>
   Board_Init();
1a0031d6:	f7ff f97f 	bl	1a0024d8 <Board_Init>
#endif
}
1a0031da:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0031dc:	4a04      	ldr	r2, [pc, #16]	; (1a0031f0 <SystemInit+0x34>)
1a0031de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0031e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0031e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0031ea:	e7f2      	b.n	1a0031d2 <SystemInit+0x16>
1a0031ec:	1a000000 	.word	0x1a000000
1a0031f0:	e000ed00 	.word	0xe000ed00

1a0031f4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0031f4:	4b04      	ldr	r3, [pc, #16]	; (1a003208 <cyclesCounterInit+0x14>)
1a0031f6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0031f8:	4a04      	ldr	r2, [pc, #16]	; (1a00320c <cyclesCounterInit+0x18>)
1a0031fa:	6813      	ldr	r3, [r2, #0]
1a0031fc:	f043 0301 	orr.w	r3, r3, #1
1a003200:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003202:	2001      	movs	r0, #1
1a003204:	4770      	bx	lr
1a003206:	bf00      	nop
1a003208:	1000003c 	.word	0x1000003c
1a00320c:	e0001000 	.word	0xe0001000

1a003210 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003210:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003212:	4d0b      	ldr	r5, [pc, #44]	; (1a003240 <gpioObtainPinInit+0x30>)
1a003214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003218:	182c      	adds	r4, r5, r0
1a00321a:	5628      	ldrsb	r0, [r5, r0]
1a00321c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00321e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003222:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003224:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003228:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00322a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00322e:	9b02      	ldr	r3, [sp, #8]
1a003230:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003232:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003236:	9b03      	ldr	r3, [sp, #12]
1a003238:	701a      	strb	r2, [r3, #0]
}
1a00323a:	bc30      	pop	{r4, r5}
1a00323c:	4770      	bx	lr
1a00323e:	bf00      	nop
1a003240:	1a0087ac 	.word	0x1a0087ac

1a003244 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003244:	f110 0f02 	cmn.w	r0, #2
1a003248:	f000 80c7 	beq.w	1a0033da <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00324c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003250:	f000 80c5 	beq.w	1a0033de <gpioInit+0x19a>
{
1a003254:	b570      	push	{r4, r5, r6, lr}
1a003256:	b084      	sub	sp, #16
1a003258:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00325a:	2300      	movs	r3, #0
1a00325c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003260:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003264:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003268:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00326c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003270:	f10d 030b 	add.w	r3, sp, #11
1a003274:	9301      	str	r3, [sp, #4]
1a003276:	ab03      	add	r3, sp, #12
1a003278:	9300      	str	r3, [sp, #0]
1a00327a:	f10d 030d 	add.w	r3, sp, #13
1a00327e:	f10d 020e 	add.w	r2, sp, #14
1a003282:	f10d 010f 	add.w	r1, sp, #15
1a003286:	f7ff ffc3 	bl	1a003210 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00328a:	2c05      	cmp	r4, #5
1a00328c:	f200 80a9 	bhi.w	1a0033e2 <gpioInit+0x19e>
1a003290:	e8df f004 	tbb	[pc, r4]
1a003294:	45278109 	.word	0x45278109
1a003298:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00329a:	4853      	ldr	r0, [pc, #332]	; (1a0033e8 <gpioInit+0x1a4>)
1a00329c:	f7ff fa88 	bl	1a0027b0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0032a0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0032a2:	b004      	add	sp, #16
1a0032a4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0032a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0032ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0032b2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0032b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0032ba:	494c      	ldr	r1, [pc, #304]	; (1a0033ec <gpioInit+0x1a8>)
1a0032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0032c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0032c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0032c8:	2001      	movs	r0, #1
1a0032ca:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0032ce:	4c46      	ldr	r4, [pc, #280]	; (1a0033e8 <gpioInit+0x1a4>)
1a0032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0032d4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0032d8:	ea22 0201 	bic.w	r2, r2, r1
1a0032dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0032e0:	e7df      	b.n	1a0032a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0032e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0032ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0032ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0032f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0032f6:	493d      	ldr	r1, [pc, #244]	; (1a0033ec <gpioInit+0x1a8>)
1a0032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0032fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003300:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003304:	2001      	movs	r0, #1
1a003306:	fa00 f102 	lsl.w	r1, r0, r2
1a00330a:	4c37      	ldr	r4, [pc, #220]	; (1a0033e8 <gpioInit+0x1a4>)
1a00330c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003310:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003314:	ea22 0201 	bic.w	r2, r2, r1
1a003318:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00331c:	e7c1      	b.n	1a0032a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00331e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003322:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003326:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00332a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00332e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003332:	492e      	ldr	r1, [pc, #184]	; (1a0033ec <gpioInit+0x1a8>)
1a003334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003338:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00333c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003340:	2001      	movs	r0, #1
1a003342:	fa00 f102 	lsl.w	r1, r0, r2
1a003346:	4c28      	ldr	r4, [pc, #160]	; (1a0033e8 <gpioInit+0x1a4>)
1a003348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00334c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003350:	ea22 0201 	bic.w	r2, r2, r1
1a003354:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003358:	e7a3      	b.n	1a0032a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00335a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00335e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003362:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003366:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00336a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00336e:	491f      	ldr	r1, [pc, #124]	; (1a0033ec <gpioInit+0x1a8>)
1a003370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003374:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003378:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00337c:	2001      	movs	r0, #1
1a00337e:	fa00 f102 	lsl.w	r1, r0, r2
1a003382:	4c19      	ldr	r4, [pc, #100]	; (1a0033e8 <gpioInit+0x1a4>)
1a003384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003388:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00338c:	ea22 0201 	bic.w	r2, r2, r1
1a003390:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003394:	e785      	b.n	1a0032a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003396:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00339a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00339e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0033a2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0033a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0033aa:	4910      	ldr	r1, [pc, #64]	; (1a0033ec <gpioInit+0x1a8>)
1a0033ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0033b0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0033b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0033b8:	2001      	movs	r0, #1
1a0033ba:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0033be:	4b0a      	ldr	r3, [pc, #40]	; (1a0033e8 <gpioInit+0x1a4>)
1a0033c0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0033c4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0033c8:	4331      	orrs	r1, r6
1a0033ca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0033ce:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0033d0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0033d4:	2100      	movs	r1, #0
1a0033d6:	5499      	strb	r1, [r3, r2]
1a0033d8:	e763      	b.n	1a0032a2 <gpioInit+0x5e>
	  return FALSE;
1a0033da:	2000      	movs	r0, #0
1a0033dc:	4770      	bx	lr
	  return FALSE;
1a0033de:	2000      	movs	r0, #0
}
1a0033e0:	4770      	bx	lr
      ret_val = 0;
1a0033e2:	2000      	movs	r0, #0
1a0033e4:	e75d      	b.n	1a0032a2 <gpioInit+0x5e>
1a0033e6:	bf00      	nop
1a0033e8:	400f4000 	.word	0x400f4000
1a0033ec:	40086000 	.word	0x40086000

1a0033f0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0033f0:	f110 0f02 	cmn.w	r0, #2
1a0033f4:	d02d      	beq.n	1a003452 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0033f6:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0033fa:	d02c      	beq.n	1a003456 <gpioWrite+0x66>
{
1a0033fc:	b510      	push	{r4, lr}
1a0033fe:	b084      	sub	sp, #16
1a003400:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003402:	2300      	movs	r3, #0
1a003404:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003408:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00340c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003410:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003414:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003418:	f10d 030b 	add.w	r3, sp, #11
1a00341c:	9301      	str	r3, [sp, #4]
1a00341e:	ab03      	add	r3, sp, #12
1a003420:	9300      	str	r3, [sp, #0]
1a003422:	f10d 030d 	add.w	r3, sp, #13
1a003426:	f10d 020e 	add.w	r2, sp, #14
1a00342a:	f10d 010f 	add.w	r1, sp, #15
1a00342e:	f7ff feef 	bl	1a003210 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003432:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003436:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00343a:	1c21      	adds	r1, r4, #0
1a00343c:	bf18      	it	ne
1a00343e:	2101      	movne	r1, #1
1a003440:	015b      	lsls	r3, r3, #5
1a003442:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003446:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00344a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00344c:	2001      	movs	r0, #1
}
1a00344e:	b004      	add	sp, #16
1a003450:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003452:	2000      	movs	r0, #0
1a003454:	4770      	bx	lr
	  return FALSE;
1a003456:	2000      	movs	r0, #0
}
1a003458:	4770      	bx	lr

1a00345a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00345a:	f110 0f02 	cmn.w	r0, #2
1a00345e:	d02c      	beq.n	1a0034ba <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003460:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003464:	d02b      	beq.n	1a0034be <gpioRead+0x64>
{
1a003466:	b500      	push	{lr}
1a003468:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00346a:	2300      	movs	r3, #0
1a00346c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003470:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003474:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003478:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00347c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003480:	f10d 030b 	add.w	r3, sp, #11
1a003484:	9301      	str	r3, [sp, #4]
1a003486:	ab03      	add	r3, sp, #12
1a003488:	9300      	str	r3, [sp, #0]
1a00348a:	f10d 030d 	add.w	r3, sp, #13
1a00348e:	f10d 020e 	add.w	r2, sp, #14
1a003492:	f10d 010f 	add.w	r1, sp, #15
1a003496:	f7ff febb 	bl	1a003210 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00349a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00349e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0034a2:	015b      	lsls	r3, r3, #5
1a0034a4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0034a8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0034ac:	5c98      	ldrb	r0, [r3, r2]
1a0034ae:	3000      	adds	r0, #0
1a0034b0:	bf18      	it	ne
1a0034b2:	2001      	movne	r0, #1

   return ret_val;
}
1a0034b4:	b005      	add	sp, #20
1a0034b6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0034ba:	2001      	movs	r0, #1
1a0034bc:	4770      	bx	lr
      return FALSE;
1a0034be:	2000      	movs	r0, #0
}
1a0034c0:	4770      	bx	lr
1a0034c2:	Address 0x1a0034c2 is out of bounds.


1a0034c4 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0034c4:	b570      	push	{r4, r5, r6, lr}
1a0034c6:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = analogInput + 1;
1a0034c8:	3001      	adds	r0, #1
1a0034ca:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0034cc:	2600      	movs	r6, #0
1a0034ce:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0034d2:	4d11      	ldr	r5, [pc, #68]	; (1a003518 <adcRead+0x54>)
1a0034d4:	2201      	movs	r2, #1
1a0034d6:	4621      	mov	r1, r4
1a0034d8:	4628      	mov	r0, r5
1a0034da:	f7ff fa0f 	bl	1a0028fc <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0034de:	4632      	mov	r2, r6
1a0034e0:	2101      	movs	r1, #1
1a0034e2:	4628      	mov	r0, r5
1a0034e4:	f7ff f9db 	bl	1a00289e <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0034e8:	2200      	movs	r2, #0
1a0034ea:	4621      	mov	r1, r4
1a0034ec:	480a      	ldr	r0, [pc, #40]	; (1a003518 <adcRead+0x54>)
1a0034ee:	f7ff f9bb 	bl	1a002868 <Chip_ADC_ReadStatus>
   while(
1a0034f2:	2801      	cmp	r0, #1
1a0034f4:	d1f8      	bne.n	1a0034e8 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0034f6:	4d08      	ldr	r5, [pc, #32]	; (1a003518 <adcRead+0x54>)
1a0034f8:	f10d 0206 	add.w	r2, sp, #6
1a0034fc:	4621      	mov	r1, r4
1a0034fe:	4628      	mov	r0, r5
1a003500:	f7ff f9ae 	bl	1a002860 <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a003504:	2200      	movs	r2, #0
1a003506:	4621      	mov	r1, r4
1a003508:	4628      	mov	r0, r5
1a00350a:	f7ff f9f7 	bl	1a0028fc <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00350e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a003512:	b002      	add	sp, #8
1a003514:	bd70      	pop	{r4, r5, r6, pc}
1a003516:	bf00      	nop
1a003518:	400e3000 	.word	0x400e3000

1a00351c <spiRead>:
   return retVal;
}


bool_t spiRead( spiMap_t spi, uint8_t* buffer, uint32_t bufferSize )
{
1a00351c:	b500      	push	{lr}
1a00351e:	b087      	sub	sp, #28

   bool_t retVal = TRUE;

   Chip_SSP_DATA_SETUP_T xferConfig;

   xferConfig.tx_data = NULL;
1a003520:	2300      	movs	r3, #0
1a003522:	9301      	str	r3, [sp, #4]
   xferConfig.tx_cnt  = 0;
1a003524:	9302      	str	r3, [sp, #8]
   xferConfig.rx_data = buffer;
1a003526:	9103      	str	r1, [sp, #12]
   xferConfig.rx_cnt  = 0;
1a003528:	9304      	str	r3, [sp, #16]
   xferConfig.length  = bufferSize;
1a00352a:	9205      	str	r2, [sp, #20]

   if( spi == SPI0 ) {
1a00352c:	b118      	cbz	r0, 1a003536 <spiRead+0x1a>
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
   } else {
      retVal = FALSE;
1a00352e:	2000      	movs	r0, #0
   }

   return retVal;
}
1a003530:	b007      	add	sp, #28
1a003532:	f85d fb04 	ldr.w	pc, [sp], #4
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
1a003536:	a901      	add	r1, sp, #4
1a003538:	4802      	ldr	r0, [pc, #8]	; (1a003544 <spiRead+0x28>)
1a00353a:	f7ff f86c 	bl	1a002616 <Chip_SSP_RWFrames_Blocking>
   bool_t retVal = TRUE;
1a00353e:	2001      	movs	r0, #1
1a003540:	e7f6      	b.n	1a003530 <spiRead+0x14>
1a003542:	bf00      	nop
1a003544:	400c5000 	.word	0x400c5000

1a003548 <uartTxReady>:
}

// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003548:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00354c:	0083      	lsls	r3, r0, #2
1a00354e:	4a03      	ldr	r2, [pc, #12]	; (1a00355c <uartTxReady+0x14>)
1a003550:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003552:	6958      	ldr	r0, [r3, #20]
}
1a003554:	f000 0020 	and.w	r0, r0, #32
1a003558:	4770      	bx	lr
1a00355a:	bf00      	nop
1a00355c:	1a008894 	.word	0x1a008894

1a003560 <uartTxWrite>:
}

// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003560:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003564:	0083      	lsls	r3, r0, #2
1a003566:	4a02      	ldr	r2, [pc, #8]	; (1a003570 <uartTxWrite+0x10>)
1a003568:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00356a:	6019      	str	r1, [r3, #0]
}
1a00356c:	4770      	bx	lr
1a00356e:	bf00      	nop
1a003570:	1a008894 	.word	0x1a008894

1a003574 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003578:	4680      	mov	r8, r0
1a00357a:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00357c:	4c19      	ldr	r4, [pc, #100]	; (1a0035e4 <uartInit+0x70>)
1a00357e:	0045      	lsls	r5, r0, #1
1a003580:	182a      	adds	r2, r5, r0
1a003582:	0093      	lsls	r3, r2, #2
1a003584:	18e6      	adds	r6, r4, r3
1a003586:	58e7      	ldr	r7, [r4, r3]
1a003588:	4638      	mov	r0, r7
1a00358a:	f7ff fd5f 	bl	1a00304c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00358e:	4649      	mov	r1, r9
1a003590:	4638      	mov	r0, r7
1a003592:	f7ff fd85 	bl	1a0030a0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003596:	2307      	movs	r3, #7
1a003598:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00359a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00359c:	2301      	movs	r3, #1
1a00359e:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0035a0:	7930      	ldrb	r0, [r6, #4]
1a0035a2:	7973      	ldrb	r3, [r6, #5]
1a0035a4:	79b2      	ldrb	r2, [r6, #6]
1a0035a6:	f042 0218 	orr.w	r2, r2, #24
1a0035aa:	490f      	ldr	r1, [pc, #60]	; (1a0035e8 <uartInit+0x74>)
1a0035ac:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0035b4:	79f0      	ldrb	r0, [r6, #7]
1a0035b6:	7a33      	ldrb	r3, [r6, #8]
1a0035b8:	7a72      	ldrb	r2, [r6, #9]
1a0035ba:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0035be:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0035c6:	f1b8 0f01 	cmp.w	r8, #1
1a0035ca:	d001      	beq.n	1a0035d0 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0035cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0035d0:	4a06      	ldr	r2, [pc, #24]	; (1a0035ec <uartInit+0x78>)
1a0035d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0035d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0035d8:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0035da:	221a      	movs	r2, #26
1a0035dc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0035e0:	e7f4      	b.n	1a0035cc <uartInit+0x58>
1a0035e2:	bf00      	nop
1a0035e4:	1a008894 	.word	0x1a008894
1a0035e8:	40086000 	.word	0x40086000
1a0035ec:	40081000 	.word	0x40081000

1a0035f0 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0035f0:	b538      	push	{r3, r4, r5, lr}
1a0035f2:	4604      	mov	r4, r0
1a0035f4:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0035f6:	4620      	mov	r0, r4
1a0035f8:	f7ff ffa6 	bl	1a003548 <uartTxReady>
1a0035fc:	2800      	cmp	r0, #0
1a0035fe:	d0fa      	beq.n	1a0035f6 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a003600:	4629      	mov	r1, r5
1a003602:	4620      	mov	r0, r4
1a003604:	f7ff ffac 	bl	1a003560 <uartTxWrite>
}
1a003608:	bd38      	pop	{r3, r4, r5, pc}

1a00360a <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a00360a:	b538      	push	{r3, r4, r5, lr}
1a00360c:	4605      	mov	r5, r0
1a00360e:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003610:	7821      	ldrb	r1, [r4, #0]
1a003612:	b121      	cbz	r1, 1a00361e <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a003614:	4628      	mov	r0, r5
1a003616:	f7ff ffeb 	bl	1a0035f0 <uartWriteByte>
      str++;
1a00361a:	3401      	adds	r4, #1
1a00361c:	e7f8      	b.n	1a003610 <uartWriteString+0x6>
   }
}
1a00361e:	bd38      	pop	{r3, r4, r5, pc}

1a003620 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003620:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003622:	4b04      	ldr	r3, [pc, #16]	; (1a003634 <USB0_IRQHandler+0x14>)
1a003624:	681b      	ldr	r3, [r3, #0]
1a003626:	681b      	ldr	r3, [r3, #0]
1a003628:	68db      	ldr	r3, [r3, #12]
1a00362a:	4a03      	ldr	r2, [pc, #12]	; (1a003638 <USB0_IRQHandler+0x18>)
1a00362c:	6810      	ldr	r0, [r2, #0]
1a00362e:	4798      	blx	r3
}
1a003630:	bd08      	pop	{r3, pc}
1a003632:	bf00      	nop
1a003634:	100022c4 	.word	0x100022c4
1a003638:	10002270 	.word	0x10002270

1a00363c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00363c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00363e:	f7ff fa1f 	bl	1a002a80 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003642:	4b18      	ldr	r3, [pc, #96]	; (1a0036a4 <boardInit+0x68>)
1a003644:	6818      	ldr	r0, [r3, #0]
1a003646:	f7ff fdd5 	bl	1a0031f4 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00364a:	2105      	movs	r1, #5
1a00364c:	2000      	movs	r0, #0
1a00364e:	f7ff fdf9 	bl	1a003244 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003652:	2100      	movs	r1, #0
1a003654:	2024      	movs	r0, #36	; 0x24
1a003656:	f7ff fdf5 	bl	1a003244 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00365a:	2100      	movs	r1, #0
1a00365c:	2025      	movs	r0, #37	; 0x25
1a00365e:	f7ff fdf1 	bl	1a003244 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003662:	2100      	movs	r1, #0
1a003664:	2026      	movs	r0, #38	; 0x26
1a003666:	f7ff fded 	bl	1a003244 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00366a:	2100      	movs	r1, #0
1a00366c:	2027      	movs	r0, #39	; 0x27
1a00366e:	f7ff fde9 	bl	1a003244 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003672:	2101      	movs	r1, #1
1a003674:	2028      	movs	r0, #40	; 0x28
1a003676:	f7ff fde5 	bl	1a003244 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00367a:	2101      	movs	r1, #1
1a00367c:	2029      	movs	r0, #41	; 0x29
1a00367e:	f7ff fde1 	bl	1a003244 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003682:	2101      	movs	r1, #1
1a003684:	202a      	movs	r0, #42	; 0x2a
1a003686:	f7ff fddd 	bl	1a003244 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00368a:	2101      	movs	r1, #1
1a00368c:	202b      	movs	r0, #43	; 0x2b
1a00368e:	f7ff fdd9 	bl	1a003244 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003692:	2101      	movs	r1, #1
1a003694:	202c      	movs	r0, #44	; 0x2c
1a003696:	f7ff fdd5 	bl	1a003244 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00369a:	2101      	movs	r1, #1
1a00369c:	202d      	movs	r0, #45	; 0x2d
1a00369e:	f7ff fdd1 	bl	1a003244 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0036a2:	bd08      	pop	{r3, pc}
1a0036a4:	100022c0 	.word	0x100022c0

1a0036a8 <__aeabi_drsub>:
1a0036a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0036ac:	e002      	b.n	1a0036b4 <__adddf3>
1a0036ae:	bf00      	nop

1a0036b0 <__aeabi_dsub>:
1a0036b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0036b4 <__adddf3>:
1a0036b4:	b530      	push	{r4, r5, lr}
1a0036b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0036ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0036be:	ea94 0f05 	teq	r4, r5
1a0036c2:	bf08      	it	eq
1a0036c4:	ea90 0f02 	teqeq	r0, r2
1a0036c8:	bf1f      	itttt	ne
1a0036ca:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0036ce:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0036d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0036d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0036da:	f000 80e2 	beq.w	1a0038a2 <__adddf3+0x1ee>
1a0036de:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0036e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0036e6:	bfb8      	it	lt
1a0036e8:	426d      	neglt	r5, r5
1a0036ea:	dd0c      	ble.n	1a003706 <__adddf3+0x52>
1a0036ec:	442c      	add	r4, r5
1a0036ee:	ea80 0202 	eor.w	r2, r0, r2
1a0036f2:	ea81 0303 	eor.w	r3, r1, r3
1a0036f6:	ea82 0000 	eor.w	r0, r2, r0
1a0036fa:	ea83 0101 	eor.w	r1, r3, r1
1a0036fe:	ea80 0202 	eor.w	r2, r0, r2
1a003702:	ea81 0303 	eor.w	r3, r1, r3
1a003706:	2d36      	cmp	r5, #54	; 0x36
1a003708:	bf88      	it	hi
1a00370a:	bd30      	pophi	{r4, r5, pc}
1a00370c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003710:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003714:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a003718:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00371c:	d002      	beq.n	1a003724 <__adddf3+0x70>
1a00371e:	4240      	negs	r0, r0
1a003720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003724:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a003728:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00372c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a003730:	d002      	beq.n	1a003738 <__adddf3+0x84>
1a003732:	4252      	negs	r2, r2
1a003734:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003738:	ea94 0f05 	teq	r4, r5
1a00373c:	f000 80a7 	beq.w	1a00388e <__adddf3+0x1da>
1a003740:	f1a4 0401 	sub.w	r4, r4, #1
1a003744:	f1d5 0e20 	rsbs	lr, r5, #32
1a003748:	db0d      	blt.n	1a003766 <__adddf3+0xb2>
1a00374a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00374e:	fa22 f205 	lsr.w	r2, r2, r5
1a003752:	1880      	adds	r0, r0, r2
1a003754:	f141 0100 	adc.w	r1, r1, #0
1a003758:	fa03 f20e 	lsl.w	r2, r3, lr
1a00375c:	1880      	adds	r0, r0, r2
1a00375e:	fa43 f305 	asr.w	r3, r3, r5
1a003762:	4159      	adcs	r1, r3
1a003764:	e00e      	b.n	1a003784 <__adddf3+0xd0>
1a003766:	f1a5 0520 	sub.w	r5, r5, #32
1a00376a:	f10e 0e20 	add.w	lr, lr, #32
1a00376e:	2a01      	cmp	r2, #1
1a003770:	fa03 fc0e 	lsl.w	ip, r3, lr
1a003774:	bf28      	it	cs
1a003776:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00377a:	fa43 f305 	asr.w	r3, r3, r5
1a00377e:	18c0      	adds	r0, r0, r3
1a003780:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a003784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003788:	d507      	bpl.n	1a00379a <__adddf3+0xe6>
1a00378a:	f04f 0e00 	mov.w	lr, #0
1a00378e:	f1dc 0c00 	rsbs	ip, ip, #0
1a003792:	eb7e 0000 	sbcs.w	r0, lr, r0
1a003796:	eb6e 0101 	sbc.w	r1, lr, r1
1a00379a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00379e:	d31b      	bcc.n	1a0037d8 <__adddf3+0x124>
1a0037a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0037a4:	d30c      	bcc.n	1a0037c0 <__adddf3+0x10c>
1a0037a6:	0849      	lsrs	r1, r1, #1
1a0037a8:	ea5f 0030 	movs.w	r0, r0, rrx
1a0037ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0037b0:	f104 0401 	add.w	r4, r4, #1
1a0037b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0037b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0037bc:	f080 809a 	bcs.w	1a0038f4 <__adddf3+0x240>
1a0037c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0037c4:	bf08      	it	eq
1a0037c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0037ca:	f150 0000 	adcs.w	r0, r0, #0
1a0037ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0037d2:	ea41 0105 	orr.w	r1, r1, r5
1a0037d6:	bd30      	pop	{r4, r5, pc}
1a0037d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0037dc:	4140      	adcs	r0, r0
1a0037de:	eb41 0101 	adc.w	r1, r1, r1
1a0037e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0037e6:	f1a4 0401 	sub.w	r4, r4, #1
1a0037ea:	d1e9      	bne.n	1a0037c0 <__adddf3+0x10c>
1a0037ec:	f091 0f00 	teq	r1, #0
1a0037f0:	bf04      	itt	eq
1a0037f2:	4601      	moveq	r1, r0
1a0037f4:	2000      	moveq	r0, #0
1a0037f6:	fab1 f381 	clz	r3, r1
1a0037fa:	bf08      	it	eq
1a0037fc:	3320      	addeq	r3, #32
1a0037fe:	f1a3 030b 	sub.w	r3, r3, #11
1a003802:	f1b3 0220 	subs.w	r2, r3, #32
1a003806:	da0c      	bge.n	1a003822 <__adddf3+0x16e>
1a003808:	320c      	adds	r2, #12
1a00380a:	dd08      	ble.n	1a00381e <__adddf3+0x16a>
1a00380c:	f102 0c14 	add.w	ip, r2, #20
1a003810:	f1c2 020c 	rsb	r2, r2, #12
1a003814:	fa01 f00c 	lsl.w	r0, r1, ip
1a003818:	fa21 f102 	lsr.w	r1, r1, r2
1a00381c:	e00c      	b.n	1a003838 <__adddf3+0x184>
1a00381e:	f102 0214 	add.w	r2, r2, #20
1a003822:	bfd8      	it	le
1a003824:	f1c2 0c20 	rsble	ip, r2, #32
1a003828:	fa01 f102 	lsl.w	r1, r1, r2
1a00382c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a003830:	bfdc      	itt	le
1a003832:	ea41 010c 	orrle.w	r1, r1, ip
1a003836:	4090      	lslle	r0, r2
1a003838:	1ae4      	subs	r4, r4, r3
1a00383a:	bfa2      	ittt	ge
1a00383c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a003840:	4329      	orrge	r1, r5
1a003842:	bd30      	popge	{r4, r5, pc}
1a003844:	ea6f 0404 	mvn.w	r4, r4
1a003848:	3c1f      	subs	r4, #31
1a00384a:	da1c      	bge.n	1a003886 <__adddf3+0x1d2>
1a00384c:	340c      	adds	r4, #12
1a00384e:	dc0e      	bgt.n	1a00386e <__adddf3+0x1ba>
1a003850:	f104 0414 	add.w	r4, r4, #20
1a003854:	f1c4 0220 	rsb	r2, r4, #32
1a003858:	fa20 f004 	lsr.w	r0, r0, r4
1a00385c:	fa01 f302 	lsl.w	r3, r1, r2
1a003860:	ea40 0003 	orr.w	r0, r0, r3
1a003864:	fa21 f304 	lsr.w	r3, r1, r4
1a003868:	ea45 0103 	orr.w	r1, r5, r3
1a00386c:	bd30      	pop	{r4, r5, pc}
1a00386e:	f1c4 040c 	rsb	r4, r4, #12
1a003872:	f1c4 0220 	rsb	r2, r4, #32
1a003876:	fa20 f002 	lsr.w	r0, r0, r2
1a00387a:	fa01 f304 	lsl.w	r3, r1, r4
1a00387e:	ea40 0003 	orr.w	r0, r0, r3
1a003882:	4629      	mov	r1, r5
1a003884:	bd30      	pop	{r4, r5, pc}
1a003886:	fa21 f004 	lsr.w	r0, r1, r4
1a00388a:	4629      	mov	r1, r5
1a00388c:	bd30      	pop	{r4, r5, pc}
1a00388e:	f094 0f00 	teq	r4, #0
1a003892:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a003896:	bf06      	itte	eq
1a003898:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00389c:	3401      	addeq	r4, #1
1a00389e:	3d01      	subne	r5, #1
1a0038a0:	e74e      	b.n	1a003740 <__adddf3+0x8c>
1a0038a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0038a6:	bf18      	it	ne
1a0038a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0038ac:	d029      	beq.n	1a003902 <__adddf3+0x24e>
1a0038ae:	ea94 0f05 	teq	r4, r5
1a0038b2:	bf08      	it	eq
1a0038b4:	ea90 0f02 	teqeq	r0, r2
1a0038b8:	d005      	beq.n	1a0038c6 <__adddf3+0x212>
1a0038ba:	ea54 0c00 	orrs.w	ip, r4, r0
1a0038be:	bf04      	itt	eq
1a0038c0:	4619      	moveq	r1, r3
1a0038c2:	4610      	moveq	r0, r2
1a0038c4:	bd30      	pop	{r4, r5, pc}
1a0038c6:	ea91 0f03 	teq	r1, r3
1a0038ca:	bf1e      	ittt	ne
1a0038cc:	2100      	movne	r1, #0
1a0038ce:	2000      	movne	r0, #0
1a0038d0:	bd30      	popne	{r4, r5, pc}
1a0038d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0038d6:	d105      	bne.n	1a0038e4 <__adddf3+0x230>
1a0038d8:	0040      	lsls	r0, r0, #1
1a0038da:	4149      	adcs	r1, r1
1a0038dc:	bf28      	it	cs
1a0038de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0038e2:	bd30      	pop	{r4, r5, pc}
1a0038e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0038e8:	bf3c      	itt	cc
1a0038ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0038ee:	bd30      	popcc	{r4, r5, pc}
1a0038f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0038f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0038f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0038fc:	f04f 0000 	mov.w	r0, #0
1a003900:	bd30      	pop	{r4, r5, pc}
1a003902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003906:	bf1a      	itte	ne
1a003908:	4619      	movne	r1, r3
1a00390a:	4610      	movne	r0, r2
1a00390c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a003910:	bf1c      	itt	ne
1a003912:	460b      	movne	r3, r1
1a003914:	4602      	movne	r2, r0
1a003916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00391a:	bf06      	itte	eq
1a00391c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a003920:	ea91 0f03 	teqeq	r1, r3
1a003924:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a003928:	bd30      	pop	{r4, r5, pc}
1a00392a:	bf00      	nop

1a00392c <__aeabi_ui2d>:
1a00392c:	f090 0f00 	teq	r0, #0
1a003930:	bf04      	itt	eq
1a003932:	2100      	moveq	r1, #0
1a003934:	4770      	bxeq	lr
1a003936:	b530      	push	{r4, r5, lr}
1a003938:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00393c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003940:	f04f 0500 	mov.w	r5, #0
1a003944:	f04f 0100 	mov.w	r1, #0
1a003948:	e750      	b.n	1a0037ec <__adddf3+0x138>
1a00394a:	bf00      	nop

1a00394c <__aeabi_i2d>:
1a00394c:	f090 0f00 	teq	r0, #0
1a003950:	bf04      	itt	eq
1a003952:	2100      	moveq	r1, #0
1a003954:	4770      	bxeq	lr
1a003956:	b530      	push	{r4, r5, lr}
1a003958:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00395c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003960:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a003964:	bf48      	it	mi
1a003966:	4240      	negmi	r0, r0
1a003968:	f04f 0100 	mov.w	r1, #0
1a00396c:	e73e      	b.n	1a0037ec <__adddf3+0x138>
1a00396e:	bf00      	nop

1a003970 <__aeabi_f2d>:
1a003970:	0042      	lsls	r2, r0, #1
1a003972:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a003976:	ea4f 0131 	mov.w	r1, r1, rrx
1a00397a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00397e:	bf1f      	itttt	ne
1a003980:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a003984:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a003988:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00398c:	4770      	bxne	lr
1a00398e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a003992:	bf08      	it	eq
1a003994:	4770      	bxeq	lr
1a003996:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00399a:	bf04      	itt	eq
1a00399c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0039a0:	4770      	bxeq	lr
1a0039a2:	b530      	push	{r4, r5, lr}
1a0039a4:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0039a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0039ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0039b0:	e71c      	b.n	1a0037ec <__adddf3+0x138>
1a0039b2:	bf00      	nop

1a0039b4 <__aeabi_ul2d>:
1a0039b4:	ea50 0201 	orrs.w	r2, r0, r1
1a0039b8:	bf08      	it	eq
1a0039ba:	4770      	bxeq	lr
1a0039bc:	b530      	push	{r4, r5, lr}
1a0039be:	f04f 0500 	mov.w	r5, #0
1a0039c2:	e00a      	b.n	1a0039da <__aeabi_l2d+0x16>

1a0039c4 <__aeabi_l2d>:
1a0039c4:	ea50 0201 	orrs.w	r2, r0, r1
1a0039c8:	bf08      	it	eq
1a0039ca:	4770      	bxeq	lr
1a0039cc:	b530      	push	{r4, r5, lr}
1a0039ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0039d2:	d502      	bpl.n	1a0039da <__aeabi_l2d+0x16>
1a0039d4:	4240      	negs	r0, r0
1a0039d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0039da:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0039de:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0039e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0039e6:	f43f aed8 	beq.w	1a00379a <__adddf3+0xe6>
1a0039ea:	f04f 0203 	mov.w	r2, #3
1a0039ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0039f2:	bf18      	it	ne
1a0039f4:	3203      	addne	r2, #3
1a0039f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0039fa:	bf18      	it	ne
1a0039fc:	3203      	addne	r2, #3
1a0039fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a003a02:	f1c2 0320 	rsb	r3, r2, #32
1a003a06:	fa00 fc03 	lsl.w	ip, r0, r3
1a003a0a:	fa20 f002 	lsr.w	r0, r0, r2
1a003a0e:	fa01 fe03 	lsl.w	lr, r1, r3
1a003a12:	ea40 000e 	orr.w	r0, r0, lr
1a003a16:	fa21 f102 	lsr.w	r1, r1, r2
1a003a1a:	4414      	add	r4, r2
1a003a1c:	e6bd      	b.n	1a00379a <__adddf3+0xe6>
1a003a1e:	bf00      	nop

1a003a20 <__aeabi_dmul>:
1a003a20:	b570      	push	{r4, r5, r6, lr}
1a003a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003a2e:	bf1d      	ittte	ne
1a003a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003a34:	ea94 0f0c 	teqne	r4, ip
1a003a38:	ea95 0f0c 	teqne	r5, ip
1a003a3c:	f000 f8de 	bleq	1a003bfc <__aeabi_dmul+0x1dc>
1a003a40:	442c      	add	r4, r5
1a003a42:	ea81 0603 	eor.w	r6, r1, r3
1a003a46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a003a4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a003a4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a003a52:	bf18      	it	ne
1a003a54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a003a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a003a60:	d038      	beq.n	1a003ad4 <__aeabi_dmul+0xb4>
1a003a62:	fba0 ce02 	umull	ip, lr, r0, r2
1a003a66:	f04f 0500 	mov.w	r5, #0
1a003a6a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a003a6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a003a72:	fbe0 e503 	umlal	lr, r5, r0, r3
1a003a76:	f04f 0600 	mov.w	r6, #0
1a003a7a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a003a7e:	f09c 0f00 	teq	ip, #0
1a003a82:	bf18      	it	ne
1a003a84:	f04e 0e01 	orrne.w	lr, lr, #1
1a003a88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a003a8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a003a90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a003a94:	d204      	bcs.n	1a003aa0 <__aeabi_dmul+0x80>
1a003a96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a003a9a:	416d      	adcs	r5, r5
1a003a9c:	eb46 0606 	adc.w	r6, r6, r6
1a003aa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a003aa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a003aa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a003aac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a003ab0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a003ab4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003ab8:	bf88      	it	hi
1a003aba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003abe:	d81e      	bhi.n	1a003afe <__aeabi_dmul+0xde>
1a003ac0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a003ac4:	bf08      	it	eq
1a003ac6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a003aca:	f150 0000 	adcs.w	r0, r0, #0
1a003ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003ad2:	bd70      	pop	{r4, r5, r6, pc}
1a003ad4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a003ad8:	ea46 0101 	orr.w	r1, r6, r1
1a003adc:	ea40 0002 	orr.w	r0, r0, r2
1a003ae0:	ea81 0103 	eor.w	r1, r1, r3
1a003ae4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a003ae8:	bfc2      	ittt	gt
1a003aea:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003af2:	bd70      	popgt	{r4, r5, r6, pc}
1a003af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003af8:	f04f 0e00 	mov.w	lr, #0
1a003afc:	3c01      	subs	r4, #1
1a003afe:	f300 80ab 	bgt.w	1a003c58 <__aeabi_dmul+0x238>
1a003b02:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a003b06:	bfde      	ittt	le
1a003b08:	2000      	movle	r0, #0
1a003b0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a003b0e:	bd70      	pople	{r4, r5, r6, pc}
1a003b10:	f1c4 0400 	rsb	r4, r4, #0
1a003b14:	3c20      	subs	r4, #32
1a003b16:	da35      	bge.n	1a003b84 <__aeabi_dmul+0x164>
1a003b18:	340c      	adds	r4, #12
1a003b1a:	dc1b      	bgt.n	1a003b54 <__aeabi_dmul+0x134>
1a003b1c:	f104 0414 	add.w	r4, r4, #20
1a003b20:	f1c4 0520 	rsb	r5, r4, #32
1a003b24:	fa00 f305 	lsl.w	r3, r0, r5
1a003b28:	fa20 f004 	lsr.w	r0, r0, r4
1a003b2c:	fa01 f205 	lsl.w	r2, r1, r5
1a003b30:	ea40 0002 	orr.w	r0, r0, r2
1a003b34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a003b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003b40:	fa21 f604 	lsr.w	r6, r1, r4
1a003b44:	eb42 0106 	adc.w	r1, r2, r6
1a003b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003b4c:	bf08      	it	eq
1a003b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003b52:	bd70      	pop	{r4, r5, r6, pc}
1a003b54:	f1c4 040c 	rsb	r4, r4, #12
1a003b58:	f1c4 0520 	rsb	r5, r4, #32
1a003b5c:	fa00 f304 	lsl.w	r3, r0, r4
1a003b60:	fa20 f005 	lsr.w	r0, r0, r5
1a003b64:	fa01 f204 	lsl.w	r2, r1, r4
1a003b68:	ea40 0002 	orr.w	r0, r0, r2
1a003b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003b74:	f141 0100 	adc.w	r1, r1, #0
1a003b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003b7c:	bf08      	it	eq
1a003b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003b82:	bd70      	pop	{r4, r5, r6, pc}
1a003b84:	f1c4 0520 	rsb	r5, r4, #32
1a003b88:	fa00 f205 	lsl.w	r2, r0, r5
1a003b8c:	ea4e 0e02 	orr.w	lr, lr, r2
1a003b90:	fa20 f304 	lsr.w	r3, r0, r4
1a003b94:	fa01 f205 	lsl.w	r2, r1, r5
1a003b98:	ea43 0302 	orr.w	r3, r3, r2
1a003b9c:	fa21 f004 	lsr.w	r0, r1, r4
1a003ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003ba4:	fa21 f204 	lsr.w	r2, r1, r4
1a003ba8:	ea20 0002 	bic.w	r0, r0, r2
1a003bac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003bb4:	bf08      	it	eq
1a003bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003bba:	bd70      	pop	{r4, r5, r6, pc}
1a003bbc:	f094 0f00 	teq	r4, #0
1a003bc0:	d10f      	bne.n	1a003be2 <__aeabi_dmul+0x1c2>
1a003bc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a003bc6:	0040      	lsls	r0, r0, #1
1a003bc8:	eb41 0101 	adc.w	r1, r1, r1
1a003bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003bd0:	bf08      	it	eq
1a003bd2:	3c01      	subeq	r4, #1
1a003bd4:	d0f7      	beq.n	1a003bc6 <__aeabi_dmul+0x1a6>
1a003bd6:	ea41 0106 	orr.w	r1, r1, r6
1a003bda:	f095 0f00 	teq	r5, #0
1a003bde:	bf18      	it	ne
1a003be0:	4770      	bxne	lr
1a003be2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a003be6:	0052      	lsls	r2, r2, #1
1a003be8:	eb43 0303 	adc.w	r3, r3, r3
1a003bec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003bf0:	bf08      	it	eq
1a003bf2:	3d01      	subeq	r5, #1
1a003bf4:	d0f7      	beq.n	1a003be6 <__aeabi_dmul+0x1c6>
1a003bf6:	ea43 0306 	orr.w	r3, r3, r6
1a003bfa:	4770      	bx	lr
1a003bfc:	ea94 0f0c 	teq	r4, ip
1a003c00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003c04:	bf18      	it	ne
1a003c06:	ea95 0f0c 	teqne	r5, ip
1a003c0a:	d00c      	beq.n	1a003c26 <__aeabi_dmul+0x206>
1a003c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003c10:	bf18      	it	ne
1a003c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003c16:	d1d1      	bne.n	1a003bbc <__aeabi_dmul+0x19c>
1a003c18:	ea81 0103 	eor.w	r1, r1, r3
1a003c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003c20:	f04f 0000 	mov.w	r0, #0
1a003c24:	bd70      	pop	{r4, r5, r6, pc}
1a003c26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003c2a:	bf06      	itte	eq
1a003c2c:	4610      	moveq	r0, r2
1a003c2e:	4619      	moveq	r1, r3
1a003c30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003c34:	d019      	beq.n	1a003c6a <__aeabi_dmul+0x24a>
1a003c36:	ea94 0f0c 	teq	r4, ip
1a003c3a:	d102      	bne.n	1a003c42 <__aeabi_dmul+0x222>
1a003c3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a003c40:	d113      	bne.n	1a003c6a <__aeabi_dmul+0x24a>
1a003c42:	ea95 0f0c 	teq	r5, ip
1a003c46:	d105      	bne.n	1a003c54 <__aeabi_dmul+0x234>
1a003c48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a003c4c:	bf1c      	itt	ne
1a003c4e:	4610      	movne	r0, r2
1a003c50:	4619      	movne	r1, r3
1a003c52:	d10a      	bne.n	1a003c6a <__aeabi_dmul+0x24a>
1a003c54:	ea81 0103 	eor.w	r1, r1, r3
1a003c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003c5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003c64:	f04f 0000 	mov.w	r0, #0
1a003c68:	bd70      	pop	{r4, r5, r6, pc}
1a003c6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003c6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a003c72:	bd70      	pop	{r4, r5, r6, pc}

1a003c74 <__aeabi_ddiv>:
1a003c74:	b570      	push	{r4, r5, r6, lr}
1a003c76:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003c7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003c7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003c82:	bf1d      	ittte	ne
1a003c84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003c88:	ea94 0f0c 	teqne	r4, ip
1a003c8c:	ea95 0f0c 	teqne	r5, ip
1a003c90:	f000 f8a7 	bleq	1a003de2 <__aeabi_ddiv+0x16e>
1a003c94:	eba4 0405 	sub.w	r4, r4, r5
1a003c98:	ea81 0e03 	eor.w	lr, r1, r3
1a003c9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003ca4:	f000 8088 	beq.w	1a003db8 <__aeabi_ddiv+0x144>
1a003ca8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003cac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003cb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a003cb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a003cb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003cbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003cc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a003cc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a003cc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003ccc:	429d      	cmp	r5, r3
1a003cce:	bf08      	it	eq
1a003cd0:	4296      	cmpeq	r6, r2
1a003cd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a003cd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a003cda:	d202      	bcs.n	1a003ce2 <__aeabi_ddiv+0x6e>
1a003cdc:	085b      	lsrs	r3, r3, #1
1a003cde:	ea4f 0232 	mov.w	r2, r2, rrx
1a003ce2:	1ab6      	subs	r6, r6, r2
1a003ce4:	eb65 0503 	sbc.w	r5, r5, r3
1a003ce8:	085b      	lsrs	r3, r3, #1
1a003cea:	ea4f 0232 	mov.w	r2, r2, rrx
1a003cee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a003cf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a003cf6:	ebb6 0e02 	subs.w	lr, r6, r2
1a003cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003cfe:	bf22      	ittt	cs
1a003d00:	1ab6      	subcs	r6, r6, r2
1a003d02:	4675      	movcs	r5, lr
1a003d04:	ea40 000c 	orrcs.w	r0, r0, ip
1a003d08:	085b      	lsrs	r3, r3, #1
1a003d0a:	ea4f 0232 	mov.w	r2, r2, rrx
1a003d0e:	ebb6 0e02 	subs.w	lr, r6, r2
1a003d12:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003d16:	bf22      	ittt	cs
1a003d18:	1ab6      	subcs	r6, r6, r2
1a003d1a:	4675      	movcs	r5, lr
1a003d1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003d20:	085b      	lsrs	r3, r3, #1
1a003d22:	ea4f 0232 	mov.w	r2, r2, rrx
1a003d26:	ebb6 0e02 	subs.w	lr, r6, r2
1a003d2a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003d2e:	bf22      	ittt	cs
1a003d30:	1ab6      	subcs	r6, r6, r2
1a003d32:	4675      	movcs	r5, lr
1a003d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003d38:	085b      	lsrs	r3, r3, #1
1a003d3a:	ea4f 0232 	mov.w	r2, r2, rrx
1a003d3e:	ebb6 0e02 	subs.w	lr, r6, r2
1a003d42:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003d46:	bf22      	ittt	cs
1a003d48:	1ab6      	subcs	r6, r6, r2
1a003d4a:	4675      	movcs	r5, lr
1a003d4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a003d50:	ea55 0e06 	orrs.w	lr, r5, r6
1a003d54:	d018      	beq.n	1a003d88 <__aeabi_ddiv+0x114>
1a003d56:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a003d5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a003d5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a003d62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a003d66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a003d6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a003d6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a003d72:	d1c0      	bne.n	1a003cf6 <__aeabi_ddiv+0x82>
1a003d74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003d78:	d10b      	bne.n	1a003d92 <__aeabi_ddiv+0x11e>
1a003d7a:	ea41 0100 	orr.w	r1, r1, r0
1a003d7e:	f04f 0000 	mov.w	r0, #0
1a003d82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a003d86:	e7b6      	b.n	1a003cf6 <__aeabi_ddiv+0x82>
1a003d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003d8c:	bf04      	itt	eq
1a003d8e:	4301      	orreq	r1, r0
1a003d90:	2000      	moveq	r0, #0
1a003d92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003d96:	bf88      	it	hi
1a003d98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003d9c:	f63f aeaf 	bhi.w	1a003afe <__aeabi_dmul+0xde>
1a003da0:	ebb5 0c03 	subs.w	ip, r5, r3
1a003da4:	bf04      	itt	eq
1a003da6:	ebb6 0c02 	subseq.w	ip, r6, r2
1a003daa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003dae:	f150 0000 	adcs.w	r0, r0, #0
1a003db2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003db6:	bd70      	pop	{r4, r5, r6, pc}
1a003db8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003dbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003dc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003dc4:	bfc2      	ittt	gt
1a003dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003dce:	bd70      	popgt	{r4, r5, r6, pc}
1a003dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003dd4:	f04f 0e00 	mov.w	lr, #0
1a003dd8:	3c01      	subs	r4, #1
1a003dda:	e690      	b.n	1a003afe <__aeabi_dmul+0xde>
1a003ddc:	ea45 0e06 	orr.w	lr, r5, r6
1a003de0:	e68d      	b.n	1a003afe <__aeabi_dmul+0xde>
1a003de2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003de6:	ea94 0f0c 	teq	r4, ip
1a003dea:	bf08      	it	eq
1a003dec:	ea95 0f0c 	teqeq	r5, ip
1a003df0:	f43f af3b 	beq.w	1a003c6a <__aeabi_dmul+0x24a>
1a003df4:	ea94 0f0c 	teq	r4, ip
1a003df8:	d10a      	bne.n	1a003e10 <__aeabi_ddiv+0x19c>
1a003dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003dfe:	f47f af34 	bne.w	1a003c6a <__aeabi_dmul+0x24a>
1a003e02:	ea95 0f0c 	teq	r5, ip
1a003e06:	f47f af25 	bne.w	1a003c54 <__aeabi_dmul+0x234>
1a003e0a:	4610      	mov	r0, r2
1a003e0c:	4619      	mov	r1, r3
1a003e0e:	e72c      	b.n	1a003c6a <__aeabi_dmul+0x24a>
1a003e10:	ea95 0f0c 	teq	r5, ip
1a003e14:	d106      	bne.n	1a003e24 <__aeabi_ddiv+0x1b0>
1a003e16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003e1a:	f43f aefd 	beq.w	1a003c18 <__aeabi_dmul+0x1f8>
1a003e1e:	4610      	mov	r0, r2
1a003e20:	4619      	mov	r1, r3
1a003e22:	e722      	b.n	1a003c6a <__aeabi_dmul+0x24a>
1a003e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003e28:	bf18      	it	ne
1a003e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003e2e:	f47f aec5 	bne.w	1a003bbc <__aeabi_dmul+0x19c>
1a003e32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a003e36:	f47f af0d 	bne.w	1a003c54 <__aeabi_dmul+0x234>
1a003e3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003e3e:	f47f aeeb 	bne.w	1a003c18 <__aeabi_dmul+0x1f8>
1a003e42:	e712      	b.n	1a003c6a <__aeabi_dmul+0x24a>

1a003e44 <__aeabi_d2iz>:
1a003e44:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a003e48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a003e4c:	d215      	bcs.n	1a003e7a <__aeabi_d2iz+0x36>
1a003e4e:	d511      	bpl.n	1a003e74 <__aeabi_d2iz+0x30>
1a003e50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a003e54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a003e58:	d912      	bls.n	1a003e80 <__aeabi_d2iz+0x3c>
1a003e5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a003e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a003e62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a003e66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003e6a:	fa23 f002 	lsr.w	r0, r3, r2
1a003e6e:	bf18      	it	ne
1a003e70:	4240      	negne	r0, r0
1a003e72:	4770      	bx	lr
1a003e74:	f04f 0000 	mov.w	r0, #0
1a003e78:	4770      	bx	lr
1a003e7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a003e7e:	d105      	bne.n	1a003e8c <__aeabi_d2iz+0x48>
1a003e80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a003e84:	bf08      	it	eq
1a003e86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a003e8a:	4770      	bx	lr
1a003e8c:	f04f 0000 	mov.w	r0, #0
1a003e90:	4770      	bx	lr
1a003e92:	bf00      	nop

1a003e94 <__aeabi_uldivmod>:
1a003e94:	b953      	cbnz	r3, 1a003eac <__aeabi_uldivmod+0x18>
1a003e96:	b94a      	cbnz	r2, 1a003eac <__aeabi_uldivmod+0x18>
1a003e98:	2900      	cmp	r1, #0
1a003e9a:	bf08      	it	eq
1a003e9c:	2800      	cmpeq	r0, #0
1a003e9e:	bf1c      	itt	ne
1a003ea0:	f04f 31ff 	movne.w	r1, #4294967295
1a003ea4:	f04f 30ff 	movne.w	r0, #4294967295
1a003ea8:	f000 b974 	b.w	1a004194 <__aeabi_idiv0>
1a003eac:	f1ad 0c08 	sub.w	ip, sp, #8
1a003eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003eb4:	f000 f806 	bl	1a003ec4 <__udivmoddi4>
1a003eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003ec0:	b004      	add	sp, #16
1a003ec2:	4770      	bx	lr

1a003ec4 <__udivmoddi4>:
1a003ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003ec8:	9e08      	ldr	r6, [sp, #32]
1a003eca:	4604      	mov	r4, r0
1a003ecc:	4688      	mov	r8, r1
1a003ece:	2b00      	cmp	r3, #0
1a003ed0:	f040 8085 	bne.w	1a003fde <__udivmoddi4+0x11a>
1a003ed4:	428a      	cmp	r2, r1
1a003ed6:	4615      	mov	r5, r2
1a003ed8:	d948      	bls.n	1a003f6c <__udivmoddi4+0xa8>
1a003eda:	fab2 f282 	clz	r2, r2
1a003ede:	b14a      	cbz	r2, 1a003ef4 <__udivmoddi4+0x30>
1a003ee0:	f1c2 0720 	rsb	r7, r2, #32
1a003ee4:	fa01 f302 	lsl.w	r3, r1, r2
1a003ee8:	fa20 f707 	lsr.w	r7, r0, r7
1a003eec:	4095      	lsls	r5, r2
1a003eee:	ea47 0803 	orr.w	r8, r7, r3
1a003ef2:	4094      	lsls	r4, r2
1a003ef4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003ef8:	0c23      	lsrs	r3, r4, #16
1a003efa:	fbb8 f7fe 	udiv	r7, r8, lr
1a003efe:	fa1f fc85 	uxth.w	ip, r5
1a003f02:	fb0e 8817 	mls	r8, lr, r7, r8
1a003f06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003f0a:	fb07 f10c 	mul.w	r1, r7, ip
1a003f0e:	4299      	cmp	r1, r3
1a003f10:	d909      	bls.n	1a003f26 <__udivmoddi4+0x62>
1a003f12:	18eb      	adds	r3, r5, r3
1a003f14:	f107 30ff 	add.w	r0, r7, #4294967295
1a003f18:	f080 80e3 	bcs.w	1a0040e2 <__udivmoddi4+0x21e>
1a003f1c:	4299      	cmp	r1, r3
1a003f1e:	f240 80e0 	bls.w	1a0040e2 <__udivmoddi4+0x21e>
1a003f22:	3f02      	subs	r7, #2
1a003f24:	442b      	add	r3, r5
1a003f26:	1a5b      	subs	r3, r3, r1
1a003f28:	b2a4      	uxth	r4, r4
1a003f2a:	fbb3 f0fe 	udiv	r0, r3, lr
1a003f2e:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f32:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003f36:	fb00 fc0c 	mul.w	ip, r0, ip
1a003f3a:	45a4      	cmp	ip, r4
1a003f3c:	d909      	bls.n	1a003f52 <__udivmoddi4+0x8e>
1a003f3e:	192c      	adds	r4, r5, r4
1a003f40:	f100 33ff 	add.w	r3, r0, #4294967295
1a003f44:	f080 80cb 	bcs.w	1a0040de <__udivmoddi4+0x21a>
1a003f48:	45a4      	cmp	ip, r4
1a003f4a:	f240 80c8 	bls.w	1a0040de <__udivmoddi4+0x21a>
1a003f4e:	3802      	subs	r0, #2
1a003f50:	442c      	add	r4, r5
1a003f52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003f56:	eba4 040c 	sub.w	r4, r4, ip
1a003f5a:	2700      	movs	r7, #0
1a003f5c:	b11e      	cbz	r6, 1a003f66 <__udivmoddi4+0xa2>
1a003f5e:	40d4      	lsrs	r4, r2
1a003f60:	2300      	movs	r3, #0
1a003f62:	e9c6 4300 	strd	r4, r3, [r6]
1a003f66:	4639      	mov	r1, r7
1a003f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003f6c:	2a00      	cmp	r2, #0
1a003f6e:	d053      	beq.n	1a004018 <__udivmoddi4+0x154>
1a003f70:	fab2 f282 	clz	r2, r2
1a003f74:	2a00      	cmp	r2, #0
1a003f76:	f040 80b6 	bne.w	1a0040e6 <__udivmoddi4+0x222>
1a003f7a:	1b49      	subs	r1, r1, r5
1a003f7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003f80:	fa1f f885 	uxth.w	r8, r5
1a003f84:	2701      	movs	r7, #1
1a003f86:	fbb1 fcfe 	udiv	ip, r1, lr
1a003f8a:	0c23      	lsrs	r3, r4, #16
1a003f8c:	fb0e 111c 	mls	r1, lr, ip, r1
1a003f90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003f94:	fb08 f10c 	mul.w	r1, r8, ip
1a003f98:	4299      	cmp	r1, r3
1a003f9a:	d907      	bls.n	1a003fac <__udivmoddi4+0xe8>
1a003f9c:	18eb      	adds	r3, r5, r3
1a003f9e:	f10c 30ff 	add.w	r0, ip, #4294967295
1a003fa2:	d202      	bcs.n	1a003faa <__udivmoddi4+0xe6>
1a003fa4:	4299      	cmp	r1, r3
1a003fa6:	f200 80ec 	bhi.w	1a004182 <__udivmoddi4+0x2be>
1a003faa:	4684      	mov	ip, r0
1a003fac:	1a59      	subs	r1, r3, r1
1a003fae:	b2a3      	uxth	r3, r4
1a003fb0:	fbb1 f0fe 	udiv	r0, r1, lr
1a003fb4:	fb0e 1410 	mls	r4, lr, r0, r1
1a003fb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003fbc:	fb08 f800 	mul.w	r8, r8, r0
1a003fc0:	45a0      	cmp	r8, r4
1a003fc2:	d907      	bls.n	1a003fd4 <__udivmoddi4+0x110>
1a003fc4:	192c      	adds	r4, r5, r4
1a003fc6:	f100 33ff 	add.w	r3, r0, #4294967295
1a003fca:	d202      	bcs.n	1a003fd2 <__udivmoddi4+0x10e>
1a003fcc:	45a0      	cmp	r8, r4
1a003fce:	f200 80dc 	bhi.w	1a00418a <__udivmoddi4+0x2c6>
1a003fd2:	4618      	mov	r0, r3
1a003fd4:	eba4 0408 	sub.w	r4, r4, r8
1a003fd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003fdc:	e7be      	b.n	1a003f5c <__udivmoddi4+0x98>
1a003fde:	428b      	cmp	r3, r1
1a003fe0:	d908      	bls.n	1a003ff4 <__udivmoddi4+0x130>
1a003fe2:	2e00      	cmp	r6, #0
1a003fe4:	d078      	beq.n	1a0040d8 <__udivmoddi4+0x214>
1a003fe6:	2700      	movs	r7, #0
1a003fe8:	e9c6 0100 	strd	r0, r1, [r6]
1a003fec:	4638      	mov	r0, r7
1a003fee:	4639      	mov	r1, r7
1a003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003ff4:	fab3 f783 	clz	r7, r3
1a003ff8:	b97f      	cbnz	r7, 1a00401a <__udivmoddi4+0x156>
1a003ffa:	428b      	cmp	r3, r1
1a003ffc:	d302      	bcc.n	1a004004 <__udivmoddi4+0x140>
1a003ffe:	4282      	cmp	r2, r0
1a004000:	f200 80bd 	bhi.w	1a00417e <__udivmoddi4+0x2ba>
1a004004:	1a84      	subs	r4, r0, r2
1a004006:	eb61 0303 	sbc.w	r3, r1, r3
1a00400a:	2001      	movs	r0, #1
1a00400c:	4698      	mov	r8, r3
1a00400e:	2e00      	cmp	r6, #0
1a004010:	d0a9      	beq.n	1a003f66 <__udivmoddi4+0xa2>
1a004012:	e9c6 4800 	strd	r4, r8, [r6]
1a004016:	e7a6      	b.n	1a003f66 <__udivmoddi4+0xa2>
1a004018:	deff      	udf	#255	; 0xff
1a00401a:	f1c7 0520 	rsb	r5, r7, #32
1a00401e:	40bb      	lsls	r3, r7
1a004020:	fa22 fc05 	lsr.w	ip, r2, r5
1a004024:	ea4c 0c03 	orr.w	ip, ip, r3
1a004028:	fa01 f407 	lsl.w	r4, r1, r7
1a00402c:	fa20 f805 	lsr.w	r8, r0, r5
1a004030:	fa21 f305 	lsr.w	r3, r1, r5
1a004034:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004038:	ea48 0404 	orr.w	r4, r8, r4
1a00403c:	fbb3 f9fe 	udiv	r9, r3, lr
1a004040:	0c21      	lsrs	r1, r4, #16
1a004042:	fb0e 3319 	mls	r3, lr, r9, r3
1a004046:	fa1f f88c 	uxth.w	r8, ip
1a00404a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00404e:	fb09 fa08 	mul.w	sl, r9, r8
1a004052:	459a      	cmp	sl, r3
1a004054:	fa02 f207 	lsl.w	r2, r2, r7
1a004058:	fa00 f107 	lsl.w	r1, r0, r7
1a00405c:	d90b      	bls.n	1a004076 <__udivmoddi4+0x1b2>
1a00405e:	eb1c 0303 	adds.w	r3, ip, r3
1a004062:	f109 30ff 	add.w	r0, r9, #4294967295
1a004066:	f080 8088 	bcs.w	1a00417a <__udivmoddi4+0x2b6>
1a00406a:	459a      	cmp	sl, r3
1a00406c:	f240 8085 	bls.w	1a00417a <__udivmoddi4+0x2b6>
1a004070:	f1a9 0902 	sub.w	r9, r9, #2
1a004074:	4463      	add	r3, ip
1a004076:	eba3 030a 	sub.w	r3, r3, sl
1a00407a:	b2a4      	uxth	r4, r4
1a00407c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004080:	fb0e 3310 	mls	r3, lr, r0, r3
1a004084:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004088:	fb00 f808 	mul.w	r8, r0, r8
1a00408c:	45a0      	cmp	r8, r4
1a00408e:	d908      	bls.n	1a0040a2 <__udivmoddi4+0x1de>
1a004090:	eb1c 0404 	adds.w	r4, ip, r4
1a004094:	f100 33ff 	add.w	r3, r0, #4294967295
1a004098:	d26b      	bcs.n	1a004172 <__udivmoddi4+0x2ae>
1a00409a:	45a0      	cmp	r8, r4
1a00409c:	d969      	bls.n	1a004172 <__udivmoddi4+0x2ae>
1a00409e:	3802      	subs	r0, #2
1a0040a0:	4464      	add	r4, ip
1a0040a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0040a6:	eba4 0408 	sub.w	r4, r4, r8
1a0040aa:	fba0 8902 	umull	r8, r9, r0, r2
1a0040ae:	454c      	cmp	r4, r9
1a0040b0:	46c6      	mov	lr, r8
1a0040b2:	464b      	mov	r3, r9
1a0040b4:	d354      	bcc.n	1a004160 <__udivmoddi4+0x29c>
1a0040b6:	d051      	beq.n	1a00415c <__udivmoddi4+0x298>
1a0040b8:	2e00      	cmp	r6, #0
1a0040ba:	d069      	beq.n	1a004190 <__udivmoddi4+0x2cc>
1a0040bc:	ebb1 020e 	subs.w	r2, r1, lr
1a0040c0:	eb64 0403 	sbc.w	r4, r4, r3
1a0040c4:	fa04 f505 	lsl.w	r5, r4, r5
1a0040c8:	fa22 f307 	lsr.w	r3, r2, r7
1a0040cc:	40fc      	lsrs	r4, r7
1a0040ce:	431d      	orrs	r5, r3
1a0040d0:	e9c6 5400 	strd	r5, r4, [r6]
1a0040d4:	2700      	movs	r7, #0
1a0040d6:	e746      	b.n	1a003f66 <__udivmoddi4+0xa2>
1a0040d8:	4637      	mov	r7, r6
1a0040da:	4630      	mov	r0, r6
1a0040dc:	e743      	b.n	1a003f66 <__udivmoddi4+0xa2>
1a0040de:	4618      	mov	r0, r3
1a0040e0:	e737      	b.n	1a003f52 <__udivmoddi4+0x8e>
1a0040e2:	4607      	mov	r7, r0
1a0040e4:	e71f      	b.n	1a003f26 <__udivmoddi4+0x62>
1a0040e6:	f1c2 0320 	rsb	r3, r2, #32
1a0040ea:	fa20 f703 	lsr.w	r7, r0, r3
1a0040ee:	4095      	lsls	r5, r2
1a0040f0:	fa01 f002 	lsl.w	r0, r1, r2
1a0040f4:	fa21 f303 	lsr.w	r3, r1, r3
1a0040f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0040fc:	4338      	orrs	r0, r7
1a0040fe:	0c01      	lsrs	r1, r0, #16
1a004100:	fbb3 f7fe 	udiv	r7, r3, lr
1a004104:	fa1f f885 	uxth.w	r8, r5
1a004108:	fb0e 3317 	mls	r3, lr, r7, r3
1a00410c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004110:	fb07 f308 	mul.w	r3, r7, r8
1a004114:	428b      	cmp	r3, r1
1a004116:	fa04 f402 	lsl.w	r4, r4, r2
1a00411a:	d907      	bls.n	1a00412c <__udivmoddi4+0x268>
1a00411c:	1869      	adds	r1, r5, r1
1a00411e:	f107 3cff 	add.w	ip, r7, #4294967295
1a004122:	d228      	bcs.n	1a004176 <__udivmoddi4+0x2b2>
1a004124:	428b      	cmp	r3, r1
1a004126:	d926      	bls.n	1a004176 <__udivmoddi4+0x2b2>
1a004128:	3f02      	subs	r7, #2
1a00412a:	4429      	add	r1, r5
1a00412c:	1acb      	subs	r3, r1, r3
1a00412e:	b281      	uxth	r1, r0
1a004130:	fbb3 f0fe 	udiv	r0, r3, lr
1a004134:	fb0e 3310 	mls	r3, lr, r0, r3
1a004138:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00413c:	fb00 f308 	mul.w	r3, r0, r8
1a004140:	428b      	cmp	r3, r1
1a004142:	d907      	bls.n	1a004154 <__udivmoddi4+0x290>
1a004144:	1869      	adds	r1, r5, r1
1a004146:	f100 3cff 	add.w	ip, r0, #4294967295
1a00414a:	d210      	bcs.n	1a00416e <__udivmoddi4+0x2aa>
1a00414c:	428b      	cmp	r3, r1
1a00414e:	d90e      	bls.n	1a00416e <__udivmoddi4+0x2aa>
1a004150:	3802      	subs	r0, #2
1a004152:	4429      	add	r1, r5
1a004154:	1ac9      	subs	r1, r1, r3
1a004156:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00415a:	e714      	b.n	1a003f86 <__udivmoddi4+0xc2>
1a00415c:	4541      	cmp	r1, r8
1a00415e:	d2ab      	bcs.n	1a0040b8 <__udivmoddi4+0x1f4>
1a004160:	ebb8 0e02 	subs.w	lr, r8, r2
1a004164:	eb69 020c 	sbc.w	r2, r9, ip
1a004168:	3801      	subs	r0, #1
1a00416a:	4613      	mov	r3, r2
1a00416c:	e7a4      	b.n	1a0040b8 <__udivmoddi4+0x1f4>
1a00416e:	4660      	mov	r0, ip
1a004170:	e7f0      	b.n	1a004154 <__udivmoddi4+0x290>
1a004172:	4618      	mov	r0, r3
1a004174:	e795      	b.n	1a0040a2 <__udivmoddi4+0x1de>
1a004176:	4667      	mov	r7, ip
1a004178:	e7d8      	b.n	1a00412c <__udivmoddi4+0x268>
1a00417a:	4681      	mov	r9, r0
1a00417c:	e77b      	b.n	1a004076 <__udivmoddi4+0x1b2>
1a00417e:	4638      	mov	r0, r7
1a004180:	e745      	b.n	1a00400e <__udivmoddi4+0x14a>
1a004182:	f1ac 0c02 	sub.w	ip, ip, #2
1a004186:	442b      	add	r3, r5
1a004188:	e710      	b.n	1a003fac <__udivmoddi4+0xe8>
1a00418a:	3802      	subs	r0, #2
1a00418c:	442c      	add	r4, r5
1a00418e:	e721      	b.n	1a003fd4 <__udivmoddi4+0x110>
1a004190:	4637      	mov	r7, r6
1a004192:	e6e8      	b.n	1a003f66 <__udivmoddi4+0xa2>

1a004194 <__aeabi_idiv0>:
1a004194:	4770      	bx	lr
1a004196:	bf00      	nop

1a004198 <__sflush_r>:
1a004198:	898a      	ldrh	r2, [r1, #12]
1a00419a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00419e:	4605      	mov	r5, r0
1a0041a0:	0710      	lsls	r0, r2, #28
1a0041a2:	460c      	mov	r4, r1
1a0041a4:	d458      	bmi.n	1a004258 <__sflush_r+0xc0>
1a0041a6:	684b      	ldr	r3, [r1, #4]
1a0041a8:	2b00      	cmp	r3, #0
1a0041aa:	dc05      	bgt.n	1a0041b8 <__sflush_r+0x20>
1a0041ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0041ae:	2b00      	cmp	r3, #0
1a0041b0:	dc02      	bgt.n	1a0041b8 <__sflush_r+0x20>
1a0041b2:	2000      	movs	r0, #0
1a0041b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0041b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0041ba:	2e00      	cmp	r6, #0
1a0041bc:	d0f9      	beq.n	1a0041b2 <__sflush_r+0x1a>
1a0041be:	2300      	movs	r3, #0
1a0041c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0041c4:	682f      	ldr	r7, [r5, #0]
1a0041c6:	602b      	str	r3, [r5, #0]
1a0041c8:	d032      	beq.n	1a004230 <__sflush_r+0x98>
1a0041ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0041cc:	89a3      	ldrh	r3, [r4, #12]
1a0041ce:	075a      	lsls	r2, r3, #29
1a0041d0:	d505      	bpl.n	1a0041de <__sflush_r+0x46>
1a0041d2:	6863      	ldr	r3, [r4, #4]
1a0041d4:	1ac0      	subs	r0, r0, r3
1a0041d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0041d8:	b10b      	cbz	r3, 1a0041de <__sflush_r+0x46>
1a0041da:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0041dc:	1ac0      	subs	r0, r0, r3
1a0041de:	2300      	movs	r3, #0
1a0041e0:	4602      	mov	r2, r0
1a0041e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0041e4:	6a21      	ldr	r1, [r4, #32]
1a0041e6:	4628      	mov	r0, r5
1a0041e8:	47b0      	blx	r6
1a0041ea:	1c43      	adds	r3, r0, #1
1a0041ec:	89a3      	ldrh	r3, [r4, #12]
1a0041ee:	d106      	bne.n	1a0041fe <__sflush_r+0x66>
1a0041f0:	6829      	ldr	r1, [r5, #0]
1a0041f2:	291d      	cmp	r1, #29
1a0041f4:	d849      	bhi.n	1a00428a <__sflush_r+0xf2>
1a0041f6:	4a2a      	ldr	r2, [pc, #168]	; (1a0042a0 <__sflush_r+0x108>)
1a0041f8:	40ca      	lsrs	r2, r1
1a0041fa:	07d6      	lsls	r6, r2, #31
1a0041fc:	d545      	bpl.n	1a00428a <__sflush_r+0xf2>
1a0041fe:	2200      	movs	r2, #0
1a004200:	6062      	str	r2, [r4, #4]
1a004202:	04d9      	lsls	r1, r3, #19
1a004204:	6922      	ldr	r2, [r4, #16]
1a004206:	6022      	str	r2, [r4, #0]
1a004208:	d504      	bpl.n	1a004214 <__sflush_r+0x7c>
1a00420a:	1c42      	adds	r2, r0, #1
1a00420c:	d101      	bne.n	1a004212 <__sflush_r+0x7a>
1a00420e:	682b      	ldr	r3, [r5, #0]
1a004210:	b903      	cbnz	r3, 1a004214 <__sflush_r+0x7c>
1a004212:	6560      	str	r0, [r4, #84]	; 0x54
1a004214:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004216:	602f      	str	r7, [r5, #0]
1a004218:	2900      	cmp	r1, #0
1a00421a:	d0ca      	beq.n	1a0041b2 <__sflush_r+0x1a>
1a00421c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004220:	4299      	cmp	r1, r3
1a004222:	d002      	beq.n	1a00422a <__sflush_r+0x92>
1a004224:	4628      	mov	r0, r5
1a004226:	f000 f9ab 	bl	1a004580 <_free_r>
1a00422a:	2000      	movs	r0, #0
1a00422c:	6360      	str	r0, [r4, #52]	; 0x34
1a00422e:	e7c1      	b.n	1a0041b4 <__sflush_r+0x1c>
1a004230:	6a21      	ldr	r1, [r4, #32]
1a004232:	2301      	movs	r3, #1
1a004234:	4628      	mov	r0, r5
1a004236:	47b0      	blx	r6
1a004238:	1c41      	adds	r1, r0, #1
1a00423a:	d1c7      	bne.n	1a0041cc <__sflush_r+0x34>
1a00423c:	682b      	ldr	r3, [r5, #0]
1a00423e:	2b00      	cmp	r3, #0
1a004240:	d0c4      	beq.n	1a0041cc <__sflush_r+0x34>
1a004242:	2b1d      	cmp	r3, #29
1a004244:	d001      	beq.n	1a00424a <__sflush_r+0xb2>
1a004246:	2b16      	cmp	r3, #22
1a004248:	d101      	bne.n	1a00424e <__sflush_r+0xb6>
1a00424a:	602f      	str	r7, [r5, #0]
1a00424c:	e7b1      	b.n	1a0041b2 <__sflush_r+0x1a>
1a00424e:	89a3      	ldrh	r3, [r4, #12]
1a004250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004254:	81a3      	strh	r3, [r4, #12]
1a004256:	e7ad      	b.n	1a0041b4 <__sflush_r+0x1c>
1a004258:	690f      	ldr	r7, [r1, #16]
1a00425a:	2f00      	cmp	r7, #0
1a00425c:	d0a9      	beq.n	1a0041b2 <__sflush_r+0x1a>
1a00425e:	0793      	lsls	r3, r2, #30
1a004260:	680e      	ldr	r6, [r1, #0]
1a004262:	bf08      	it	eq
1a004264:	694b      	ldreq	r3, [r1, #20]
1a004266:	600f      	str	r7, [r1, #0]
1a004268:	bf18      	it	ne
1a00426a:	2300      	movne	r3, #0
1a00426c:	eba6 0807 	sub.w	r8, r6, r7
1a004270:	608b      	str	r3, [r1, #8]
1a004272:	f1b8 0f00 	cmp.w	r8, #0
1a004276:	dd9c      	ble.n	1a0041b2 <__sflush_r+0x1a>
1a004278:	4643      	mov	r3, r8
1a00427a:	463a      	mov	r2, r7
1a00427c:	6a21      	ldr	r1, [r4, #32]
1a00427e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004280:	4628      	mov	r0, r5
1a004282:	47b0      	blx	r6
1a004284:	2800      	cmp	r0, #0
1a004286:	dc06      	bgt.n	1a004296 <__sflush_r+0xfe>
1a004288:	89a3      	ldrh	r3, [r4, #12]
1a00428a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00428e:	81a3      	strh	r3, [r4, #12]
1a004290:	f04f 30ff 	mov.w	r0, #4294967295
1a004294:	e78e      	b.n	1a0041b4 <__sflush_r+0x1c>
1a004296:	4407      	add	r7, r0
1a004298:	eba8 0800 	sub.w	r8, r8, r0
1a00429c:	e7e9      	b.n	1a004272 <__sflush_r+0xda>
1a00429e:	bf00      	nop
1a0042a0:	20400001 	.word	0x20400001

1a0042a4 <_fflush_r>:
1a0042a4:	b538      	push	{r3, r4, r5, lr}
1a0042a6:	690b      	ldr	r3, [r1, #16]
1a0042a8:	4605      	mov	r5, r0
1a0042aa:	460c      	mov	r4, r1
1a0042ac:	b913      	cbnz	r3, 1a0042b4 <_fflush_r+0x10>
1a0042ae:	2500      	movs	r5, #0
1a0042b0:	4628      	mov	r0, r5
1a0042b2:	bd38      	pop	{r3, r4, r5, pc}
1a0042b4:	b118      	cbz	r0, 1a0042be <_fflush_r+0x1a>
1a0042b6:	6983      	ldr	r3, [r0, #24]
1a0042b8:	b90b      	cbnz	r3, 1a0042be <_fflush_r+0x1a>
1a0042ba:	f000 f887 	bl	1a0043cc <__sinit>
1a0042be:	4b14      	ldr	r3, [pc, #80]	; (1a004310 <_fflush_r+0x6c>)
1a0042c0:	429c      	cmp	r4, r3
1a0042c2:	d11b      	bne.n	1a0042fc <_fflush_r+0x58>
1a0042c4:	686c      	ldr	r4, [r5, #4]
1a0042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0042ca:	2b00      	cmp	r3, #0
1a0042cc:	d0ef      	beq.n	1a0042ae <_fflush_r+0xa>
1a0042ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0042d0:	07d0      	lsls	r0, r2, #31
1a0042d2:	d404      	bmi.n	1a0042de <_fflush_r+0x3a>
1a0042d4:	0599      	lsls	r1, r3, #22
1a0042d6:	d402      	bmi.n	1a0042de <_fflush_r+0x3a>
1a0042d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0042da:	f000 f938 	bl	1a00454e <__retarget_lock_acquire_recursive>
1a0042de:	4628      	mov	r0, r5
1a0042e0:	4621      	mov	r1, r4
1a0042e2:	f7ff ff59 	bl	1a004198 <__sflush_r>
1a0042e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0042e8:	07da      	lsls	r2, r3, #31
1a0042ea:	4605      	mov	r5, r0
1a0042ec:	d4e0      	bmi.n	1a0042b0 <_fflush_r+0xc>
1a0042ee:	89a3      	ldrh	r3, [r4, #12]
1a0042f0:	059b      	lsls	r3, r3, #22
1a0042f2:	d4dd      	bmi.n	1a0042b0 <_fflush_r+0xc>
1a0042f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0042f6:	f000 f92b 	bl	1a004550 <__retarget_lock_release_recursive>
1a0042fa:	e7d9      	b.n	1a0042b0 <_fflush_r+0xc>
1a0042fc:	4b05      	ldr	r3, [pc, #20]	; (1a004314 <_fflush_r+0x70>)
1a0042fe:	429c      	cmp	r4, r3
1a004300:	d101      	bne.n	1a004306 <_fflush_r+0x62>
1a004302:	68ac      	ldr	r4, [r5, #8]
1a004304:	e7df      	b.n	1a0042c6 <_fflush_r+0x22>
1a004306:	4b04      	ldr	r3, [pc, #16]	; (1a004318 <_fflush_r+0x74>)
1a004308:	429c      	cmp	r4, r3
1a00430a:	bf08      	it	eq
1a00430c:	68ec      	ldreq	r4, [r5, #12]
1a00430e:	e7da      	b.n	1a0042c6 <_fflush_r+0x22>
1a004310:	1a0088fc 	.word	0x1a0088fc
1a004314:	1a00891c 	.word	0x1a00891c
1a004318:	1a0088dc 	.word	0x1a0088dc

1a00431c <std>:
1a00431c:	2300      	movs	r3, #0
1a00431e:	b510      	push	{r4, lr}
1a004320:	4604      	mov	r4, r0
1a004322:	e9c0 3300 	strd	r3, r3, [r0]
1a004326:	6083      	str	r3, [r0, #8]
1a004328:	8181      	strh	r1, [r0, #12]
1a00432a:	6643      	str	r3, [r0, #100]	; 0x64
1a00432c:	81c2      	strh	r2, [r0, #14]
1a00432e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004332:	6183      	str	r3, [r0, #24]
1a004334:	4619      	mov	r1, r3
1a004336:	2208      	movs	r2, #8
1a004338:	305c      	adds	r0, #92	; 0x5c
1a00433a:	f000 f918 	bl	1a00456e <memset>
1a00433e:	4b05      	ldr	r3, [pc, #20]	; (1a004354 <std+0x38>)
1a004340:	6263      	str	r3, [r4, #36]	; 0x24
1a004342:	4b05      	ldr	r3, [pc, #20]	; (1a004358 <std+0x3c>)
1a004344:	62a3      	str	r3, [r4, #40]	; 0x28
1a004346:	4b05      	ldr	r3, [pc, #20]	; (1a00435c <std+0x40>)
1a004348:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00434a:	4b05      	ldr	r3, [pc, #20]	; (1a004360 <std+0x44>)
1a00434c:	6224      	str	r4, [r4, #32]
1a00434e:	6323      	str	r3, [r4, #48]	; 0x30
1a004350:	bd10      	pop	{r4, pc}
1a004352:	bf00      	nop
1a004354:	1a004de5 	.word	0x1a004de5
1a004358:	1a004e07 	.word	0x1a004e07
1a00435c:	1a004e3f 	.word	0x1a004e3f
1a004360:	1a004e63 	.word	0x1a004e63

1a004364 <_cleanup_r>:
1a004364:	4901      	ldr	r1, [pc, #4]	; (1a00436c <_cleanup_r+0x8>)
1a004366:	f000 b8af 	b.w	1a0044c8 <_fwalk_reent>
1a00436a:	bf00      	nop
1a00436c:	1a0042a5 	.word	0x1a0042a5

1a004370 <__sfmoreglue>:
1a004370:	b570      	push	{r4, r5, r6, lr}
1a004372:	1e4a      	subs	r2, r1, #1
1a004374:	2568      	movs	r5, #104	; 0x68
1a004376:	4355      	muls	r5, r2
1a004378:	460e      	mov	r6, r1
1a00437a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00437e:	f000 f94d 	bl	1a00461c <_malloc_r>
1a004382:	4604      	mov	r4, r0
1a004384:	b140      	cbz	r0, 1a004398 <__sfmoreglue+0x28>
1a004386:	2100      	movs	r1, #0
1a004388:	e9c0 1600 	strd	r1, r6, [r0]
1a00438c:	300c      	adds	r0, #12
1a00438e:	60a0      	str	r0, [r4, #8]
1a004390:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004394:	f000 f8eb 	bl	1a00456e <memset>
1a004398:	4620      	mov	r0, r4
1a00439a:	bd70      	pop	{r4, r5, r6, pc}

1a00439c <__sfp_lock_acquire>:
1a00439c:	4801      	ldr	r0, [pc, #4]	; (1a0043a4 <__sfp_lock_acquire+0x8>)
1a00439e:	f000 b8d6 	b.w	1a00454e <__retarget_lock_acquire_recursive>
1a0043a2:	bf00      	nop
1a0043a4:	100022d0 	.word	0x100022d0

1a0043a8 <__sfp_lock_release>:
1a0043a8:	4801      	ldr	r0, [pc, #4]	; (1a0043b0 <__sfp_lock_release+0x8>)
1a0043aa:	f000 b8d1 	b.w	1a004550 <__retarget_lock_release_recursive>
1a0043ae:	bf00      	nop
1a0043b0:	100022d0 	.word	0x100022d0

1a0043b4 <__sinit_lock_acquire>:
1a0043b4:	4801      	ldr	r0, [pc, #4]	; (1a0043bc <__sinit_lock_acquire+0x8>)
1a0043b6:	f000 b8ca 	b.w	1a00454e <__retarget_lock_acquire_recursive>
1a0043ba:	bf00      	nop
1a0043bc:	100022cb 	.word	0x100022cb

1a0043c0 <__sinit_lock_release>:
1a0043c0:	4801      	ldr	r0, [pc, #4]	; (1a0043c8 <__sinit_lock_release+0x8>)
1a0043c2:	f000 b8c5 	b.w	1a004550 <__retarget_lock_release_recursive>
1a0043c6:	bf00      	nop
1a0043c8:	100022cb 	.word	0x100022cb

1a0043cc <__sinit>:
1a0043cc:	b510      	push	{r4, lr}
1a0043ce:	4604      	mov	r4, r0
1a0043d0:	f7ff fff0 	bl	1a0043b4 <__sinit_lock_acquire>
1a0043d4:	69a3      	ldr	r3, [r4, #24]
1a0043d6:	b11b      	cbz	r3, 1a0043e0 <__sinit+0x14>
1a0043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0043dc:	f7ff bff0 	b.w	1a0043c0 <__sinit_lock_release>
1a0043e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a0043e4:	6523      	str	r3, [r4, #80]	; 0x50
1a0043e6:	4b13      	ldr	r3, [pc, #76]	; (1a004434 <__sinit+0x68>)
1a0043e8:	4a13      	ldr	r2, [pc, #76]	; (1a004438 <__sinit+0x6c>)
1a0043ea:	681b      	ldr	r3, [r3, #0]
1a0043ec:	62a2      	str	r2, [r4, #40]	; 0x28
1a0043ee:	42a3      	cmp	r3, r4
1a0043f0:	bf04      	itt	eq
1a0043f2:	2301      	moveq	r3, #1
1a0043f4:	61a3      	streq	r3, [r4, #24]
1a0043f6:	4620      	mov	r0, r4
1a0043f8:	f000 f820 	bl	1a00443c <__sfp>
1a0043fc:	6060      	str	r0, [r4, #4]
1a0043fe:	4620      	mov	r0, r4
1a004400:	f000 f81c 	bl	1a00443c <__sfp>
1a004404:	60a0      	str	r0, [r4, #8]
1a004406:	4620      	mov	r0, r4
1a004408:	f000 f818 	bl	1a00443c <__sfp>
1a00440c:	2200      	movs	r2, #0
1a00440e:	60e0      	str	r0, [r4, #12]
1a004410:	2104      	movs	r1, #4
1a004412:	6860      	ldr	r0, [r4, #4]
1a004414:	f7ff ff82 	bl	1a00431c <std>
1a004418:	2201      	movs	r2, #1
1a00441a:	2109      	movs	r1, #9
1a00441c:	68a0      	ldr	r0, [r4, #8]
1a00441e:	f7ff ff7d 	bl	1a00431c <std>
1a004422:	2202      	movs	r2, #2
1a004424:	2112      	movs	r1, #18
1a004426:	68e0      	ldr	r0, [r4, #12]
1a004428:	f7ff ff78 	bl	1a00431c <std>
1a00442c:	2301      	movs	r3, #1
1a00442e:	61a3      	str	r3, [r4, #24]
1a004430:	e7d2      	b.n	1a0043d8 <__sinit+0xc>
1a004432:	bf00      	nop
1a004434:	1a00893c 	.word	0x1a00893c
1a004438:	1a004365 	.word	0x1a004365

1a00443c <__sfp>:
1a00443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00443e:	4607      	mov	r7, r0
1a004440:	f7ff ffac 	bl	1a00439c <__sfp_lock_acquire>
1a004444:	4b1e      	ldr	r3, [pc, #120]	; (1a0044c0 <__sfp+0x84>)
1a004446:	681e      	ldr	r6, [r3, #0]
1a004448:	69b3      	ldr	r3, [r6, #24]
1a00444a:	b913      	cbnz	r3, 1a004452 <__sfp+0x16>
1a00444c:	4630      	mov	r0, r6
1a00444e:	f7ff ffbd 	bl	1a0043cc <__sinit>
1a004452:	3648      	adds	r6, #72	; 0x48
1a004454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004458:	3b01      	subs	r3, #1
1a00445a:	d503      	bpl.n	1a004464 <__sfp+0x28>
1a00445c:	6833      	ldr	r3, [r6, #0]
1a00445e:	b30b      	cbz	r3, 1a0044a4 <__sfp+0x68>
1a004460:	6836      	ldr	r6, [r6, #0]
1a004462:	e7f7      	b.n	1a004454 <__sfp+0x18>
1a004464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004468:	b9d5      	cbnz	r5, 1a0044a0 <__sfp+0x64>
1a00446a:	4b16      	ldr	r3, [pc, #88]	; (1a0044c4 <__sfp+0x88>)
1a00446c:	60e3      	str	r3, [r4, #12]
1a00446e:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a004472:	6665      	str	r5, [r4, #100]	; 0x64
1a004474:	f000 f86a 	bl	1a00454c <__retarget_lock_init_recursive>
1a004478:	f7ff ff96 	bl	1a0043a8 <__sfp_lock_release>
1a00447c:	6025      	str	r5, [r4, #0]
1a00447e:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a004482:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a004486:	61a5      	str	r5, [r4, #24]
1a004488:	2208      	movs	r2, #8
1a00448a:	4629      	mov	r1, r5
1a00448c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004490:	f000 f86d 	bl	1a00456e <memset>
1a004494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a00449c:	4620      	mov	r0, r4
1a00449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0044a0:	3468      	adds	r4, #104	; 0x68
1a0044a2:	e7d9      	b.n	1a004458 <__sfp+0x1c>
1a0044a4:	2104      	movs	r1, #4
1a0044a6:	4638      	mov	r0, r7
1a0044a8:	f7ff ff62 	bl	1a004370 <__sfmoreglue>
1a0044ac:	4604      	mov	r4, r0
1a0044ae:	6030      	str	r0, [r6, #0]
1a0044b0:	2800      	cmp	r0, #0
1a0044b2:	d1d5      	bne.n	1a004460 <__sfp+0x24>
1a0044b4:	f7ff ff78 	bl	1a0043a8 <__sfp_lock_release>
1a0044b8:	230c      	movs	r3, #12
1a0044ba:	603b      	str	r3, [r7, #0]
1a0044bc:	e7ee      	b.n	1a00449c <__sfp+0x60>
1a0044be:	bf00      	nop
1a0044c0:	1a00893c 	.word	0x1a00893c
1a0044c4:	ffff0001 	.word	0xffff0001

1a0044c8 <_fwalk_reent>:
1a0044c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0044cc:	4680      	mov	r8, r0
1a0044ce:	4689      	mov	r9, r1
1a0044d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0044d4:	2600      	movs	r6, #0
1a0044d6:	b914      	cbnz	r4, 1a0044de <_fwalk_reent+0x16>
1a0044d8:	4630      	mov	r0, r6
1a0044da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0044de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0044e2:	3f01      	subs	r7, #1
1a0044e4:	d501      	bpl.n	1a0044ea <_fwalk_reent+0x22>
1a0044e6:	6824      	ldr	r4, [r4, #0]
1a0044e8:	e7f5      	b.n	1a0044d6 <_fwalk_reent+0xe>
1a0044ea:	89ab      	ldrh	r3, [r5, #12]
1a0044ec:	2b01      	cmp	r3, #1
1a0044ee:	d907      	bls.n	1a004500 <_fwalk_reent+0x38>
1a0044f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0044f4:	3301      	adds	r3, #1
1a0044f6:	d003      	beq.n	1a004500 <_fwalk_reent+0x38>
1a0044f8:	4629      	mov	r1, r5
1a0044fa:	4640      	mov	r0, r8
1a0044fc:	47c8      	blx	r9
1a0044fe:	4306      	orrs	r6, r0
1a004500:	3568      	adds	r5, #104	; 0x68
1a004502:	e7ee      	b.n	1a0044e2 <_fwalk_reent+0x1a>

1a004504 <__libc_init_array>:
1a004504:	b570      	push	{r4, r5, r6, lr}
1a004506:	4d0d      	ldr	r5, [pc, #52]	; (1a00453c <__libc_init_array+0x38>)
1a004508:	4c0d      	ldr	r4, [pc, #52]	; (1a004540 <__libc_init_array+0x3c>)
1a00450a:	1b64      	subs	r4, r4, r5
1a00450c:	10a4      	asrs	r4, r4, #2
1a00450e:	2600      	movs	r6, #0
1a004510:	42a6      	cmp	r6, r4
1a004512:	d109      	bne.n	1a004528 <__libc_init_array+0x24>
1a004514:	4d0b      	ldr	r5, [pc, #44]	; (1a004544 <__libc_init_array+0x40>)
1a004516:	4c0c      	ldr	r4, [pc, #48]	; (1a004548 <__libc_init_array+0x44>)
1a004518:	f7fc f97d 	bl	1a000816 <_init>
1a00451c:	1b64      	subs	r4, r4, r5
1a00451e:	10a4      	asrs	r4, r4, #2
1a004520:	2600      	movs	r6, #0
1a004522:	42a6      	cmp	r6, r4
1a004524:	d105      	bne.n	1a004532 <__libc_init_array+0x2e>
1a004526:	bd70      	pop	{r4, r5, r6, pc}
1a004528:	f855 3b04 	ldr.w	r3, [r5], #4
1a00452c:	4798      	blx	r3
1a00452e:	3601      	adds	r6, #1
1a004530:	e7ee      	b.n	1a004510 <__libc_init_array+0xc>
1a004532:	f855 3b04 	ldr.w	r3, [r5], #4
1a004536:	4798      	blx	r3
1a004538:	3601      	adds	r6, #1
1a00453a:	e7f2      	b.n	1a004522 <__libc_init_array+0x1e>
1a00453c:	1a008974 	.word	0x1a008974
1a004540:	1a008974 	.word	0x1a008974
1a004544:	1a008974 	.word	0x1a008974
1a004548:	1a008978 	.word	0x1a008978

1a00454c <__retarget_lock_init_recursive>:
1a00454c:	4770      	bx	lr

1a00454e <__retarget_lock_acquire_recursive>:
1a00454e:	4770      	bx	lr

1a004550 <__retarget_lock_release_recursive>:
1a004550:	4770      	bx	lr

1a004552 <memcpy>:
1a004552:	440a      	add	r2, r1
1a004554:	4291      	cmp	r1, r2
1a004556:	f100 33ff 	add.w	r3, r0, #4294967295
1a00455a:	d100      	bne.n	1a00455e <memcpy+0xc>
1a00455c:	4770      	bx	lr
1a00455e:	b510      	push	{r4, lr}
1a004560:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004564:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004568:	4291      	cmp	r1, r2
1a00456a:	d1f9      	bne.n	1a004560 <memcpy+0xe>
1a00456c:	bd10      	pop	{r4, pc}

1a00456e <memset>:
1a00456e:	4402      	add	r2, r0
1a004570:	4603      	mov	r3, r0
1a004572:	4293      	cmp	r3, r2
1a004574:	d100      	bne.n	1a004578 <memset+0xa>
1a004576:	4770      	bx	lr
1a004578:	f803 1b01 	strb.w	r1, [r3], #1
1a00457c:	e7f9      	b.n	1a004572 <memset+0x4>
1a00457e:	Address 0x1a00457e is out of bounds.


1a004580 <_free_r>:
1a004580:	b538      	push	{r3, r4, r5, lr}
1a004582:	4605      	mov	r5, r0
1a004584:	2900      	cmp	r1, #0
1a004586:	d045      	beq.n	1a004614 <_free_r+0x94>
1a004588:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00458c:	1f0c      	subs	r4, r1, #4
1a00458e:	2b00      	cmp	r3, #0
1a004590:	bfb8      	it	lt
1a004592:	18e4      	addlt	r4, r4, r3
1a004594:	f000 fe0e 	bl	1a0051b4 <__malloc_lock>
1a004598:	4a1f      	ldr	r2, [pc, #124]	; (1a004618 <_free_r+0x98>)
1a00459a:	6813      	ldr	r3, [r2, #0]
1a00459c:	4610      	mov	r0, r2
1a00459e:	b933      	cbnz	r3, 1a0045ae <_free_r+0x2e>
1a0045a0:	6063      	str	r3, [r4, #4]
1a0045a2:	6014      	str	r4, [r2, #0]
1a0045a4:	4628      	mov	r0, r5
1a0045a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0045aa:	f000 be09 	b.w	1a0051c0 <__malloc_unlock>
1a0045ae:	42a3      	cmp	r3, r4
1a0045b0:	d90c      	bls.n	1a0045cc <_free_r+0x4c>
1a0045b2:	6821      	ldr	r1, [r4, #0]
1a0045b4:	1862      	adds	r2, r4, r1
1a0045b6:	4293      	cmp	r3, r2
1a0045b8:	bf04      	itt	eq
1a0045ba:	681a      	ldreq	r2, [r3, #0]
1a0045bc:	685b      	ldreq	r3, [r3, #4]
1a0045be:	6063      	str	r3, [r4, #4]
1a0045c0:	bf04      	itt	eq
1a0045c2:	1852      	addeq	r2, r2, r1
1a0045c4:	6022      	streq	r2, [r4, #0]
1a0045c6:	6004      	str	r4, [r0, #0]
1a0045c8:	e7ec      	b.n	1a0045a4 <_free_r+0x24>
1a0045ca:	4613      	mov	r3, r2
1a0045cc:	685a      	ldr	r2, [r3, #4]
1a0045ce:	b10a      	cbz	r2, 1a0045d4 <_free_r+0x54>
1a0045d0:	42a2      	cmp	r2, r4
1a0045d2:	d9fa      	bls.n	1a0045ca <_free_r+0x4a>
1a0045d4:	6819      	ldr	r1, [r3, #0]
1a0045d6:	1858      	adds	r0, r3, r1
1a0045d8:	42a0      	cmp	r0, r4
1a0045da:	d10b      	bne.n	1a0045f4 <_free_r+0x74>
1a0045dc:	6820      	ldr	r0, [r4, #0]
1a0045de:	4401      	add	r1, r0
1a0045e0:	1858      	adds	r0, r3, r1
1a0045e2:	4282      	cmp	r2, r0
1a0045e4:	6019      	str	r1, [r3, #0]
1a0045e6:	d1dd      	bne.n	1a0045a4 <_free_r+0x24>
1a0045e8:	6810      	ldr	r0, [r2, #0]
1a0045ea:	6852      	ldr	r2, [r2, #4]
1a0045ec:	605a      	str	r2, [r3, #4]
1a0045ee:	4401      	add	r1, r0
1a0045f0:	6019      	str	r1, [r3, #0]
1a0045f2:	e7d7      	b.n	1a0045a4 <_free_r+0x24>
1a0045f4:	d902      	bls.n	1a0045fc <_free_r+0x7c>
1a0045f6:	230c      	movs	r3, #12
1a0045f8:	602b      	str	r3, [r5, #0]
1a0045fa:	e7d3      	b.n	1a0045a4 <_free_r+0x24>
1a0045fc:	6820      	ldr	r0, [r4, #0]
1a0045fe:	1821      	adds	r1, r4, r0
1a004600:	428a      	cmp	r2, r1
1a004602:	bf04      	itt	eq
1a004604:	6811      	ldreq	r1, [r2, #0]
1a004606:	6852      	ldreq	r2, [r2, #4]
1a004608:	6062      	str	r2, [r4, #4]
1a00460a:	bf04      	itt	eq
1a00460c:	1809      	addeq	r1, r1, r0
1a00460e:	6021      	streq	r1, [r4, #0]
1a004610:	605c      	str	r4, [r3, #4]
1a004612:	e7c7      	b.n	1a0045a4 <_free_r+0x24>
1a004614:	bd38      	pop	{r3, r4, r5, pc}
1a004616:	bf00      	nop
1a004618:	10002274 	.word	0x10002274

1a00461c <_malloc_r>:
1a00461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00461e:	1ccd      	adds	r5, r1, #3
1a004620:	f025 0503 	bic.w	r5, r5, #3
1a004624:	3508      	adds	r5, #8
1a004626:	2d0c      	cmp	r5, #12
1a004628:	bf38      	it	cc
1a00462a:	250c      	movcc	r5, #12
1a00462c:	2d00      	cmp	r5, #0
1a00462e:	4606      	mov	r6, r0
1a004630:	db01      	blt.n	1a004636 <_malloc_r+0x1a>
1a004632:	42a9      	cmp	r1, r5
1a004634:	d903      	bls.n	1a00463e <_malloc_r+0x22>
1a004636:	230c      	movs	r3, #12
1a004638:	6033      	str	r3, [r6, #0]
1a00463a:	2000      	movs	r0, #0
1a00463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00463e:	f000 fdb9 	bl	1a0051b4 <__malloc_lock>
1a004642:	4921      	ldr	r1, [pc, #132]	; (1a0046c8 <_malloc_r+0xac>)
1a004644:	680a      	ldr	r2, [r1, #0]
1a004646:	4614      	mov	r4, r2
1a004648:	b99c      	cbnz	r4, 1a004672 <_malloc_r+0x56>
1a00464a:	4f20      	ldr	r7, [pc, #128]	; (1a0046cc <_malloc_r+0xb0>)
1a00464c:	683b      	ldr	r3, [r7, #0]
1a00464e:	b923      	cbnz	r3, 1a00465a <_malloc_r+0x3e>
1a004650:	4621      	mov	r1, r4
1a004652:	4630      	mov	r0, r6
1a004654:	f7fc f934 	bl	1a0008c0 <_sbrk_r>
1a004658:	6038      	str	r0, [r7, #0]
1a00465a:	4629      	mov	r1, r5
1a00465c:	4630      	mov	r0, r6
1a00465e:	f7fc f92f 	bl	1a0008c0 <_sbrk_r>
1a004662:	1c43      	adds	r3, r0, #1
1a004664:	d123      	bne.n	1a0046ae <_malloc_r+0x92>
1a004666:	230c      	movs	r3, #12
1a004668:	6033      	str	r3, [r6, #0]
1a00466a:	4630      	mov	r0, r6
1a00466c:	f000 fda8 	bl	1a0051c0 <__malloc_unlock>
1a004670:	e7e3      	b.n	1a00463a <_malloc_r+0x1e>
1a004672:	6823      	ldr	r3, [r4, #0]
1a004674:	1b5b      	subs	r3, r3, r5
1a004676:	d417      	bmi.n	1a0046a8 <_malloc_r+0x8c>
1a004678:	2b0b      	cmp	r3, #11
1a00467a:	d903      	bls.n	1a004684 <_malloc_r+0x68>
1a00467c:	6023      	str	r3, [r4, #0]
1a00467e:	441c      	add	r4, r3
1a004680:	6025      	str	r5, [r4, #0]
1a004682:	e004      	b.n	1a00468e <_malloc_r+0x72>
1a004684:	6863      	ldr	r3, [r4, #4]
1a004686:	42a2      	cmp	r2, r4
1a004688:	bf0c      	ite	eq
1a00468a:	600b      	streq	r3, [r1, #0]
1a00468c:	6053      	strne	r3, [r2, #4]
1a00468e:	4630      	mov	r0, r6
1a004690:	f000 fd96 	bl	1a0051c0 <__malloc_unlock>
1a004694:	f104 000b 	add.w	r0, r4, #11
1a004698:	1d23      	adds	r3, r4, #4
1a00469a:	f020 0007 	bic.w	r0, r0, #7
1a00469e:	1ac2      	subs	r2, r0, r3
1a0046a0:	d0cc      	beq.n	1a00463c <_malloc_r+0x20>
1a0046a2:	1a1b      	subs	r3, r3, r0
1a0046a4:	50a3      	str	r3, [r4, r2]
1a0046a6:	e7c9      	b.n	1a00463c <_malloc_r+0x20>
1a0046a8:	4622      	mov	r2, r4
1a0046aa:	6864      	ldr	r4, [r4, #4]
1a0046ac:	e7cc      	b.n	1a004648 <_malloc_r+0x2c>
1a0046ae:	1cc4      	adds	r4, r0, #3
1a0046b0:	f024 0403 	bic.w	r4, r4, #3
1a0046b4:	42a0      	cmp	r0, r4
1a0046b6:	d0e3      	beq.n	1a004680 <_malloc_r+0x64>
1a0046b8:	1a21      	subs	r1, r4, r0
1a0046ba:	4630      	mov	r0, r6
1a0046bc:	f7fc f900 	bl	1a0008c0 <_sbrk_r>
1a0046c0:	3001      	adds	r0, #1
1a0046c2:	d1dd      	bne.n	1a004680 <_malloc_r+0x64>
1a0046c4:	e7cf      	b.n	1a004666 <_malloc_r+0x4a>
1a0046c6:	bf00      	nop
1a0046c8:	10002274 	.word	0x10002274
1a0046cc:	10002278 	.word	0x10002278

1a0046d0 <__sfputc_r>:
1a0046d0:	6893      	ldr	r3, [r2, #8]
1a0046d2:	3b01      	subs	r3, #1
1a0046d4:	2b00      	cmp	r3, #0
1a0046d6:	b410      	push	{r4}
1a0046d8:	6093      	str	r3, [r2, #8]
1a0046da:	da08      	bge.n	1a0046ee <__sfputc_r+0x1e>
1a0046dc:	6994      	ldr	r4, [r2, #24]
1a0046de:	42a3      	cmp	r3, r4
1a0046e0:	db01      	blt.n	1a0046e6 <__sfputc_r+0x16>
1a0046e2:	290a      	cmp	r1, #10
1a0046e4:	d103      	bne.n	1a0046ee <__sfputc_r+0x1e>
1a0046e6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0046ea:	f000 bbd1 	b.w	1a004e90 <__swbuf_r>
1a0046ee:	6813      	ldr	r3, [r2, #0]
1a0046f0:	1c58      	adds	r0, r3, #1
1a0046f2:	6010      	str	r0, [r2, #0]
1a0046f4:	7019      	strb	r1, [r3, #0]
1a0046f6:	4608      	mov	r0, r1
1a0046f8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0046fc:	4770      	bx	lr

1a0046fe <__sfputs_r>:
1a0046fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004700:	4606      	mov	r6, r0
1a004702:	460f      	mov	r7, r1
1a004704:	4614      	mov	r4, r2
1a004706:	18d5      	adds	r5, r2, r3
1a004708:	42ac      	cmp	r4, r5
1a00470a:	d101      	bne.n	1a004710 <__sfputs_r+0x12>
1a00470c:	2000      	movs	r0, #0
1a00470e:	e007      	b.n	1a004720 <__sfputs_r+0x22>
1a004710:	463a      	mov	r2, r7
1a004712:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004716:	4630      	mov	r0, r6
1a004718:	f7ff ffda 	bl	1a0046d0 <__sfputc_r>
1a00471c:	1c43      	adds	r3, r0, #1
1a00471e:	d1f3      	bne.n	1a004708 <__sfputs_r+0xa>
1a004720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004722:	Address 0x1a004722 is out of bounds.


1a004724 <_vfiprintf_r>:
1a004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004728:	460d      	mov	r5, r1
1a00472a:	b09d      	sub	sp, #116	; 0x74
1a00472c:	4614      	mov	r4, r2
1a00472e:	461e      	mov	r6, r3
1a004730:	4607      	mov	r7, r0
1a004732:	b118      	cbz	r0, 1a00473c <_vfiprintf_r+0x18>
1a004734:	6983      	ldr	r3, [r0, #24]
1a004736:	b90b      	cbnz	r3, 1a00473c <_vfiprintf_r+0x18>
1a004738:	f7ff fe48 	bl	1a0043cc <__sinit>
1a00473c:	4b85      	ldr	r3, [pc, #532]	; (1a004954 <_vfiprintf_r+0x230>)
1a00473e:	429d      	cmp	r5, r3
1a004740:	d11b      	bne.n	1a00477a <_vfiprintf_r+0x56>
1a004742:	687d      	ldr	r5, [r7, #4]
1a004744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004746:	07d9      	lsls	r1, r3, #31
1a004748:	d405      	bmi.n	1a004756 <_vfiprintf_r+0x32>
1a00474a:	89ab      	ldrh	r3, [r5, #12]
1a00474c:	059a      	lsls	r2, r3, #22
1a00474e:	d402      	bmi.n	1a004756 <_vfiprintf_r+0x32>
1a004750:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004752:	f7ff fefc 	bl	1a00454e <__retarget_lock_acquire_recursive>
1a004756:	89ab      	ldrh	r3, [r5, #12]
1a004758:	071b      	lsls	r3, r3, #28
1a00475a:	d501      	bpl.n	1a004760 <_vfiprintf_r+0x3c>
1a00475c:	692b      	ldr	r3, [r5, #16]
1a00475e:	b9eb      	cbnz	r3, 1a00479c <_vfiprintf_r+0x78>
1a004760:	4629      	mov	r1, r5
1a004762:	4638      	mov	r0, r7
1a004764:	f000 fbe6 	bl	1a004f34 <__swsetup_r>
1a004768:	b1c0      	cbz	r0, 1a00479c <_vfiprintf_r+0x78>
1a00476a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00476c:	07d8      	lsls	r0, r3, #31
1a00476e:	d50e      	bpl.n	1a00478e <_vfiprintf_r+0x6a>
1a004770:	f04f 30ff 	mov.w	r0, #4294967295
1a004774:	b01d      	add	sp, #116	; 0x74
1a004776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00477a:	4b77      	ldr	r3, [pc, #476]	; (1a004958 <_vfiprintf_r+0x234>)
1a00477c:	429d      	cmp	r5, r3
1a00477e:	d101      	bne.n	1a004784 <_vfiprintf_r+0x60>
1a004780:	68bd      	ldr	r5, [r7, #8]
1a004782:	e7df      	b.n	1a004744 <_vfiprintf_r+0x20>
1a004784:	4b75      	ldr	r3, [pc, #468]	; (1a00495c <_vfiprintf_r+0x238>)
1a004786:	429d      	cmp	r5, r3
1a004788:	bf08      	it	eq
1a00478a:	68fd      	ldreq	r5, [r7, #12]
1a00478c:	e7da      	b.n	1a004744 <_vfiprintf_r+0x20>
1a00478e:	89ab      	ldrh	r3, [r5, #12]
1a004790:	0599      	lsls	r1, r3, #22
1a004792:	d4ed      	bmi.n	1a004770 <_vfiprintf_r+0x4c>
1a004794:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004796:	f7ff fedb 	bl	1a004550 <__retarget_lock_release_recursive>
1a00479a:	e7e9      	b.n	1a004770 <_vfiprintf_r+0x4c>
1a00479c:	2300      	movs	r3, #0
1a00479e:	9309      	str	r3, [sp, #36]	; 0x24
1a0047a0:	2320      	movs	r3, #32
1a0047a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0047a6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a004960 <_vfiprintf_r+0x23c>
1a0047aa:	9603      	str	r6, [sp, #12]
1a0047ac:	2330      	movs	r3, #48	; 0x30
1a0047ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0047b2:	f04f 0a01 	mov.w	sl, #1
1a0047b6:	4623      	mov	r3, r4
1a0047b8:	461e      	mov	r6, r3
1a0047ba:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0047be:	b10a      	cbz	r2, 1a0047c4 <_vfiprintf_r+0xa0>
1a0047c0:	2a25      	cmp	r2, #37	; 0x25
1a0047c2:	d1f9      	bne.n	1a0047b8 <_vfiprintf_r+0x94>
1a0047c4:	ebb6 0b04 	subs.w	fp, r6, r4
1a0047c8:	d00b      	beq.n	1a0047e2 <_vfiprintf_r+0xbe>
1a0047ca:	465b      	mov	r3, fp
1a0047cc:	4622      	mov	r2, r4
1a0047ce:	4629      	mov	r1, r5
1a0047d0:	4638      	mov	r0, r7
1a0047d2:	f7ff ff94 	bl	1a0046fe <__sfputs_r>
1a0047d6:	3001      	adds	r0, #1
1a0047d8:	f000 80a3 	beq.w	1a004922 <_vfiprintf_r+0x1fe>
1a0047dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0047de:	445b      	add	r3, fp
1a0047e0:	9309      	str	r3, [sp, #36]	; 0x24
1a0047e2:	7833      	ldrb	r3, [r6, #0]
1a0047e4:	2b00      	cmp	r3, #0
1a0047e6:	f000 809c 	beq.w	1a004922 <_vfiprintf_r+0x1fe>
1a0047ea:	2300      	movs	r3, #0
1a0047ec:	f04f 32ff 	mov.w	r2, #4294967295
1a0047f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0047f4:	3601      	adds	r6, #1
1a0047f6:	9304      	str	r3, [sp, #16]
1a0047f8:	9307      	str	r3, [sp, #28]
1a0047fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0047fe:	931a      	str	r3, [sp, #104]	; 0x68
1a004800:	4634      	mov	r4, r6
1a004802:	2205      	movs	r2, #5
1a004804:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004808:	4855      	ldr	r0, [pc, #340]	; (1a004960 <_vfiprintf_r+0x23c>)
1a00480a:	f000 fc69 	bl	1a0050e0 <memchr>
1a00480e:	9b04      	ldr	r3, [sp, #16]
1a004810:	b9c0      	cbnz	r0, 1a004844 <_vfiprintf_r+0x120>
1a004812:	06da      	lsls	r2, r3, #27
1a004814:	bf44      	itt	mi
1a004816:	2220      	movmi	r2, #32
1a004818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00481c:	0718      	lsls	r0, r3, #28
1a00481e:	bf44      	itt	mi
1a004820:	222b      	movmi	r2, #43	; 0x2b
1a004822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004826:	7832      	ldrb	r2, [r6, #0]
1a004828:	2a2a      	cmp	r2, #42	; 0x2a
1a00482a:	d013      	beq.n	1a004854 <_vfiprintf_r+0x130>
1a00482c:	9a07      	ldr	r2, [sp, #28]
1a00482e:	4634      	mov	r4, r6
1a004830:	2000      	movs	r0, #0
1a004832:	260a      	movs	r6, #10
1a004834:	4621      	mov	r1, r4
1a004836:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00483a:	3b30      	subs	r3, #48	; 0x30
1a00483c:	2b09      	cmp	r3, #9
1a00483e:	d94b      	bls.n	1a0048d8 <_vfiprintf_r+0x1b4>
1a004840:	b970      	cbnz	r0, 1a004860 <_vfiprintf_r+0x13c>
1a004842:	e014      	b.n	1a00486e <_vfiprintf_r+0x14a>
1a004844:	eba0 0009 	sub.w	r0, r0, r9
1a004848:	fa0a f000 	lsl.w	r0, sl, r0
1a00484c:	4318      	orrs	r0, r3
1a00484e:	9004      	str	r0, [sp, #16]
1a004850:	4626      	mov	r6, r4
1a004852:	e7d5      	b.n	1a004800 <_vfiprintf_r+0xdc>
1a004854:	9a03      	ldr	r2, [sp, #12]
1a004856:	1d11      	adds	r1, r2, #4
1a004858:	6812      	ldr	r2, [r2, #0]
1a00485a:	9103      	str	r1, [sp, #12]
1a00485c:	2a00      	cmp	r2, #0
1a00485e:	db01      	blt.n	1a004864 <_vfiprintf_r+0x140>
1a004860:	9207      	str	r2, [sp, #28]
1a004862:	e004      	b.n	1a00486e <_vfiprintf_r+0x14a>
1a004864:	4252      	negs	r2, r2
1a004866:	f043 0302 	orr.w	r3, r3, #2
1a00486a:	9207      	str	r2, [sp, #28]
1a00486c:	9304      	str	r3, [sp, #16]
1a00486e:	7823      	ldrb	r3, [r4, #0]
1a004870:	2b2e      	cmp	r3, #46	; 0x2e
1a004872:	d10c      	bne.n	1a00488e <_vfiprintf_r+0x16a>
1a004874:	7863      	ldrb	r3, [r4, #1]
1a004876:	2b2a      	cmp	r3, #42	; 0x2a
1a004878:	d133      	bne.n	1a0048e2 <_vfiprintf_r+0x1be>
1a00487a:	9b03      	ldr	r3, [sp, #12]
1a00487c:	1d1a      	adds	r2, r3, #4
1a00487e:	681b      	ldr	r3, [r3, #0]
1a004880:	9203      	str	r2, [sp, #12]
1a004882:	2b00      	cmp	r3, #0
1a004884:	bfb8      	it	lt
1a004886:	f04f 33ff 	movlt.w	r3, #4294967295
1a00488a:	3402      	adds	r4, #2
1a00488c:	9305      	str	r3, [sp, #20]
1a00488e:	4e35      	ldr	r6, [pc, #212]	; (1a004964 <_vfiprintf_r+0x240>)
1a004890:	7821      	ldrb	r1, [r4, #0]
1a004892:	2203      	movs	r2, #3
1a004894:	4630      	mov	r0, r6
1a004896:	f000 fc23 	bl	1a0050e0 <memchr>
1a00489a:	b138      	cbz	r0, 1a0048ac <_vfiprintf_r+0x188>
1a00489c:	2340      	movs	r3, #64	; 0x40
1a00489e:	1b80      	subs	r0, r0, r6
1a0048a0:	fa03 f000 	lsl.w	r0, r3, r0
1a0048a4:	9b04      	ldr	r3, [sp, #16]
1a0048a6:	4303      	orrs	r3, r0
1a0048a8:	3401      	adds	r4, #1
1a0048aa:	9304      	str	r3, [sp, #16]
1a0048ac:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0048b0:	482d      	ldr	r0, [pc, #180]	; (1a004968 <_vfiprintf_r+0x244>)
1a0048b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0048b6:	2206      	movs	r2, #6
1a0048b8:	f000 fc12 	bl	1a0050e0 <memchr>
1a0048bc:	2800      	cmp	r0, #0
1a0048be:	d03f      	beq.n	1a004940 <_vfiprintf_r+0x21c>
1a0048c0:	4b2a      	ldr	r3, [pc, #168]	; (1a00496c <_vfiprintf_r+0x248>)
1a0048c2:	bb13      	cbnz	r3, 1a00490a <_vfiprintf_r+0x1e6>
1a0048c4:	9b03      	ldr	r3, [sp, #12]
1a0048c6:	3307      	adds	r3, #7
1a0048c8:	f023 0307 	bic.w	r3, r3, #7
1a0048cc:	3308      	adds	r3, #8
1a0048ce:	9303      	str	r3, [sp, #12]
1a0048d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0048d2:	4443      	add	r3, r8
1a0048d4:	9309      	str	r3, [sp, #36]	; 0x24
1a0048d6:	e76e      	b.n	1a0047b6 <_vfiprintf_r+0x92>
1a0048d8:	fb06 3202 	mla	r2, r6, r2, r3
1a0048dc:	2001      	movs	r0, #1
1a0048de:	460c      	mov	r4, r1
1a0048e0:	e7a8      	b.n	1a004834 <_vfiprintf_r+0x110>
1a0048e2:	2300      	movs	r3, #0
1a0048e4:	3401      	adds	r4, #1
1a0048e6:	9305      	str	r3, [sp, #20]
1a0048e8:	4619      	mov	r1, r3
1a0048ea:	260a      	movs	r6, #10
1a0048ec:	4620      	mov	r0, r4
1a0048ee:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0048f2:	3a30      	subs	r2, #48	; 0x30
1a0048f4:	2a09      	cmp	r2, #9
1a0048f6:	d903      	bls.n	1a004900 <_vfiprintf_r+0x1dc>
1a0048f8:	2b00      	cmp	r3, #0
1a0048fa:	d0c8      	beq.n	1a00488e <_vfiprintf_r+0x16a>
1a0048fc:	9105      	str	r1, [sp, #20]
1a0048fe:	e7c6      	b.n	1a00488e <_vfiprintf_r+0x16a>
1a004900:	fb06 2101 	mla	r1, r6, r1, r2
1a004904:	2301      	movs	r3, #1
1a004906:	4604      	mov	r4, r0
1a004908:	e7f0      	b.n	1a0048ec <_vfiprintf_r+0x1c8>
1a00490a:	ab03      	add	r3, sp, #12
1a00490c:	9300      	str	r3, [sp, #0]
1a00490e:	462a      	mov	r2, r5
1a004910:	4b17      	ldr	r3, [pc, #92]	; (1a004970 <_vfiprintf_r+0x24c>)
1a004912:	a904      	add	r1, sp, #16
1a004914:	4638      	mov	r0, r7
1a004916:	f3af 8000 	nop.w
1a00491a:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00491e:	4680      	mov	r8, r0
1a004920:	d1d6      	bne.n	1a0048d0 <_vfiprintf_r+0x1ac>
1a004922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004924:	07d9      	lsls	r1, r3, #31
1a004926:	d405      	bmi.n	1a004934 <_vfiprintf_r+0x210>
1a004928:	89ab      	ldrh	r3, [r5, #12]
1a00492a:	059a      	lsls	r2, r3, #22
1a00492c:	d402      	bmi.n	1a004934 <_vfiprintf_r+0x210>
1a00492e:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004930:	f7ff fe0e 	bl	1a004550 <__retarget_lock_release_recursive>
1a004934:	89ab      	ldrh	r3, [r5, #12]
1a004936:	065b      	lsls	r3, r3, #25
1a004938:	f53f af1a 	bmi.w	1a004770 <_vfiprintf_r+0x4c>
1a00493c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00493e:	e719      	b.n	1a004774 <_vfiprintf_r+0x50>
1a004940:	ab03      	add	r3, sp, #12
1a004942:	9300      	str	r3, [sp, #0]
1a004944:	462a      	mov	r2, r5
1a004946:	4b0a      	ldr	r3, [pc, #40]	; (1a004970 <_vfiprintf_r+0x24c>)
1a004948:	a904      	add	r1, sp, #16
1a00494a:	4638      	mov	r0, r7
1a00494c:	f000 f888 	bl	1a004a60 <_printf_i>
1a004950:	e7e3      	b.n	1a00491a <_vfiprintf_r+0x1f6>
1a004952:	bf00      	nop
1a004954:	1a0088fc 	.word	0x1a0088fc
1a004958:	1a00891c 	.word	0x1a00891c
1a00495c:	1a0088dc 	.word	0x1a0088dc
1a004960:	1a008940 	.word	0x1a008940
1a004964:	1a008946 	.word	0x1a008946
1a004968:	1a00894a 	.word	0x1a00894a
1a00496c:	00000000 	.word	0x00000000
1a004970:	1a0046ff 	.word	0x1a0046ff

1a004974 <_printf_common>:
1a004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004978:	4691      	mov	r9, r2
1a00497a:	461f      	mov	r7, r3
1a00497c:	688a      	ldr	r2, [r1, #8]
1a00497e:	690b      	ldr	r3, [r1, #16]
1a004980:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004984:	4293      	cmp	r3, r2
1a004986:	bfb8      	it	lt
1a004988:	4613      	movlt	r3, r2
1a00498a:	f8c9 3000 	str.w	r3, [r9]
1a00498e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004992:	4606      	mov	r6, r0
1a004994:	460c      	mov	r4, r1
1a004996:	b112      	cbz	r2, 1a00499e <_printf_common+0x2a>
1a004998:	3301      	adds	r3, #1
1a00499a:	f8c9 3000 	str.w	r3, [r9]
1a00499e:	6823      	ldr	r3, [r4, #0]
1a0049a0:	0699      	lsls	r1, r3, #26
1a0049a2:	bf42      	ittt	mi
1a0049a4:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0049a8:	3302      	addmi	r3, #2
1a0049aa:	f8c9 3000 	strmi.w	r3, [r9]
1a0049ae:	6825      	ldr	r5, [r4, #0]
1a0049b0:	f015 0506 	ands.w	r5, r5, #6
1a0049b4:	d107      	bne.n	1a0049c6 <_printf_common+0x52>
1a0049b6:	f104 0a19 	add.w	sl, r4, #25
1a0049ba:	68e3      	ldr	r3, [r4, #12]
1a0049bc:	f8d9 2000 	ldr.w	r2, [r9]
1a0049c0:	1a9b      	subs	r3, r3, r2
1a0049c2:	42ab      	cmp	r3, r5
1a0049c4:	dc28      	bgt.n	1a004a18 <_printf_common+0xa4>
1a0049c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0049ca:	6822      	ldr	r2, [r4, #0]
1a0049cc:	3300      	adds	r3, #0
1a0049ce:	bf18      	it	ne
1a0049d0:	2301      	movne	r3, #1
1a0049d2:	0692      	lsls	r2, r2, #26
1a0049d4:	d42d      	bmi.n	1a004a32 <_printf_common+0xbe>
1a0049d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0049da:	4639      	mov	r1, r7
1a0049dc:	4630      	mov	r0, r6
1a0049de:	47c0      	blx	r8
1a0049e0:	3001      	adds	r0, #1
1a0049e2:	d020      	beq.n	1a004a26 <_printf_common+0xb2>
1a0049e4:	6823      	ldr	r3, [r4, #0]
1a0049e6:	68e5      	ldr	r5, [r4, #12]
1a0049e8:	f8d9 2000 	ldr.w	r2, [r9]
1a0049ec:	f003 0306 	and.w	r3, r3, #6
1a0049f0:	2b04      	cmp	r3, #4
1a0049f2:	bf08      	it	eq
1a0049f4:	1aad      	subeq	r5, r5, r2
1a0049f6:	68a3      	ldr	r3, [r4, #8]
1a0049f8:	6922      	ldr	r2, [r4, #16]
1a0049fa:	bf0c      	ite	eq
1a0049fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004a00:	2500      	movne	r5, #0
1a004a02:	4293      	cmp	r3, r2
1a004a04:	bfc4      	itt	gt
1a004a06:	1a9b      	subgt	r3, r3, r2
1a004a08:	18ed      	addgt	r5, r5, r3
1a004a0a:	f04f 0900 	mov.w	r9, #0
1a004a0e:	341a      	adds	r4, #26
1a004a10:	454d      	cmp	r5, r9
1a004a12:	d11a      	bne.n	1a004a4a <_printf_common+0xd6>
1a004a14:	2000      	movs	r0, #0
1a004a16:	e008      	b.n	1a004a2a <_printf_common+0xb6>
1a004a18:	2301      	movs	r3, #1
1a004a1a:	4652      	mov	r2, sl
1a004a1c:	4639      	mov	r1, r7
1a004a1e:	4630      	mov	r0, r6
1a004a20:	47c0      	blx	r8
1a004a22:	3001      	adds	r0, #1
1a004a24:	d103      	bne.n	1a004a2e <_printf_common+0xba>
1a004a26:	f04f 30ff 	mov.w	r0, #4294967295
1a004a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004a2e:	3501      	adds	r5, #1
1a004a30:	e7c3      	b.n	1a0049ba <_printf_common+0x46>
1a004a32:	18e1      	adds	r1, r4, r3
1a004a34:	1c5a      	adds	r2, r3, #1
1a004a36:	2030      	movs	r0, #48	; 0x30
1a004a38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004a3c:	4422      	add	r2, r4
1a004a3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004a42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004a46:	3302      	adds	r3, #2
1a004a48:	e7c5      	b.n	1a0049d6 <_printf_common+0x62>
1a004a4a:	2301      	movs	r3, #1
1a004a4c:	4622      	mov	r2, r4
1a004a4e:	4639      	mov	r1, r7
1a004a50:	4630      	mov	r0, r6
1a004a52:	47c0      	blx	r8
1a004a54:	3001      	adds	r0, #1
1a004a56:	d0e6      	beq.n	1a004a26 <_printf_common+0xb2>
1a004a58:	f109 0901 	add.w	r9, r9, #1
1a004a5c:	e7d8      	b.n	1a004a10 <_printf_common+0x9c>
1a004a5e:	Address 0x1a004a5e is out of bounds.


1a004a60 <_printf_i>:
1a004a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004a64:	4606      	mov	r6, r0
1a004a66:	460c      	mov	r4, r1
1a004a68:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a004a6c:	7e09      	ldrb	r1, [r1, #24]
1a004a6e:	b085      	sub	sp, #20
1a004a70:	296e      	cmp	r1, #110	; 0x6e
1a004a72:	4698      	mov	r8, r3
1a004a74:	4617      	mov	r7, r2
1a004a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004a78:	f000 80ba 	beq.w	1a004bf0 <_printf_i+0x190>
1a004a7c:	d824      	bhi.n	1a004ac8 <_printf_i+0x68>
1a004a7e:	2963      	cmp	r1, #99	; 0x63
1a004a80:	d039      	beq.n	1a004af6 <_printf_i+0x96>
1a004a82:	d80a      	bhi.n	1a004a9a <_printf_i+0x3a>
1a004a84:	2900      	cmp	r1, #0
1a004a86:	f000 80c3 	beq.w	1a004c10 <_printf_i+0x1b0>
1a004a8a:	2958      	cmp	r1, #88	; 0x58
1a004a8c:	f000 8091 	beq.w	1a004bb2 <_printf_i+0x152>
1a004a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004a94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004a98:	e035      	b.n	1a004b06 <_printf_i+0xa6>
1a004a9a:	2964      	cmp	r1, #100	; 0x64
1a004a9c:	d001      	beq.n	1a004aa2 <_printf_i+0x42>
1a004a9e:	2969      	cmp	r1, #105	; 0x69
1a004aa0:	d1f6      	bne.n	1a004a90 <_printf_i+0x30>
1a004aa2:	6825      	ldr	r5, [r4, #0]
1a004aa4:	681a      	ldr	r2, [r3, #0]
1a004aa6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a004aaa:	f102 0104 	add.w	r1, r2, #4
1a004aae:	d02c      	beq.n	1a004b0a <_printf_i+0xaa>
1a004ab0:	6812      	ldr	r2, [r2, #0]
1a004ab2:	6019      	str	r1, [r3, #0]
1a004ab4:	2a00      	cmp	r2, #0
1a004ab6:	da03      	bge.n	1a004ac0 <_printf_i+0x60>
1a004ab8:	232d      	movs	r3, #45	; 0x2d
1a004aba:	4252      	negs	r2, r2
1a004abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004ac0:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a004c80 <_printf_i+0x220>
1a004ac4:	230a      	movs	r3, #10
1a004ac6:	e03f      	b.n	1a004b48 <_printf_i+0xe8>
1a004ac8:	2973      	cmp	r1, #115	; 0x73
1a004aca:	f000 80a5 	beq.w	1a004c18 <_printf_i+0x1b8>
1a004ace:	d808      	bhi.n	1a004ae2 <_printf_i+0x82>
1a004ad0:	296f      	cmp	r1, #111	; 0x6f
1a004ad2:	d021      	beq.n	1a004b18 <_printf_i+0xb8>
1a004ad4:	2970      	cmp	r1, #112	; 0x70
1a004ad6:	d1db      	bne.n	1a004a90 <_printf_i+0x30>
1a004ad8:	6822      	ldr	r2, [r4, #0]
1a004ada:	f042 0220 	orr.w	r2, r2, #32
1a004ade:	6022      	str	r2, [r4, #0]
1a004ae0:	e003      	b.n	1a004aea <_printf_i+0x8a>
1a004ae2:	2975      	cmp	r1, #117	; 0x75
1a004ae4:	d018      	beq.n	1a004b18 <_printf_i+0xb8>
1a004ae6:	2978      	cmp	r1, #120	; 0x78
1a004ae8:	d1d2      	bne.n	1a004a90 <_printf_i+0x30>
1a004aea:	2278      	movs	r2, #120	; 0x78
1a004aec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a004af0:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a004c84 <_printf_i+0x224>
1a004af4:	e061      	b.n	1a004bba <_printf_i+0x15a>
1a004af6:	681a      	ldr	r2, [r3, #0]
1a004af8:	1d11      	adds	r1, r2, #4
1a004afa:	6019      	str	r1, [r3, #0]
1a004afc:	6813      	ldr	r3, [r2, #0]
1a004afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004b02:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004b06:	2301      	movs	r3, #1
1a004b08:	e093      	b.n	1a004c32 <_printf_i+0x1d2>
1a004b0a:	6812      	ldr	r2, [r2, #0]
1a004b0c:	6019      	str	r1, [r3, #0]
1a004b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
1a004b12:	bf18      	it	ne
1a004b14:	b212      	sxthne	r2, r2
1a004b16:	e7cd      	b.n	1a004ab4 <_printf_i+0x54>
1a004b18:	f8d4 c000 	ldr.w	ip, [r4]
1a004b1c:	681a      	ldr	r2, [r3, #0]
1a004b1e:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a004b22:	f102 0504 	add.w	r5, r2, #4
1a004b26:	601d      	str	r5, [r3, #0]
1a004b28:	d001      	beq.n	1a004b2e <_printf_i+0xce>
1a004b2a:	6812      	ldr	r2, [r2, #0]
1a004b2c:	e003      	b.n	1a004b36 <_printf_i+0xd6>
1a004b2e:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004b32:	d0fa      	beq.n	1a004b2a <_printf_i+0xca>
1a004b34:	8812      	ldrh	r2, [r2, #0]
1a004b36:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a004c80 <_printf_i+0x220>
1a004b3a:	296f      	cmp	r1, #111	; 0x6f
1a004b3c:	bf0c      	ite	eq
1a004b3e:	2308      	moveq	r3, #8
1a004b40:	230a      	movne	r3, #10
1a004b42:	2100      	movs	r1, #0
1a004b44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004b48:	6865      	ldr	r5, [r4, #4]
1a004b4a:	60a5      	str	r5, [r4, #8]
1a004b4c:	2d00      	cmp	r5, #0
1a004b4e:	bfa2      	ittt	ge
1a004b50:	6821      	ldrge	r1, [r4, #0]
1a004b52:	f021 0104 	bicge.w	r1, r1, #4
1a004b56:	6021      	strge	r1, [r4, #0]
1a004b58:	b90a      	cbnz	r2, 1a004b5e <_printf_i+0xfe>
1a004b5a:	2d00      	cmp	r5, #0
1a004b5c:	d046      	beq.n	1a004bec <_printf_i+0x18c>
1a004b5e:	4605      	mov	r5, r0
1a004b60:	fbb2 f1f3 	udiv	r1, r2, r3
1a004b64:	fb03 2e11 	mls	lr, r3, r1, r2
1a004b68:	4293      	cmp	r3, r2
1a004b6a:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a004b6e:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a004b72:	d939      	bls.n	1a004be8 <_printf_i+0x188>
1a004b74:	2b08      	cmp	r3, #8
1a004b76:	d10b      	bne.n	1a004b90 <_printf_i+0x130>
1a004b78:	6823      	ldr	r3, [r4, #0]
1a004b7a:	07da      	lsls	r2, r3, #31
1a004b7c:	d508      	bpl.n	1a004b90 <_printf_i+0x130>
1a004b7e:	6923      	ldr	r3, [r4, #16]
1a004b80:	6862      	ldr	r2, [r4, #4]
1a004b82:	429a      	cmp	r2, r3
1a004b84:	bfde      	ittt	le
1a004b86:	2330      	movle	r3, #48	; 0x30
1a004b88:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
1a004b90:	1b40      	subs	r0, r0, r5
1a004b92:	6120      	str	r0, [r4, #16]
1a004b94:	f8cd 8000 	str.w	r8, [sp]
1a004b98:	463b      	mov	r3, r7
1a004b9a:	aa03      	add	r2, sp, #12
1a004b9c:	4621      	mov	r1, r4
1a004b9e:	4630      	mov	r0, r6
1a004ba0:	f7ff fee8 	bl	1a004974 <_printf_common>
1a004ba4:	3001      	adds	r0, #1
1a004ba6:	d149      	bne.n	1a004c3c <_printf_i+0x1dc>
1a004ba8:	f04f 30ff 	mov.w	r0, #4294967295
1a004bac:	b005      	add	sp, #20
1a004bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004bb2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a004c80 <_printf_i+0x220>
1a004bb6:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004bba:	681d      	ldr	r5, [r3, #0]
1a004bbc:	6821      	ldr	r1, [r4, #0]
1a004bbe:	f855 2b04 	ldr.w	r2, [r5], #4
1a004bc2:	601d      	str	r5, [r3, #0]
1a004bc4:	060d      	lsls	r5, r1, #24
1a004bc6:	d50b      	bpl.n	1a004be0 <_printf_i+0x180>
1a004bc8:	07cd      	lsls	r5, r1, #31
1a004bca:	bf44      	itt	mi
1a004bcc:	f041 0120 	orrmi.w	r1, r1, #32
1a004bd0:	6021      	strmi	r1, [r4, #0]
1a004bd2:	b91a      	cbnz	r2, 1a004bdc <_printf_i+0x17c>
1a004bd4:	6823      	ldr	r3, [r4, #0]
1a004bd6:	f023 0320 	bic.w	r3, r3, #32
1a004bda:	6023      	str	r3, [r4, #0]
1a004bdc:	2310      	movs	r3, #16
1a004bde:	e7b0      	b.n	1a004b42 <_printf_i+0xe2>
1a004be0:	064b      	lsls	r3, r1, #25
1a004be2:	bf48      	it	mi
1a004be4:	b292      	uxthmi	r2, r2
1a004be6:	e7ef      	b.n	1a004bc8 <_printf_i+0x168>
1a004be8:	460a      	mov	r2, r1
1a004bea:	e7b9      	b.n	1a004b60 <_printf_i+0x100>
1a004bec:	4605      	mov	r5, r0
1a004bee:	e7c1      	b.n	1a004b74 <_printf_i+0x114>
1a004bf0:	681a      	ldr	r2, [r3, #0]
1a004bf2:	f8d4 c000 	ldr.w	ip, [r4]
1a004bf6:	6961      	ldr	r1, [r4, #20]
1a004bf8:	1d15      	adds	r5, r2, #4
1a004bfa:	601d      	str	r5, [r3, #0]
1a004bfc:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a004c00:	6813      	ldr	r3, [r2, #0]
1a004c02:	d001      	beq.n	1a004c08 <_printf_i+0x1a8>
1a004c04:	6019      	str	r1, [r3, #0]
1a004c06:	e003      	b.n	1a004c10 <_printf_i+0x1b0>
1a004c08:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004c0c:	d0fa      	beq.n	1a004c04 <_printf_i+0x1a4>
1a004c0e:	8019      	strh	r1, [r3, #0]
1a004c10:	2300      	movs	r3, #0
1a004c12:	6123      	str	r3, [r4, #16]
1a004c14:	4605      	mov	r5, r0
1a004c16:	e7bd      	b.n	1a004b94 <_printf_i+0x134>
1a004c18:	681a      	ldr	r2, [r3, #0]
1a004c1a:	1d11      	adds	r1, r2, #4
1a004c1c:	6019      	str	r1, [r3, #0]
1a004c1e:	6815      	ldr	r5, [r2, #0]
1a004c20:	6862      	ldr	r2, [r4, #4]
1a004c22:	2100      	movs	r1, #0
1a004c24:	4628      	mov	r0, r5
1a004c26:	f000 fa5b 	bl	1a0050e0 <memchr>
1a004c2a:	b108      	cbz	r0, 1a004c30 <_printf_i+0x1d0>
1a004c2c:	1b40      	subs	r0, r0, r5
1a004c2e:	6060      	str	r0, [r4, #4]
1a004c30:	6863      	ldr	r3, [r4, #4]
1a004c32:	6123      	str	r3, [r4, #16]
1a004c34:	2300      	movs	r3, #0
1a004c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004c3a:	e7ab      	b.n	1a004b94 <_printf_i+0x134>
1a004c3c:	6923      	ldr	r3, [r4, #16]
1a004c3e:	462a      	mov	r2, r5
1a004c40:	4639      	mov	r1, r7
1a004c42:	4630      	mov	r0, r6
1a004c44:	47c0      	blx	r8
1a004c46:	3001      	adds	r0, #1
1a004c48:	d0ae      	beq.n	1a004ba8 <_printf_i+0x148>
1a004c4a:	6823      	ldr	r3, [r4, #0]
1a004c4c:	079b      	lsls	r3, r3, #30
1a004c4e:	d413      	bmi.n	1a004c78 <_printf_i+0x218>
1a004c50:	68e0      	ldr	r0, [r4, #12]
1a004c52:	9b03      	ldr	r3, [sp, #12]
1a004c54:	4298      	cmp	r0, r3
1a004c56:	bfb8      	it	lt
1a004c58:	4618      	movlt	r0, r3
1a004c5a:	e7a7      	b.n	1a004bac <_printf_i+0x14c>
1a004c5c:	2301      	movs	r3, #1
1a004c5e:	464a      	mov	r2, r9
1a004c60:	4639      	mov	r1, r7
1a004c62:	4630      	mov	r0, r6
1a004c64:	47c0      	blx	r8
1a004c66:	3001      	adds	r0, #1
1a004c68:	d09e      	beq.n	1a004ba8 <_printf_i+0x148>
1a004c6a:	3501      	adds	r5, #1
1a004c6c:	68e3      	ldr	r3, [r4, #12]
1a004c6e:	9a03      	ldr	r2, [sp, #12]
1a004c70:	1a9b      	subs	r3, r3, r2
1a004c72:	42ab      	cmp	r3, r5
1a004c74:	dcf2      	bgt.n	1a004c5c <_printf_i+0x1fc>
1a004c76:	e7eb      	b.n	1a004c50 <_printf_i+0x1f0>
1a004c78:	2500      	movs	r5, #0
1a004c7a:	f104 0919 	add.w	r9, r4, #25
1a004c7e:	e7f5      	b.n	1a004c6c <_printf_i+0x20c>
1a004c80:	1a008951 	.word	0x1a008951
1a004c84:	1a008962 	.word	0x1a008962

1a004c88 <iprintf>:
1a004c88:	b40f      	push	{r0, r1, r2, r3}
1a004c8a:	4b0a      	ldr	r3, [pc, #40]	; (1a004cb4 <iprintf+0x2c>)
1a004c8c:	b513      	push	{r0, r1, r4, lr}
1a004c8e:	681c      	ldr	r4, [r3, #0]
1a004c90:	b124      	cbz	r4, 1a004c9c <iprintf+0x14>
1a004c92:	69a3      	ldr	r3, [r4, #24]
1a004c94:	b913      	cbnz	r3, 1a004c9c <iprintf+0x14>
1a004c96:	4620      	mov	r0, r4
1a004c98:	f7ff fb98 	bl	1a0043cc <__sinit>
1a004c9c:	ab05      	add	r3, sp, #20
1a004c9e:	9a04      	ldr	r2, [sp, #16]
1a004ca0:	68a1      	ldr	r1, [r4, #8]
1a004ca2:	9301      	str	r3, [sp, #4]
1a004ca4:	4620      	mov	r0, r4
1a004ca6:	f7ff fd3d 	bl	1a004724 <_vfiprintf_r>
1a004caa:	b002      	add	sp, #8
1a004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004cb0:	b004      	add	sp, #16
1a004cb2:	4770      	bx	lr
1a004cb4:	10000040 	.word	0x10000040

1a004cb8 <_puts_r>:
1a004cb8:	b570      	push	{r4, r5, r6, lr}
1a004cba:	460e      	mov	r6, r1
1a004cbc:	4605      	mov	r5, r0
1a004cbe:	b118      	cbz	r0, 1a004cc8 <_puts_r+0x10>
1a004cc0:	6983      	ldr	r3, [r0, #24]
1a004cc2:	b90b      	cbnz	r3, 1a004cc8 <_puts_r+0x10>
1a004cc4:	f7ff fb82 	bl	1a0043cc <__sinit>
1a004cc8:	69ab      	ldr	r3, [r5, #24]
1a004cca:	68ac      	ldr	r4, [r5, #8]
1a004ccc:	b913      	cbnz	r3, 1a004cd4 <_puts_r+0x1c>
1a004cce:	4628      	mov	r0, r5
1a004cd0:	f7ff fb7c 	bl	1a0043cc <__sinit>
1a004cd4:	4b2c      	ldr	r3, [pc, #176]	; (1a004d88 <_puts_r+0xd0>)
1a004cd6:	429c      	cmp	r4, r3
1a004cd8:	d120      	bne.n	1a004d1c <_puts_r+0x64>
1a004cda:	686c      	ldr	r4, [r5, #4]
1a004cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004cde:	07db      	lsls	r3, r3, #31
1a004ce0:	d405      	bmi.n	1a004cee <_puts_r+0x36>
1a004ce2:	89a3      	ldrh	r3, [r4, #12]
1a004ce4:	0598      	lsls	r0, r3, #22
1a004ce6:	d402      	bmi.n	1a004cee <_puts_r+0x36>
1a004ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004cea:	f7ff fc30 	bl	1a00454e <__retarget_lock_acquire_recursive>
1a004cee:	89a3      	ldrh	r3, [r4, #12]
1a004cf0:	0719      	lsls	r1, r3, #28
1a004cf2:	d51d      	bpl.n	1a004d30 <_puts_r+0x78>
1a004cf4:	6923      	ldr	r3, [r4, #16]
1a004cf6:	b1db      	cbz	r3, 1a004d30 <_puts_r+0x78>
1a004cf8:	3e01      	subs	r6, #1
1a004cfa:	68a3      	ldr	r3, [r4, #8]
1a004cfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a004d00:	3b01      	subs	r3, #1
1a004d02:	60a3      	str	r3, [r4, #8]
1a004d04:	bb39      	cbnz	r1, 1a004d56 <_puts_r+0x9e>
1a004d06:	2b00      	cmp	r3, #0
1a004d08:	da38      	bge.n	1a004d7c <_puts_r+0xc4>
1a004d0a:	4622      	mov	r2, r4
1a004d0c:	210a      	movs	r1, #10
1a004d0e:	4628      	mov	r0, r5
1a004d10:	f000 f8be 	bl	1a004e90 <__swbuf_r>
1a004d14:	3001      	adds	r0, #1
1a004d16:	d011      	beq.n	1a004d3c <_puts_r+0x84>
1a004d18:	250a      	movs	r5, #10
1a004d1a:	e011      	b.n	1a004d40 <_puts_r+0x88>
1a004d1c:	4b1b      	ldr	r3, [pc, #108]	; (1a004d8c <_puts_r+0xd4>)
1a004d1e:	429c      	cmp	r4, r3
1a004d20:	d101      	bne.n	1a004d26 <_puts_r+0x6e>
1a004d22:	68ac      	ldr	r4, [r5, #8]
1a004d24:	e7da      	b.n	1a004cdc <_puts_r+0x24>
1a004d26:	4b1a      	ldr	r3, [pc, #104]	; (1a004d90 <_puts_r+0xd8>)
1a004d28:	429c      	cmp	r4, r3
1a004d2a:	bf08      	it	eq
1a004d2c:	68ec      	ldreq	r4, [r5, #12]
1a004d2e:	e7d5      	b.n	1a004cdc <_puts_r+0x24>
1a004d30:	4621      	mov	r1, r4
1a004d32:	4628      	mov	r0, r5
1a004d34:	f000 f8fe 	bl	1a004f34 <__swsetup_r>
1a004d38:	2800      	cmp	r0, #0
1a004d3a:	d0dd      	beq.n	1a004cf8 <_puts_r+0x40>
1a004d3c:	f04f 35ff 	mov.w	r5, #4294967295
1a004d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004d42:	07da      	lsls	r2, r3, #31
1a004d44:	d405      	bmi.n	1a004d52 <_puts_r+0x9a>
1a004d46:	89a3      	ldrh	r3, [r4, #12]
1a004d48:	059b      	lsls	r3, r3, #22
1a004d4a:	d402      	bmi.n	1a004d52 <_puts_r+0x9a>
1a004d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004d4e:	f7ff fbff 	bl	1a004550 <__retarget_lock_release_recursive>
1a004d52:	4628      	mov	r0, r5
1a004d54:	bd70      	pop	{r4, r5, r6, pc}
1a004d56:	2b00      	cmp	r3, #0
1a004d58:	da04      	bge.n	1a004d64 <_puts_r+0xac>
1a004d5a:	69a2      	ldr	r2, [r4, #24]
1a004d5c:	429a      	cmp	r2, r3
1a004d5e:	dc06      	bgt.n	1a004d6e <_puts_r+0xb6>
1a004d60:	290a      	cmp	r1, #10
1a004d62:	d004      	beq.n	1a004d6e <_puts_r+0xb6>
1a004d64:	6823      	ldr	r3, [r4, #0]
1a004d66:	1c5a      	adds	r2, r3, #1
1a004d68:	6022      	str	r2, [r4, #0]
1a004d6a:	7019      	strb	r1, [r3, #0]
1a004d6c:	e7c5      	b.n	1a004cfa <_puts_r+0x42>
1a004d6e:	4622      	mov	r2, r4
1a004d70:	4628      	mov	r0, r5
1a004d72:	f000 f88d 	bl	1a004e90 <__swbuf_r>
1a004d76:	3001      	adds	r0, #1
1a004d78:	d1bf      	bne.n	1a004cfa <_puts_r+0x42>
1a004d7a:	e7df      	b.n	1a004d3c <_puts_r+0x84>
1a004d7c:	6823      	ldr	r3, [r4, #0]
1a004d7e:	250a      	movs	r5, #10
1a004d80:	1c5a      	adds	r2, r3, #1
1a004d82:	6022      	str	r2, [r4, #0]
1a004d84:	701d      	strb	r5, [r3, #0]
1a004d86:	e7db      	b.n	1a004d40 <_puts_r+0x88>
1a004d88:	1a0088fc 	.word	0x1a0088fc
1a004d8c:	1a00891c 	.word	0x1a00891c
1a004d90:	1a0088dc 	.word	0x1a0088dc

1a004d94 <puts>:
1a004d94:	4b02      	ldr	r3, [pc, #8]	; (1a004da0 <puts+0xc>)
1a004d96:	4601      	mov	r1, r0
1a004d98:	6818      	ldr	r0, [r3, #0]
1a004d9a:	f7ff bf8d 	b.w	1a004cb8 <_puts_r>
1a004d9e:	bf00      	nop
1a004da0:	10000040 	.word	0x10000040

1a004da4 <siprintf>:
1a004da4:	b40e      	push	{r1, r2, r3}
1a004da6:	b500      	push	{lr}
1a004da8:	b09c      	sub	sp, #112	; 0x70
1a004daa:	ab1d      	add	r3, sp, #116	; 0x74
1a004dac:	9002      	str	r0, [sp, #8]
1a004dae:	9006      	str	r0, [sp, #24]
1a004db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a004db4:	4809      	ldr	r0, [pc, #36]	; (1a004ddc <siprintf+0x38>)
1a004db6:	9107      	str	r1, [sp, #28]
1a004db8:	9104      	str	r1, [sp, #16]
1a004dba:	4909      	ldr	r1, [pc, #36]	; (1a004de0 <siprintf+0x3c>)
1a004dbc:	f853 2b04 	ldr.w	r2, [r3], #4
1a004dc0:	9105      	str	r1, [sp, #20]
1a004dc2:	6800      	ldr	r0, [r0, #0]
1a004dc4:	9301      	str	r3, [sp, #4]
1a004dc6:	a902      	add	r1, sp, #8
1a004dc8:	f000 fa82 	bl	1a0052d0 <_svfiprintf_r>
1a004dcc:	9b02      	ldr	r3, [sp, #8]
1a004dce:	2200      	movs	r2, #0
1a004dd0:	701a      	strb	r2, [r3, #0]
1a004dd2:	b01c      	add	sp, #112	; 0x70
1a004dd4:	f85d eb04 	ldr.w	lr, [sp], #4
1a004dd8:	b003      	add	sp, #12
1a004dda:	4770      	bx	lr
1a004ddc:	10000040 	.word	0x10000040
1a004de0:	ffff0208 	.word	0xffff0208

1a004de4 <__sread>:
1a004de4:	b510      	push	{r4, lr}
1a004de6:	460c      	mov	r4, r1
1a004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004dec:	f7fb fd2c 	bl	1a000848 <_read_r>
1a004df0:	2800      	cmp	r0, #0
1a004df2:	bfab      	itete	ge
1a004df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004df6:	89a3      	ldrhlt	r3, [r4, #12]
1a004df8:	181b      	addge	r3, r3, r0
1a004dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004dfe:	bfac      	ite	ge
1a004e00:	6563      	strge	r3, [r4, #84]	; 0x54
1a004e02:	81a3      	strhlt	r3, [r4, #12]
1a004e04:	bd10      	pop	{r4, pc}

1a004e06 <__swrite>:
1a004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004e0a:	461f      	mov	r7, r3
1a004e0c:	898b      	ldrh	r3, [r1, #12]
1a004e0e:	05db      	lsls	r3, r3, #23
1a004e10:	4605      	mov	r5, r0
1a004e12:	460c      	mov	r4, r1
1a004e14:	4616      	mov	r6, r2
1a004e16:	d505      	bpl.n	1a004e24 <__swrite+0x1e>
1a004e18:	2302      	movs	r3, #2
1a004e1a:	2200      	movs	r2, #0
1a004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004e20:	f7fb fd0d 	bl	1a00083e <_lseek_r>
1a004e24:	89a3      	ldrh	r3, [r4, #12]
1a004e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004e2e:	81a3      	strh	r3, [r4, #12]
1a004e30:	4632      	mov	r2, r6
1a004e32:	463b      	mov	r3, r7
1a004e34:	4628      	mov	r0, r5
1a004e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004e3a:	f7fb bd2c 	b.w	1a000896 <_write_r>

1a004e3e <__sseek>:
1a004e3e:	b510      	push	{r4, lr}
1a004e40:	460c      	mov	r4, r1
1a004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004e46:	f7fb fcfa 	bl	1a00083e <_lseek_r>
1a004e4a:	1c43      	adds	r3, r0, #1
1a004e4c:	89a3      	ldrh	r3, [r4, #12]
1a004e4e:	bf15      	itete	ne
1a004e50:	6560      	strne	r0, [r4, #84]	; 0x54
1a004e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004e5a:	81a3      	strheq	r3, [r4, #12]
1a004e5c:	bf18      	it	ne
1a004e5e:	81a3      	strhne	r3, [r4, #12]
1a004e60:	bd10      	pop	{r4, pc}

1a004e62 <__sclose>:
1a004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004e66:	f7fb bcd7 	b.w	1a000818 <_close_r>

1a004e6a <strncpy>:
1a004e6a:	b510      	push	{r4, lr}
1a004e6c:	3901      	subs	r1, #1
1a004e6e:	4603      	mov	r3, r0
1a004e70:	b132      	cbz	r2, 1a004e80 <strncpy+0x16>
1a004e72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a004e76:	f803 4b01 	strb.w	r4, [r3], #1
1a004e7a:	3a01      	subs	r2, #1
1a004e7c:	2c00      	cmp	r4, #0
1a004e7e:	d1f7      	bne.n	1a004e70 <strncpy+0x6>
1a004e80:	441a      	add	r2, r3
1a004e82:	2100      	movs	r1, #0
1a004e84:	4293      	cmp	r3, r2
1a004e86:	d100      	bne.n	1a004e8a <strncpy+0x20>
1a004e88:	bd10      	pop	{r4, pc}
1a004e8a:	f803 1b01 	strb.w	r1, [r3], #1
1a004e8e:	e7f9      	b.n	1a004e84 <strncpy+0x1a>

1a004e90 <__swbuf_r>:
1a004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004e92:	460e      	mov	r6, r1
1a004e94:	4614      	mov	r4, r2
1a004e96:	4605      	mov	r5, r0
1a004e98:	b118      	cbz	r0, 1a004ea2 <__swbuf_r+0x12>
1a004e9a:	6983      	ldr	r3, [r0, #24]
1a004e9c:	b90b      	cbnz	r3, 1a004ea2 <__swbuf_r+0x12>
1a004e9e:	f7ff fa95 	bl	1a0043cc <__sinit>
1a004ea2:	4b21      	ldr	r3, [pc, #132]	; (1a004f28 <__swbuf_r+0x98>)
1a004ea4:	429c      	cmp	r4, r3
1a004ea6:	d12b      	bne.n	1a004f00 <__swbuf_r+0x70>
1a004ea8:	686c      	ldr	r4, [r5, #4]
1a004eaa:	69a3      	ldr	r3, [r4, #24]
1a004eac:	60a3      	str	r3, [r4, #8]
1a004eae:	89a3      	ldrh	r3, [r4, #12]
1a004eb0:	071a      	lsls	r2, r3, #28
1a004eb2:	d52f      	bpl.n	1a004f14 <__swbuf_r+0x84>
1a004eb4:	6923      	ldr	r3, [r4, #16]
1a004eb6:	b36b      	cbz	r3, 1a004f14 <__swbuf_r+0x84>
1a004eb8:	6923      	ldr	r3, [r4, #16]
1a004eba:	6820      	ldr	r0, [r4, #0]
1a004ebc:	1ac0      	subs	r0, r0, r3
1a004ebe:	6963      	ldr	r3, [r4, #20]
1a004ec0:	b2f6      	uxtb	r6, r6
1a004ec2:	4283      	cmp	r3, r0
1a004ec4:	4637      	mov	r7, r6
1a004ec6:	dc04      	bgt.n	1a004ed2 <__swbuf_r+0x42>
1a004ec8:	4621      	mov	r1, r4
1a004eca:	4628      	mov	r0, r5
1a004ecc:	f7ff f9ea 	bl	1a0042a4 <_fflush_r>
1a004ed0:	bb30      	cbnz	r0, 1a004f20 <__swbuf_r+0x90>
1a004ed2:	68a3      	ldr	r3, [r4, #8]
1a004ed4:	3b01      	subs	r3, #1
1a004ed6:	60a3      	str	r3, [r4, #8]
1a004ed8:	6823      	ldr	r3, [r4, #0]
1a004eda:	1c5a      	adds	r2, r3, #1
1a004edc:	6022      	str	r2, [r4, #0]
1a004ede:	701e      	strb	r6, [r3, #0]
1a004ee0:	6963      	ldr	r3, [r4, #20]
1a004ee2:	3001      	adds	r0, #1
1a004ee4:	4283      	cmp	r3, r0
1a004ee6:	d004      	beq.n	1a004ef2 <__swbuf_r+0x62>
1a004ee8:	89a3      	ldrh	r3, [r4, #12]
1a004eea:	07db      	lsls	r3, r3, #31
1a004eec:	d506      	bpl.n	1a004efc <__swbuf_r+0x6c>
1a004eee:	2e0a      	cmp	r6, #10
1a004ef0:	d104      	bne.n	1a004efc <__swbuf_r+0x6c>
1a004ef2:	4621      	mov	r1, r4
1a004ef4:	4628      	mov	r0, r5
1a004ef6:	f7ff f9d5 	bl	1a0042a4 <_fflush_r>
1a004efa:	b988      	cbnz	r0, 1a004f20 <__swbuf_r+0x90>
1a004efc:	4638      	mov	r0, r7
1a004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004f00:	4b0a      	ldr	r3, [pc, #40]	; (1a004f2c <__swbuf_r+0x9c>)
1a004f02:	429c      	cmp	r4, r3
1a004f04:	d101      	bne.n	1a004f0a <__swbuf_r+0x7a>
1a004f06:	68ac      	ldr	r4, [r5, #8]
1a004f08:	e7cf      	b.n	1a004eaa <__swbuf_r+0x1a>
1a004f0a:	4b09      	ldr	r3, [pc, #36]	; (1a004f30 <__swbuf_r+0xa0>)
1a004f0c:	429c      	cmp	r4, r3
1a004f0e:	bf08      	it	eq
1a004f10:	68ec      	ldreq	r4, [r5, #12]
1a004f12:	e7ca      	b.n	1a004eaa <__swbuf_r+0x1a>
1a004f14:	4621      	mov	r1, r4
1a004f16:	4628      	mov	r0, r5
1a004f18:	f000 f80c 	bl	1a004f34 <__swsetup_r>
1a004f1c:	2800      	cmp	r0, #0
1a004f1e:	d0cb      	beq.n	1a004eb8 <__swbuf_r+0x28>
1a004f20:	f04f 37ff 	mov.w	r7, #4294967295
1a004f24:	e7ea      	b.n	1a004efc <__swbuf_r+0x6c>
1a004f26:	bf00      	nop
1a004f28:	1a0088fc 	.word	0x1a0088fc
1a004f2c:	1a00891c 	.word	0x1a00891c
1a004f30:	1a0088dc 	.word	0x1a0088dc

1a004f34 <__swsetup_r>:
1a004f34:	4b32      	ldr	r3, [pc, #200]	; (1a005000 <__swsetup_r+0xcc>)
1a004f36:	b570      	push	{r4, r5, r6, lr}
1a004f38:	681d      	ldr	r5, [r3, #0]
1a004f3a:	4606      	mov	r6, r0
1a004f3c:	460c      	mov	r4, r1
1a004f3e:	b125      	cbz	r5, 1a004f4a <__swsetup_r+0x16>
1a004f40:	69ab      	ldr	r3, [r5, #24]
1a004f42:	b913      	cbnz	r3, 1a004f4a <__swsetup_r+0x16>
1a004f44:	4628      	mov	r0, r5
1a004f46:	f7ff fa41 	bl	1a0043cc <__sinit>
1a004f4a:	4b2e      	ldr	r3, [pc, #184]	; (1a005004 <__swsetup_r+0xd0>)
1a004f4c:	429c      	cmp	r4, r3
1a004f4e:	d10f      	bne.n	1a004f70 <__swsetup_r+0x3c>
1a004f50:	686c      	ldr	r4, [r5, #4]
1a004f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004f56:	b29a      	uxth	r2, r3
1a004f58:	0715      	lsls	r5, r2, #28
1a004f5a:	d42c      	bmi.n	1a004fb6 <__swsetup_r+0x82>
1a004f5c:	06d0      	lsls	r0, r2, #27
1a004f5e:	d411      	bmi.n	1a004f84 <__swsetup_r+0x50>
1a004f60:	2209      	movs	r2, #9
1a004f62:	6032      	str	r2, [r6, #0]
1a004f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004f68:	81a3      	strh	r3, [r4, #12]
1a004f6a:	f04f 30ff 	mov.w	r0, #4294967295
1a004f6e:	e03e      	b.n	1a004fee <__swsetup_r+0xba>
1a004f70:	4b25      	ldr	r3, [pc, #148]	; (1a005008 <__swsetup_r+0xd4>)
1a004f72:	429c      	cmp	r4, r3
1a004f74:	d101      	bne.n	1a004f7a <__swsetup_r+0x46>
1a004f76:	68ac      	ldr	r4, [r5, #8]
1a004f78:	e7eb      	b.n	1a004f52 <__swsetup_r+0x1e>
1a004f7a:	4b24      	ldr	r3, [pc, #144]	; (1a00500c <__swsetup_r+0xd8>)
1a004f7c:	429c      	cmp	r4, r3
1a004f7e:	bf08      	it	eq
1a004f80:	68ec      	ldreq	r4, [r5, #12]
1a004f82:	e7e6      	b.n	1a004f52 <__swsetup_r+0x1e>
1a004f84:	0751      	lsls	r1, r2, #29
1a004f86:	d512      	bpl.n	1a004fae <__swsetup_r+0x7a>
1a004f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004f8a:	b141      	cbz	r1, 1a004f9e <__swsetup_r+0x6a>
1a004f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004f90:	4299      	cmp	r1, r3
1a004f92:	d002      	beq.n	1a004f9a <__swsetup_r+0x66>
1a004f94:	4630      	mov	r0, r6
1a004f96:	f7ff faf3 	bl	1a004580 <_free_r>
1a004f9a:	2300      	movs	r3, #0
1a004f9c:	6363      	str	r3, [r4, #52]	; 0x34
1a004f9e:	89a3      	ldrh	r3, [r4, #12]
1a004fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004fa4:	81a3      	strh	r3, [r4, #12]
1a004fa6:	2300      	movs	r3, #0
1a004fa8:	6063      	str	r3, [r4, #4]
1a004faa:	6923      	ldr	r3, [r4, #16]
1a004fac:	6023      	str	r3, [r4, #0]
1a004fae:	89a3      	ldrh	r3, [r4, #12]
1a004fb0:	f043 0308 	orr.w	r3, r3, #8
1a004fb4:	81a3      	strh	r3, [r4, #12]
1a004fb6:	6923      	ldr	r3, [r4, #16]
1a004fb8:	b94b      	cbnz	r3, 1a004fce <__swsetup_r+0x9a>
1a004fba:	89a3      	ldrh	r3, [r4, #12]
1a004fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004fc4:	d003      	beq.n	1a004fce <__swsetup_r+0x9a>
1a004fc6:	4621      	mov	r1, r4
1a004fc8:	4630      	mov	r0, r6
1a004fca:	f000 f845 	bl	1a005058 <__smakebuf_r>
1a004fce:	89a2      	ldrh	r2, [r4, #12]
1a004fd0:	f012 0301 	ands.w	r3, r2, #1
1a004fd4:	d00c      	beq.n	1a004ff0 <__swsetup_r+0xbc>
1a004fd6:	2300      	movs	r3, #0
1a004fd8:	60a3      	str	r3, [r4, #8]
1a004fda:	6963      	ldr	r3, [r4, #20]
1a004fdc:	425b      	negs	r3, r3
1a004fde:	61a3      	str	r3, [r4, #24]
1a004fe0:	6923      	ldr	r3, [r4, #16]
1a004fe2:	b953      	cbnz	r3, 1a004ffa <__swsetup_r+0xc6>
1a004fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004fe8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004fec:	d1ba      	bne.n	1a004f64 <__swsetup_r+0x30>
1a004fee:	bd70      	pop	{r4, r5, r6, pc}
1a004ff0:	0792      	lsls	r2, r2, #30
1a004ff2:	bf58      	it	pl
1a004ff4:	6963      	ldrpl	r3, [r4, #20]
1a004ff6:	60a3      	str	r3, [r4, #8]
1a004ff8:	e7f2      	b.n	1a004fe0 <__swsetup_r+0xac>
1a004ffa:	2000      	movs	r0, #0
1a004ffc:	e7f7      	b.n	1a004fee <__swsetup_r+0xba>
1a004ffe:	bf00      	nop
1a005000:	10000040 	.word	0x10000040
1a005004:	1a0088fc 	.word	0x1a0088fc
1a005008:	1a00891c 	.word	0x1a00891c
1a00500c:	1a0088dc 	.word	0x1a0088dc

1a005010 <__swhatbuf_r>:
1a005010:	b570      	push	{r4, r5, r6, lr}
1a005012:	460e      	mov	r6, r1
1a005014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005018:	2900      	cmp	r1, #0
1a00501a:	b096      	sub	sp, #88	; 0x58
1a00501c:	4614      	mov	r4, r2
1a00501e:	461d      	mov	r5, r3
1a005020:	da07      	bge.n	1a005032 <__swhatbuf_r+0x22>
1a005022:	2300      	movs	r3, #0
1a005024:	602b      	str	r3, [r5, #0]
1a005026:	89b3      	ldrh	r3, [r6, #12]
1a005028:	061a      	lsls	r2, r3, #24
1a00502a:	d410      	bmi.n	1a00504e <__swhatbuf_r+0x3e>
1a00502c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a005030:	e00e      	b.n	1a005050 <__swhatbuf_r+0x40>
1a005032:	466a      	mov	r2, sp
1a005034:	f7fb fbf5 	bl	1a000822 <_fstat_r>
1a005038:	2800      	cmp	r0, #0
1a00503a:	dbf2      	blt.n	1a005022 <__swhatbuf_r+0x12>
1a00503c:	9a01      	ldr	r2, [sp, #4]
1a00503e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a005042:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005046:	425a      	negs	r2, r3
1a005048:	415a      	adcs	r2, r3
1a00504a:	602a      	str	r2, [r5, #0]
1a00504c:	e7ee      	b.n	1a00502c <__swhatbuf_r+0x1c>
1a00504e:	2340      	movs	r3, #64	; 0x40
1a005050:	2000      	movs	r0, #0
1a005052:	6023      	str	r3, [r4, #0]
1a005054:	b016      	add	sp, #88	; 0x58
1a005056:	bd70      	pop	{r4, r5, r6, pc}

1a005058 <__smakebuf_r>:
1a005058:	898b      	ldrh	r3, [r1, #12]
1a00505a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a00505c:	079d      	lsls	r5, r3, #30
1a00505e:	4606      	mov	r6, r0
1a005060:	460c      	mov	r4, r1
1a005062:	d507      	bpl.n	1a005074 <__smakebuf_r+0x1c>
1a005064:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005068:	6023      	str	r3, [r4, #0]
1a00506a:	6123      	str	r3, [r4, #16]
1a00506c:	2301      	movs	r3, #1
1a00506e:	6163      	str	r3, [r4, #20]
1a005070:	b002      	add	sp, #8
1a005072:	bd70      	pop	{r4, r5, r6, pc}
1a005074:	ab01      	add	r3, sp, #4
1a005076:	466a      	mov	r2, sp
1a005078:	f7ff ffca 	bl	1a005010 <__swhatbuf_r>
1a00507c:	9900      	ldr	r1, [sp, #0]
1a00507e:	4605      	mov	r5, r0
1a005080:	4630      	mov	r0, r6
1a005082:	f7ff facb 	bl	1a00461c <_malloc_r>
1a005086:	b948      	cbnz	r0, 1a00509c <__smakebuf_r+0x44>
1a005088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00508c:	059a      	lsls	r2, r3, #22
1a00508e:	d4ef      	bmi.n	1a005070 <__smakebuf_r+0x18>
1a005090:	f023 0303 	bic.w	r3, r3, #3
1a005094:	f043 0302 	orr.w	r3, r3, #2
1a005098:	81a3      	strh	r3, [r4, #12]
1a00509a:	e7e3      	b.n	1a005064 <__smakebuf_r+0xc>
1a00509c:	4b0d      	ldr	r3, [pc, #52]	; (1a0050d4 <__smakebuf_r+0x7c>)
1a00509e:	62b3      	str	r3, [r6, #40]	; 0x28
1a0050a0:	89a3      	ldrh	r3, [r4, #12]
1a0050a2:	6020      	str	r0, [r4, #0]
1a0050a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0050a8:	81a3      	strh	r3, [r4, #12]
1a0050aa:	9b00      	ldr	r3, [sp, #0]
1a0050ac:	6163      	str	r3, [r4, #20]
1a0050ae:	9b01      	ldr	r3, [sp, #4]
1a0050b0:	6120      	str	r0, [r4, #16]
1a0050b2:	b15b      	cbz	r3, 1a0050cc <__smakebuf_r+0x74>
1a0050b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0050b8:	4630      	mov	r0, r6
1a0050ba:	f7fb fbb7 	bl	1a00082c <_isatty_r>
1a0050be:	b128      	cbz	r0, 1a0050cc <__smakebuf_r+0x74>
1a0050c0:	89a3      	ldrh	r3, [r4, #12]
1a0050c2:	f023 0303 	bic.w	r3, r3, #3
1a0050c6:	f043 0301 	orr.w	r3, r3, #1
1a0050ca:	81a3      	strh	r3, [r4, #12]
1a0050cc:	89a3      	ldrh	r3, [r4, #12]
1a0050ce:	431d      	orrs	r5, r3
1a0050d0:	81a5      	strh	r5, [r4, #12]
1a0050d2:	e7cd      	b.n	1a005070 <__smakebuf_r+0x18>
1a0050d4:	1a004365 	.word	0x1a004365
1a0050d8:	ffffffff 	.word	0xffffffff
1a0050dc:	ffffffff 	.word	0xffffffff

1a0050e0 <memchr>:
1a0050e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0050e4:	2a10      	cmp	r2, #16
1a0050e6:	db2b      	blt.n	1a005140 <memchr+0x60>
1a0050e8:	f010 0f07 	tst.w	r0, #7
1a0050ec:	d008      	beq.n	1a005100 <memchr+0x20>
1a0050ee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0050f2:	3a01      	subs	r2, #1
1a0050f4:	428b      	cmp	r3, r1
1a0050f6:	d02d      	beq.n	1a005154 <memchr+0x74>
1a0050f8:	f010 0f07 	tst.w	r0, #7
1a0050fc:	b342      	cbz	r2, 1a005150 <memchr+0x70>
1a0050fe:	d1f6      	bne.n	1a0050ee <memchr+0xe>
1a005100:	b4f0      	push	{r4, r5, r6, r7}
1a005102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00510a:	f022 0407 	bic.w	r4, r2, #7
1a00510e:	f07f 0700 	mvns.w	r7, #0
1a005112:	2300      	movs	r3, #0
1a005114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005118:	3c08      	subs	r4, #8
1a00511a:	ea85 0501 	eor.w	r5, r5, r1
1a00511e:	ea86 0601 	eor.w	r6, r6, r1
1a005122:	fa85 f547 	uadd8	r5, r5, r7
1a005126:	faa3 f587 	sel	r5, r3, r7
1a00512a:	fa86 f647 	uadd8	r6, r6, r7
1a00512e:	faa5 f687 	sel	r6, r5, r7
1a005132:	b98e      	cbnz	r6, 1a005158 <memchr+0x78>
1a005134:	d1ee      	bne.n	1a005114 <memchr+0x34>
1a005136:	bcf0      	pop	{r4, r5, r6, r7}
1a005138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00513c:	f002 0207 	and.w	r2, r2, #7
1a005140:	b132      	cbz	r2, 1a005150 <memchr+0x70>
1a005142:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005146:	3a01      	subs	r2, #1
1a005148:	ea83 0301 	eor.w	r3, r3, r1
1a00514c:	b113      	cbz	r3, 1a005154 <memchr+0x74>
1a00514e:	d1f8      	bne.n	1a005142 <memchr+0x62>
1a005150:	2000      	movs	r0, #0
1a005152:	4770      	bx	lr
1a005154:	3801      	subs	r0, #1
1a005156:	4770      	bx	lr
1a005158:	2d00      	cmp	r5, #0
1a00515a:	bf06      	itte	eq
1a00515c:	4635      	moveq	r5, r6
1a00515e:	3803      	subeq	r0, #3
1a005160:	3807      	subne	r0, #7
1a005162:	f015 0f01 	tst.w	r5, #1
1a005166:	d107      	bne.n	1a005178 <memchr+0x98>
1a005168:	3001      	adds	r0, #1
1a00516a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00516e:	bf02      	ittt	eq
1a005170:	3001      	addeq	r0, #1
1a005172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005176:	3001      	addeq	r0, #1
1a005178:	bcf0      	pop	{r4, r5, r6, r7}
1a00517a:	3801      	subs	r0, #1
1a00517c:	4770      	bx	lr
1a00517e:	bf00      	nop

1a005180 <memmove>:
1a005180:	4288      	cmp	r0, r1
1a005182:	b510      	push	{r4, lr}
1a005184:	eb01 0302 	add.w	r3, r1, r2
1a005188:	d902      	bls.n	1a005190 <memmove+0x10>
1a00518a:	4283      	cmp	r3, r0
1a00518c:	461c      	mov	r4, r3
1a00518e:	d807      	bhi.n	1a0051a0 <memmove+0x20>
1a005190:	1e42      	subs	r2, r0, #1
1a005192:	4299      	cmp	r1, r3
1a005194:	d008      	beq.n	1a0051a8 <memmove+0x28>
1a005196:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00519a:	f802 4f01 	strb.w	r4, [r2, #1]!
1a00519e:	e7f8      	b.n	1a005192 <memmove+0x12>
1a0051a0:	1883      	adds	r3, r0, r2
1a0051a2:	1a9a      	subs	r2, r3, r2
1a0051a4:	429a      	cmp	r2, r3
1a0051a6:	d100      	bne.n	1a0051aa <memmove+0x2a>
1a0051a8:	bd10      	pop	{r4, pc}
1a0051aa:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a0051ae:	f803 1d01 	strb.w	r1, [r3, #-1]!
1a0051b2:	e7f7      	b.n	1a0051a4 <memmove+0x24>

1a0051b4 <__malloc_lock>:
1a0051b4:	4801      	ldr	r0, [pc, #4]	; (1a0051bc <__malloc_lock+0x8>)
1a0051b6:	f7ff b9ca 	b.w	1a00454e <__retarget_lock_acquire_recursive>
1a0051ba:	bf00      	nop
1a0051bc:	100022cc 	.word	0x100022cc

1a0051c0 <__malloc_unlock>:
1a0051c0:	4801      	ldr	r0, [pc, #4]	; (1a0051c8 <__malloc_unlock+0x8>)
1a0051c2:	f7ff b9c5 	b.w	1a004550 <__retarget_lock_release_recursive>
1a0051c6:	bf00      	nop
1a0051c8:	100022cc 	.word	0x100022cc

1a0051cc <_realloc_r>:
1a0051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0051ce:	4607      	mov	r7, r0
1a0051d0:	4614      	mov	r4, r2
1a0051d2:	460e      	mov	r6, r1
1a0051d4:	b921      	cbnz	r1, 1a0051e0 <_realloc_r+0x14>
1a0051d6:	4611      	mov	r1, r2
1a0051d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0051dc:	f7ff ba1e 	b.w	1a00461c <_malloc_r>
1a0051e0:	b922      	cbnz	r2, 1a0051ec <_realloc_r+0x20>
1a0051e2:	f7ff f9cd 	bl	1a004580 <_free_r>
1a0051e6:	4625      	mov	r5, r4
1a0051e8:	4628      	mov	r0, r5
1a0051ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0051ec:	f000 f968 	bl	1a0054c0 <_malloc_usable_size_r>
1a0051f0:	42a0      	cmp	r0, r4
1a0051f2:	d20f      	bcs.n	1a005214 <_realloc_r+0x48>
1a0051f4:	4621      	mov	r1, r4
1a0051f6:	4638      	mov	r0, r7
1a0051f8:	f7ff fa10 	bl	1a00461c <_malloc_r>
1a0051fc:	4605      	mov	r5, r0
1a0051fe:	2800      	cmp	r0, #0
1a005200:	d0f2      	beq.n	1a0051e8 <_realloc_r+0x1c>
1a005202:	4631      	mov	r1, r6
1a005204:	4622      	mov	r2, r4
1a005206:	f7ff f9a4 	bl	1a004552 <memcpy>
1a00520a:	4631      	mov	r1, r6
1a00520c:	4638      	mov	r0, r7
1a00520e:	f7ff f9b7 	bl	1a004580 <_free_r>
1a005212:	e7e9      	b.n	1a0051e8 <_realloc_r+0x1c>
1a005214:	4635      	mov	r5, r6
1a005216:	e7e7      	b.n	1a0051e8 <_realloc_r+0x1c>

1a005218 <__ssputs_r>:
1a005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00521c:	688e      	ldr	r6, [r1, #8]
1a00521e:	429e      	cmp	r6, r3
1a005220:	4682      	mov	sl, r0
1a005222:	460c      	mov	r4, r1
1a005224:	4691      	mov	r9, r2
1a005226:	4698      	mov	r8, r3
1a005228:	d838      	bhi.n	1a00529c <__ssputs_r+0x84>
1a00522a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
1a00522e:	f41c 6f90 	tst.w	ip, #1152	; 0x480
1a005232:	d031      	beq.n	1a005298 <__ssputs_r+0x80>
1a005234:	6962      	ldr	r2, [r4, #20]
1a005236:	6825      	ldr	r5, [r4, #0]
1a005238:	6909      	ldr	r1, [r1, #16]
1a00523a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00523e:	1a6f      	subs	r7, r5, r1
1a005240:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a005244:	3301      	adds	r3, #1
1a005246:	1055      	asrs	r5, r2, #1
1a005248:	443b      	add	r3, r7
1a00524a:	429d      	cmp	r5, r3
1a00524c:	bf38      	it	cc
1a00524e:	461d      	movcc	r5, r3
1a005250:	f41c 6f80 	tst.w	ip, #1024	; 0x400
1a005254:	d030      	beq.n	1a0052b8 <__ssputs_r+0xa0>
1a005256:	4629      	mov	r1, r5
1a005258:	f7ff f9e0 	bl	1a00461c <_malloc_r>
1a00525c:	4606      	mov	r6, r0
1a00525e:	b950      	cbnz	r0, 1a005276 <__ssputs_r+0x5e>
1a005260:	230c      	movs	r3, #12
1a005262:	f8ca 3000 	str.w	r3, [sl]
1a005266:	89a3      	ldrh	r3, [r4, #12]
1a005268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00526c:	81a3      	strh	r3, [r4, #12]
1a00526e:	f04f 30ff 	mov.w	r0, #4294967295
1a005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005276:	463a      	mov	r2, r7
1a005278:	6921      	ldr	r1, [r4, #16]
1a00527a:	f7ff f96a 	bl	1a004552 <memcpy>
1a00527e:	89a3      	ldrh	r3, [r4, #12]
1a005280:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a005284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005288:	81a3      	strh	r3, [r4, #12]
1a00528a:	6126      	str	r6, [r4, #16]
1a00528c:	6165      	str	r5, [r4, #20]
1a00528e:	443e      	add	r6, r7
1a005290:	1bed      	subs	r5, r5, r7
1a005292:	6026      	str	r6, [r4, #0]
1a005294:	60a5      	str	r5, [r4, #8]
1a005296:	4646      	mov	r6, r8
1a005298:	4546      	cmp	r6, r8
1a00529a:	d900      	bls.n	1a00529e <__ssputs_r+0x86>
1a00529c:	4646      	mov	r6, r8
1a00529e:	4632      	mov	r2, r6
1a0052a0:	4649      	mov	r1, r9
1a0052a2:	6820      	ldr	r0, [r4, #0]
1a0052a4:	f7ff ff6c 	bl	1a005180 <memmove>
1a0052a8:	68a3      	ldr	r3, [r4, #8]
1a0052aa:	1b9b      	subs	r3, r3, r6
1a0052ac:	60a3      	str	r3, [r4, #8]
1a0052ae:	6823      	ldr	r3, [r4, #0]
1a0052b0:	441e      	add	r6, r3
1a0052b2:	6026      	str	r6, [r4, #0]
1a0052b4:	2000      	movs	r0, #0
1a0052b6:	e7dc      	b.n	1a005272 <__ssputs_r+0x5a>
1a0052b8:	462a      	mov	r2, r5
1a0052ba:	f7ff ff87 	bl	1a0051cc <_realloc_r>
1a0052be:	4606      	mov	r6, r0
1a0052c0:	2800      	cmp	r0, #0
1a0052c2:	d1e2      	bne.n	1a00528a <__ssputs_r+0x72>
1a0052c4:	6921      	ldr	r1, [r4, #16]
1a0052c6:	4650      	mov	r0, sl
1a0052c8:	f7ff f95a 	bl	1a004580 <_free_r>
1a0052cc:	e7c8      	b.n	1a005260 <__ssputs_r+0x48>
1a0052ce:	Address 0x1a0052ce is out of bounds.


1a0052d0 <_svfiprintf_r>:
1a0052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0052d4:	461e      	mov	r6, r3
1a0052d6:	898b      	ldrh	r3, [r1, #12]
1a0052d8:	061b      	lsls	r3, r3, #24
1a0052da:	b09d      	sub	sp, #116	; 0x74
1a0052dc:	4607      	mov	r7, r0
1a0052de:	460d      	mov	r5, r1
1a0052e0:	4614      	mov	r4, r2
1a0052e2:	d50e      	bpl.n	1a005302 <_svfiprintf_r+0x32>
1a0052e4:	690b      	ldr	r3, [r1, #16]
1a0052e6:	b963      	cbnz	r3, 1a005302 <_svfiprintf_r+0x32>
1a0052e8:	2140      	movs	r1, #64	; 0x40
1a0052ea:	f7ff f997 	bl	1a00461c <_malloc_r>
1a0052ee:	6028      	str	r0, [r5, #0]
1a0052f0:	6128      	str	r0, [r5, #16]
1a0052f2:	b920      	cbnz	r0, 1a0052fe <_svfiprintf_r+0x2e>
1a0052f4:	230c      	movs	r3, #12
1a0052f6:	603b      	str	r3, [r7, #0]
1a0052f8:	f04f 30ff 	mov.w	r0, #4294967295
1a0052fc:	e0c9      	b.n	1a005492 <_svfiprintf_r+0x1c2>
1a0052fe:	2340      	movs	r3, #64	; 0x40
1a005300:	616b      	str	r3, [r5, #20]
1a005302:	2300      	movs	r3, #0
1a005304:	9309      	str	r3, [sp, #36]	; 0x24
1a005306:	2320      	movs	r3, #32
1a005308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00530c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1a0054ac <_svfiprintf_r+0x1dc>
1a005310:	9603      	str	r6, [sp, #12]
1a005312:	2330      	movs	r3, #48	; 0x30
1a005314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a005318:	f04f 0a01 	mov.w	sl, #1
1a00531c:	4623      	mov	r3, r4
1a00531e:	461e      	mov	r6, r3
1a005320:	f813 2b01 	ldrb.w	r2, [r3], #1
1a005324:	b10a      	cbz	r2, 1a00532a <_svfiprintf_r+0x5a>
1a005326:	2a25      	cmp	r2, #37	; 0x25
1a005328:	d1f9      	bne.n	1a00531e <_svfiprintf_r+0x4e>
1a00532a:	ebb6 0b04 	subs.w	fp, r6, r4
1a00532e:	d00b      	beq.n	1a005348 <_svfiprintf_r+0x78>
1a005330:	465b      	mov	r3, fp
1a005332:	4622      	mov	r2, r4
1a005334:	4629      	mov	r1, r5
1a005336:	4638      	mov	r0, r7
1a005338:	f7ff ff6e 	bl	1a005218 <__ssputs_r>
1a00533c:	3001      	adds	r0, #1
1a00533e:	f000 80a3 	beq.w	1a005488 <_svfiprintf_r+0x1b8>
1a005342:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005344:	445b      	add	r3, fp
1a005346:	9309      	str	r3, [sp, #36]	; 0x24
1a005348:	7833      	ldrb	r3, [r6, #0]
1a00534a:	2b00      	cmp	r3, #0
1a00534c:	f000 809c 	beq.w	1a005488 <_svfiprintf_r+0x1b8>
1a005350:	2300      	movs	r3, #0
1a005352:	f04f 32ff 	mov.w	r2, #4294967295
1a005356:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00535a:	3601      	adds	r6, #1
1a00535c:	9304      	str	r3, [sp, #16]
1a00535e:	9307      	str	r3, [sp, #28]
1a005360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a005364:	931a      	str	r3, [sp, #104]	; 0x68
1a005366:	4634      	mov	r4, r6
1a005368:	2205      	movs	r2, #5
1a00536a:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00536e:	484f      	ldr	r0, [pc, #316]	; (1a0054ac <_svfiprintf_r+0x1dc>)
1a005370:	f7ff feb6 	bl	1a0050e0 <memchr>
1a005374:	9b04      	ldr	r3, [sp, #16]
1a005376:	b9c0      	cbnz	r0, 1a0053aa <_svfiprintf_r+0xda>
1a005378:	06d9      	lsls	r1, r3, #27
1a00537a:	bf44      	itt	mi
1a00537c:	2220      	movmi	r2, #32
1a00537e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005382:	071a      	lsls	r2, r3, #28
1a005384:	bf44      	itt	mi
1a005386:	222b      	movmi	r2, #43	; 0x2b
1a005388:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00538c:	7832      	ldrb	r2, [r6, #0]
1a00538e:	2a2a      	cmp	r2, #42	; 0x2a
1a005390:	d013      	beq.n	1a0053ba <_svfiprintf_r+0xea>
1a005392:	9a07      	ldr	r2, [sp, #28]
1a005394:	4634      	mov	r4, r6
1a005396:	2000      	movs	r0, #0
1a005398:	260a      	movs	r6, #10
1a00539a:	4621      	mov	r1, r4
1a00539c:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0053a0:	3b30      	subs	r3, #48	; 0x30
1a0053a2:	2b09      	cmp	r3, #9
1a0053a4:	d94b      	bls.n	1a00543e <_svfiprintf_r+0x16e>
1a0053a6:	b970      	cbnz	r0, 1a0053c6 <_svfiprintf_r+0xf6>
1a0053a8:	e014      	b.n	1a0053d4 <_svfiprintf_r+0x104>
1a0053aa:	eba0 0009 	sub.w	r0, r0, r9
1a0053ae:	fa0a f000 	lsl.w	r0, sl, r0
1a0053b2:	4318      	orrs	r0, r3
1a0053b4:	9004      	str	r0, [sp, #16]
1a0053b6:	4626      	mov	r6, r4
1a0053b8:	e7d5      	b.n	1a005366 <_svfiprintf_r+0x96>
1a0053ba:	9a03      	ldr	r2, [sp, #12]
1a0053bc:	1d11      	adds	r1, r2, #4
1a0053be:	6812      	ldr	r2, [r2, #0]
1a0053c0:	9103      	str	r1, [sp, #12]
1a0053c2:	2a00      	cmp	r2, #0
1a0053c4:	db01      	blt.n	1a0053ca <_svfiprintf_r+0xfa>
1a0053c6:	9207      	str	r2, [sp, #28]
1a0053c8:	e004      	b.n	1a0053d4 <_svfiprintf_r+0x104>
1a0053ca:	4252      	negs	r2, r2
1a0053cc:	f043 0302 	orr.w	r3, r3, #2
1a0053d0:	9207      	str	r2, [sp, #28]
1a0053d2:	9304      	str	r3, [sp, #16]
1a0053d4:	7823      	ldrb	r3, [r4, #0]
1a0053d6:	2b2e      	cmp	r3, #46	; 0x2e
1a0053d8:	d10c      	bne.n	1a0053f4 <_svfiprintf_r+0x124>
1a0053da:	7863      	ldrb	r3, [r4, #1]
1a0053dc:	2b2a      	cmp	r3, #42	; 0x2a
1a0053de:	d133      	bne.n	1a005448 <_svfiprintf_r+0x178>
1a0053e0:	9b03      	ldr	r3, [sp, #12]
1a0053e2:	1d1a      	adds	r2, r3, #4
1a0053e4:	681b      	ldr	r3, [r3, #0]
1a0053e6:	9203      	str	r2, [sp, #12]
1a0053e8:	2b00      	cmp	r3, #0
1a0053ea:	bfb8      	it	lt
1a0053ec:	f04f 33ff 	movlt.w	r3, #4294967295
1a0053f0:	3402      	adds	r4, #2
1a0053f2:	9305      	str	r3, [sp, #20]
1a0053f4:	4e2e      	ldr	r6, [pc, #184]	; (1a0054b0 <_svfiprintf_r+0x1e0>)
1a0053f6:	7821      	ldrb	r1, [r4, #0]
1a0053f8:	2203      	movs	r2, #3
1a0053fa:	4630      	mov	r0, r6
1a0053fc:	f7ff fe70 	bl	1a0050e0 <memchr>
1a005400:	b138      	cbz	r0, 1a005412 <_svfiprintf_r+0x142>
1a005402:	2340      	movs	r3, #64	; 0x40
1a005404:	1b80      	subs	r0, r0, r6
1a005406:	fa03 f000 	lsl.w	r0, r3, r0
1a00540a:	9b04      	ldr	r3, [sp, #16]
1a00540c:	4303      	orrs	r3, r0
1a00540e:	3401      	adds	r4, #1
1a005410:	9304      	str	r3, [sp, #16]
1a005412:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005416:	4827      	ldr	r0, [pc, #156]	; (1a0054b4 <_svfiprintf_r+0x1e4>)
1a005418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00541c:	2206      	movs	r2, #6
1a00541e:	f7ff fe5f 	bl	1a0050e0 <memchr>
1a005422:	2800      	cmp	r0, #0
1a005424:	d038      	beq.n	1a005498 <_svfiprintf_r+0x1c8>
1a005426:	4b24      	ldr	r3, [pc, #144]	; (1a0054b8 <_svfiprintf_r+0x1e8>)
1a005428:	bb13      	cbnz	r3, 1a005470 <_svfiprintf_r+0x1a0>
1a00542a:	9b03      	ldr	r3, [sp, #12]
1a00542c:	3307      	adds	r3, #7
1a00542e:	f023 0307 	bic.w	r3, r3, #7
1a005432:	3308      	adds	r3, #8
1a005434:	9303      	str	r3, [sp, #12]
1a005436:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005438:	4443      	add	r3, r8
1a00543a:	9309      	str	r3, [sp, #36]	; 0x24
1a00543c:	e76e      	b.n	1a00531c <_svfiprintf_r+0x4c>
1a00543e:	fb06 3202 	mla	r2, r6, r2, r3
1a005442:	2001      	movs	r0, #1
1a005444:	460c      	mov	r4, r1
1a005446:	e7a8      	b.n	1a00539a <_svfiprintf_r+0xca>
1a005448:	2300      	movs	r3, #0
1a00544a:	3401      	adds	r4, #1
1a00544c:	9305      	str	r3, [sp, #20]
1a00544e:	4619      	mov	r1, r3
1a005450:	260a      	movs	r6, #10
1a005452:	4620      	mov	r0, r4
1a005454:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005458:	3a30      	subs	r2, #48	; 0x30
1a00545a:	2a09      	cmp	r2, #9
1a00545c:	d903      	bls.n	1a005466 <_svfiprintf_r+0x196>
1a00545e:	2b00      	cmp	r3, #0
1a005460:	d0c8      	beq.n	1a0053f4 <_svfiprintf_r+0x124>
1a005462:	9105      	str	r1, [sp, #20]
1a005464:	e7c6      	b.n	1a0053f4 <_svfiprintf_r+0x124>
1a005466:	fb06 2101 	mla	r1, r6, r1, r2
1a00546a:	2301      	movs	r3, #1
1a00546c:	4604      	mov	r4, r0
1a00546e:	e7f0      	b.n	1a005452 <_svfiprintf_r+0x182>
1a005470:	ab03      	add	r3, sp, #12
1a005472:	9300      	str	r3, [sp, #0]
1a005474:	462a      	mov	r2, r5
1a005476:	4b11      	ldr	r3, [pc, #68]	; (1a0054bc <_svfiprintf_r+0x1ec>)
1a005478:	a904      	add	r1, sp, #16
1a00547a:	4638      	mov	r0, r7
1a00547c:	f3af 8000 	nop.w
1a005480:	f1b0 3fff 	cmp.w	r0, #4294967295
1a005484:	4680      	mov	r8, r0
1a005486:	d1d6      	bne.n	1a005436 <_svfiprintf_r+0x166>
1a005488:	89ab      	ldrh	r3, [r5, #12]
1a00548a:	065b      	lsls	r3, r3, #25
1a00548c:	f53f af34 	bmi.w	1a0052f8 <_svfiprintf_r+0x28>
1a005490:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005492:	b01d      	add	sp, #116	; 0x74
1a005494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005498:	ab03      	add	r3, sp, #12
1a00549a:	9300      	str	r3, [sp, #0]
1a00549c:	462a      	mov	r2, r5
1a00549e:	4b07      	ldr	r3, [pc, #28]	; (1a0054bc <_svfiprintf_r+0x1ec>)
1a0054a0:	a904      	add	r1, sp, #16
1a0054a2:	4638      	mov	r0, r7
1a0054a4:	f7ff fadc 	bl	1a004a60 <_printf_i>
1a0054a8:	e7ea      	b.n	1a005480 <_svfiprintf_r+0x1b0>
1a0054aa:	bf00      	nop
1a0054ac:	1a008940 	.word	0x1a008940
1a0054b0:	1a008946 	.word	0x1a008946
1a0054b4:	1a00894a 	.word	0x1a00894a
1a0054b8:	00000000 	.word	0x00000000
1a0054bc:	1a005219 	.word	0x1a005219

1a0054c0 <_malloc_usable_size_r>:
1a0054c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0054c4:	1f18      	subs	r0, r3, #4
1a0054c6:	2b00      	cmp	r3, #0
1a0054c8:	bfbc      	itt	lt
1a0054ca:	580b      	ldrlt	r3, [r1, r0]
1a0054cc:	18c0      	addlt	r0, r0, r3
1a0054ce:	4770      	bx	lr
1a0054d0:	74616256 	.word	0x74616256
1a0054d4:	00000000 	.word	0x00000000
1a0054d8:	5f324f5f 	.word	0x5f324f5f
1a0054dc:	00000000 	.word	0x00000000
1a0054e0:	65636150 	.word	0x65636150
1a0054e4:	00000000 	.word	0x00000000
1a0054e8:	6d646154 	.word	0x6d646154
1a0054ec:	00000000 	.word	0x00000000
1a0054f0:	63736554 	.word	0x63736554
1a0054f4:	00000000 	.word	0x00000000
1a0054f8:	65636154 	.word	0x65636154
1a0054fc:	ffff0000 	.word	0xffff0000

1a005500 <adc_look_up>:
1a005500:	00000000 00000003 00000006 00000009     ................
1a005510:	0000000c 0000000f 00000012 00000015     ................
1a005520:	00000018 0000001b 0000001e 00000021     ............!...
1a005530:	00000024 00000027 0000002a 0000002d     $...'...*...-...
1a005540:	00000030 00000033 00000036 00000039     0...3...6...9...
1a005550:	0000003c 0000003f 00000042 00000045     <...?...B...E...
1a005560:	00000048 0000004b 0000004e 00000051     H...K...N...Q...
1a005570:	00000054 00000057 0000005a 0000005d     T...W...Z...]...
1a005580:	00000060 00000063 00000066 00000069     `...c...f...i...
1a005590:	0000006c 0000006f 00000072 00000075     l...o...r...u...
1a0055a0:	00000078 0000007b 0000007e 00000081     x...{...~.......
1a0055b0:	00000084 00000087 0000008a 0000008d     ................
1a0055c0:	00000090 00000093 00000096 00000099     ................
1a0055d0:	0000009c 0000009f 000000a2 000000a5     ................
1a0055e0:	000000a8 000000ab 000000ae 000000b1     ................
1a0055f0:	000000b4 000000b7 000000ba 000000bd     ................
1a005600:	000000c0 000000c3 000000c6 000000c9     ................
1a005610:	000000cc 000000cf 000000d2 000000d5     ................
1a005620:	000000d8 000000db 000000de 000000e1     ................
1a005630:	000000e4 000000e7 000000ea 000000ed     ................
1a005640:	000000f0 000000f3 000000f6 000000f9     ................
1a005650:	000000fc 000000ff 00000102 00000105     ................
1a005660:	00000108 0000010b 0000010e 00000111     ................
1a005670:	00000114 00000117 0000011a 0000011d     ................
1a005680:	00000120 00000123 00000126 00000129      ...#...&...)...
1a005690:	0000012c 0000012f 00000132 00000135     ,.../...2...5...
1a0056a0:	00000138 0000013b 0000013e 00000141     8...;...>...A...
1a0056b0:	00000144 00000147 0000014a 0000014d     D...G...J...M...
1a0056c0:	00000150 00000153 00000156 00000159     P...S...V...Y...
1a0056d0:	0000015c 0000015f 00000162 00000165     \..._...b...e...
1a0056e0:	00000168 0000016b 0000016e 00000171     h...k...n...q...
1a0056f0:	00000174 00000177 0000017a 0000017d     t...w...z...}...
1a005700:	00000180 00000183 00000186 00000189     ................
1a005710:	0000018c 0000018f 00000192 00000195     ................
1a005720:	00000198 0000019b 0000019e 000001a1     ................
1a005730:	000001a4 000001a7 000001aa 000001ad     ................
1a005740:	000001b0 000001b3 000001b6 000001b9     ................
1a005750:	000001bc 000001bf 000001c2 000001c5     ................
1a005760:	000001c8 000001cb 000001ce 000001d1     ................
1a005770:	000001d4 000001d7 000001da 000001dd     ................
1a005780:	000001e0 000001e3 000001e6 000001e9     ................
1a005790:	000001ec 000001ef 000001f2 000001f5     ................
1a0057a0:	000001f8 000001fb 000001fe 00000201     ................
1a0057b0:	00000204 00000207 0000020a 0000020d     ................
1a0057c0:	00000210 00000213 00000216 00000219     ................
1a0057d0:	0000021c 0000021f 00000222 00000225     ........"...%...
1a0057e0:	00000228 0000022b 0000022e 00000231     (...+.......1...
1a0057f0:	00000234 00000237 0000023a 0000023d     4...7...:...=...
1a005800:	00000240 00000243 00000246 00000249     @...C...F...I...
1a005810:	0000024c 0000024f 00000252 00000255     L...O...R...U...
1a005820:	00000258 0000025b 0000025e 00000261     X...[...^...a...
1a005830:	00000264 00000267 0000026a 0000026d     d...g...j...m...
1a005840:	00000270 00000273 00000276 00000279     p...s...v...y...
1a005850:	0000027c 0000027f 00000282 00000285     |...............
1a005860:	00000288 0000028b 0000028e 00000291     ................
1a005870:	00000294 00000297 0000029a 0000029d     ................
1a005880:	000002a0 000002a3 000002a6 000002a9     ................
1a005890:	000002ac 000002af 000002b2 000002b5     ................
1a0058a0:	000002b8 000002bb 000002be 000002c1     ................
1a0058b0:	000002c4 000002c7 000002ca 000002cd     ................
1a0058c0:	000002d0 000002d3 000002d6 000002d9     ................
1a0058d0:	000002dc 000002df 000002e2 000002e5     ................
1a0058e0:	000002e8 000002eb 000002ee 000002f1     ................
1a0058f0:	000002f4 000002f7 000002fa 000002fd     ................
1a005900:	00000300 00000303 00000306 00000309     ................
1a005910:	0000030c 0000030f 00000312 00000315     ................
1a005920:	00000318 0000031b 0000031e 00000321     ............!...
1a005930:	00000324 00000327 0000032a 0000032d     $...'...*...-...
1a005940:	00000330 00000333 00000336 00000339     0...3...6...9...
1a005950:	0000033c 0000033f 00000342 00000345     <...?...B...E...
1a005960:	00000348 0000034b 0000034e 00000351     H...K...N...Q...
1a005970:	00000354 00000357 0000035a 0000035d     T...W...Z...]...
1a005980:	00000360 00000363 00000366 00000369     `...c...f...i...
1a005990:	0000036c 0000036f 00000372 00000375     l...o...r...u...
1a0059a0:	00000378 0000037b 0000037e 00000381     x...{...~.......
1a0059b0:	00000384 00000387 0000038a 0000038d     ................
1a0059c0:	00000390 00000393 00000396 00000399     ................
1a0059d0:	0000039c 0000039f 000003a2 000003a5     ................
1a0059e0:	000003a8 000003ab 000003ae 000003b1     ................
1a0059f0:	000003b4 000003b7 000003ba 000003bd     ................
1a005a00:	000003c0 000003c3 000003c6 000003c9     ................
1a005a10:	000003cc 000003cf 000003d2 000003d5     ................
1a005a20:	000003d8 000003db 000003de 000003e1     ................
1a005a30:	000003e4 000003e7 000003ea 000003ed     ................
1a005a40:	000003f0 000003f3 000003f6 000003f9     ................
1a005a50:	000003fc 000003ff 00000402 00000405     ................
1a005a60:	00000408 0000040b 0000040e 00000411     ................
1a005a70:	00000414 00000417 0000041a 0000041d     ................
1a005a80:	00000420 00000423 00000426 00000429      ...#...&...)...
1a005a90:	0000042c 0000042f 00000432 00000435     ,.../...2...5...
1a005aa0:	00000438 0000043b 0000043e 00000441     8...;...>...A...
1a005ab0:	00000444 00000447 0000044a 0000044d     D...G...J...M...
1a005ac0:	00000450 00000453 00000456 00000459     P...S...V...Y...
1a005ad0:	0000045c 0000045f 00000462 00000465     \..._...b...e...
1a005ae0:	00000468 0000046b 0000046e 00000471     h...k...n...q...
1a005af0:	00000474 00000477 0000047a 0000047d     t...w...z...}...
1a005b00:	00000480 00000483 00000486 00000489     ................
1a005b10:	0000048c 0000048f 00000492 00000495     ................
1a005b20:	00000498 0000049b 0000049e 000004a1     ................
1a005b30:	000004a4 000004a7 000004aa 000004ad     ................
1a005b40:	000004b0 000004b3 000004b6 000004b9     ................
1a005b50:	000004bc 000004bf 000004c2 000004c5     ................
1a005b60:	000004c8 000004cb 000004ce 000004d1     ................
1a005b70:	000004d4 000004d7 000004da 000004dd     ................
1a005b80:	000004e0 000004e3 000004e6 000004e9     ................
1a005b90:	000004ec 000004ef 000004f2 000004f5     ................
1a005ba0:	000004f8 000004fb 000004fe 00000501     ................
1a005bb0:	00000504 00000507 0000050a 0000050d     ................
1a005bc0:	00000510 00000513 00000516 00000519     ................
1a005bd0:	0000051c 0000051f 00000522 00000525     ........"...%...
1a005be0:	00000528 0000052b 0000052e 00000531     (...+.......1...
1a005bf0:	00000534 00000537 0000053a 0000053d     4...7...:...=...
1a005c00:	00000540 00000543 00000546 00000549     @...C...F...I...
1a005c10:	0000054c 0000054f 00000552 00000555     L...O...R...U...
1a005c20:	00000558 0000055b 0000055e 00000561     X...[...^...a...
1a005c30:	00000564 00000567 0000056a 0000056d     d...g...j...m...
1a005c40:	00000570 00000573 00000576 00000579     p...s...v...y...
1a005c50:	0000057c 0000057f 00000582 00000585     |...............
1a005c60:	00000588 0000058b 0000058e 00000591     ................
1a005c70:	00000594 00000597 0000059a 0000059d     ................
1a005c80:	000005a0 000005a3 000005a6 000005a9     ................
1a005c90:	000005ac 000005af 000005b2 000005b5     ................
1a005ca0:	000005b8 000005bb 000005be 000005c1     ................
1a005cb0:	000005c4 000005c7 000005ca 000005cd     ................
1a005cc0:	000005d0 000005d3 000005d6 000005d9     ................
1a005cd0:	000005dc 000005df 000005e2 000005e5     ................
1a005ce0:	000005e8 000005eb 000005ee 000005f1     ................
1a005cf0:	000005f4 000005f7 000005fa 000005fd     ................
1a005d00:	00000600 00000603 00000606 00000609     ................
1a005d10:	0000060c 0000060f 00000612 00000615     ................
1a005d20:	00000618 0000061b 0000061e 00000621     ............!...
1a005d30:	00000624 00000627 0000062a 0000062d     $...'...*...-...
1a005d40:	00000630 00000633 00000636 00000639     0...3...6...9...
1a005d50:	0000063c 0000063f 00000642 00000645     <...?...B...E...
1a005d60:	00000648 0000064b 0000064e 00000651     H...K...N...Q...
1a005d70:	00000654 00000657 0000065a 0000065d     T...W...Z...]...
1a005d80:	00000660 00000663 00000666 00000669     `...c...f...i...
1a005d90:	0000066c 0000066f 00000672 00000675     l...o...r...u...
1a005da0:	00000678 0000067b 0000067e 00000681     x...{...~.......
1a005db0:	00000684 00000687 0000068a 0000068d     ................
1a005dc0:	00000690 00000693 00000696 00000699     ................
1a005dd0:	0000069c 0000069f 000006a2 000006a5     ................
1a005de0:	000006a8 000006ab 000006ae 000006b1     ................
1a005df0:	000006b4 000006b7 000006ba 000006bd     ................
1a005e00:	000006c0 000006c3 000006c6 000006c9     ................
1a005e10:	000006cc 000006cf 000006d2 000006d5     ................
1a005e20:	000006d8 000006db 000006de 000006e1     ................
1a005e30:	000006e4 000006e7 000006ea 000006ed     ................
1a005e40:	000006f0 000006f3 000006f6 000006f9     ................
1a005e50:	000006fc 000006ff 00000702 00000705     ................
1a005e60:	00000708 0000070b 0000070e 00000711     ................
1a005e70:	00000714 00000717 0000071a 0000071d     ................
1a005e80:	00000720 00000723 00000726 00000729      ...#...&...)...
1a005e90:	0000072c 0000072f 00000732 00000735     ,.../...2...5...
1a005ea0:	00000738 0000073b 0000073e 00000741     8...;...>...A...
1a005eb0:	00000744 00000747 0000074a 0000074d     D...G...J...M...
1a005ec0:	00000750 00000753 00000756 00000759     P...S...V...Y...
1a005ed0:	0000075c 0000075f 00000762 00000765     \..._...b...e...
1a005ee0:	00000768 0000076b 0000076e 00000771     h...k...n...q...
1a005ef0:	00000774 00000777 0000077a 0000077d     t...w...z...}...
1a005f00:	00000780 00000783 00000786 00000789     ................
1a005f10:	0000078c 0000078f 00000792 00000795     ................
1a005f20:	00000798 0000079b 0000079e 000007a1     ................
1a005f30:	000007a4 000007a7 000007aa 000007ad     ................
1a005f40:	000007b0 000007b3 000007b6 000007b9     ................
1a005f50:	000007bc 000007bf 000007c2 000007c5     ................
1a005f60:	000007c8 000007cb 000007ce 000007d1     ................
1a005f70:	000007d4 000007d7 000007da 000007dd     ................
1a005f80:	000007e0 000007e3 000007e6 000007e9     ................
1a005f90:	000007ec 000007ef 000007f2 000007f5     ................
1a005fa0:	000007f8 000007fb 000007fe 00000801     ................
1a005fb0:	00000804 00000807 0000080a 0000080d     ................
1a005fc0:	00000810 00000813 00000816 00000819     ................
1a005fd0:	0000081c 0000081f 00000822 00000825     ........"...%...
1a005fe0:	00000828 0000082b 0000082e 00000831     (...+.......1...
1a005ff0:	00000834 00000837 0000083a 0000083d     4...7...:...=...
1a006000:	00000840 00000843 00000846 00000849     @...C...F...I...
1a006010:	0000084c 0000084f 00000852 00000855     L...O...R...U...
1a006020:	00000858 0000085b 0000085e 00000861     X...[...^...a...
1a006030:	00000864 00000867 0000086a 0000086d     d...g...j...m...
1a006040:	00000870 00000873 00000876 00000879     p...s...v...y...
1a006050:	0000087c 0000087f 00000882 00000885     |...............
1a006060:	00000888 0000088b 0000088e 00000891     ................
1a006070:	00000894 00000897 0000089a 0000089d     ................
1a006080:	000008a0 000008a3 000008a6 000008a9     ................
1a006090:	000008ac 000008af 000008b2 000008b5     ................
1a0060a0:	000008b8 000008bb 000008be 000008c1     ................
1a0060b0:	000008c4 000008c7 000008ca 000008cd     ................
1a0060c0:	000008d0 000008d3 000008d6 000008d9     ................
1a0060d0:	000008dc 000008df 000008e2 000008e5     ................
1a0060e0:	000008e8 000008eb 000008ee 000008f1     ................
1a0060f0:	000008f4 000008f7 000008fa 000008fd     ................
1a006100:	00000900 00000903 00000906 00000909     ................
1a006110:	0000090c 0000090f 00000912 00000915     ................
1a006120:	00000918 0000091b 0000091e 00000921     ............!...
1a006130:	00000924 00000927 0000092a 0000092d     $...'...*...-...
1a006140:	00000930 00000933 00000936 00000939     0...3...6...9...
1a006150:	0000093c 0000093f 00000942 00000945     <...?...B...E...
1a006160:	00000948 0000094b 0000094e 00000951     H...K...N...Q...
1a006170:	00000954 00000957 0000095a 0000095d     T...W...Z...]...
1a006180:	00000960 00000963 00000966 00000969     `...c...f...i...
1a006190:	0000096c 0000096f 00000972 00000975     l...o...r...u...
1a0061a0:	00000978 0000097b 0000097e 00000981     x...{...~.......
1a0061b0:	00000984 00000987 0000098a 0000098d     ................
1a0061c0:	00000990 00000993 00000996 00000999     ................
1a0061d0:	0000099c 0000099f 000009a2 000009a5     ................
1a0061e0:	000009a8 000009ab 000009ae 000009b1     ................
1a0061f0:	000009b4 000009b7 000009ba 000009bd     ................
1a006200:	000009c0 000009c3 000009c6 000009c9     ................
1a006210:	000009cc 000009cf 000009d2 000009d5     ................
1a006220:	000009d8 000009db 000009de 000009e1     ................
1a006230:	000009e4 000009e7 000009ea 000009ed     ................
1a006240:	000009f0 000009f3 000009f6 000009f9     ................
1a006250:	000009fc 000009ff 00000a02 00000a05     ................
1a006260:	00000a08 00000a0b 00000a0e 00000a11     ................
1a006270:	00000a14 00000a17 00000a1a 00000a1d     ................
1a006280:	00000a20 00000a23 00000a26 00000a29      ...#...&...)...
1a006290:	00000a2c 00000a2f 00000a32 00000a35     ,.../...2...5...
1a0062a0:	00000a38 00000a3b 00000a3e 00000a41     8...;...>...A...
1a0062b0:	00000a44 00000a47 00000a4a 00000a4d     D...G...J...M...
1a0062c0:	00000a50 00000a53 00000a56 00000a59     P...S...V...Y...
1a0062d0:	00000a5c 00000a5f 00000a62 00000a65     \..._...b...e...
1a0062e0:	00000a68 00000a6b 00000a6e 00000a71     h...k...n...q...
1a0062f0:	00000a74 00000a77 00000a7a 00000a7d     t...w...z...}...
1a006300:	00000a80 00000a83 00000a86 00000a89     ................
1a006310:	00000a8c 00000a8f 00000a92 00000a95     ................
1a006320:	00000a98 00000a9b 00000a9e 00000aa1     ................
1a006330:	00000aa4 00000aa7 00000aaa 00000aad     ................
1a006340:	00000ab0 00000ab3 00000ab6 00000ab9     ................
1a006350:	00000abc 00000abf 00000ac2 00000ac5     ................
1a006360:	00000ac8 00000acb 00000ace 00000ad1     ................
1a006370:	00000ad4 00000ad7 00000ada 00000add     ................
1a006380:	00000ae0 00000ae3 00000ae6 00000ae9     ................
1a006390:	00000aec 00000aef 00000af2 00000af5     ................
1a0063a0:	00000af8 00000afb 00000afe 00000b01     ................
1a0063b0:	00000b04 00000b07 00000b0a 00000b0d     ................
1a0063c0:	00000b10 00000b13 00000b16 00000b19     ................
1a0063d0:	00000b1c 00000b1f 00000b22 00000b25     ........"...%...
1a0063e0:	00000b28 00000b2b 00000b2e 00000b31     (...+.......1...
1a0063f0:	00000b34 00000b37 00000b3a 00000b3d     4...7...:...=...
1a006400:	00000b40 00000b43 00000b46 00000b49     @...C...F...I...
1a006410:	00000b4c 00000b4f 00000b52 00000b55     L...O...R...U...
1a006420:	00000b58 00000b5b 00000b5e 00000b61     X...[...^...a...
1a006430:	00000b64 00000b67 00000b6a 00000b6d     d...g...j...m...
1a006440:	00000b70 00000b73 00000b76 00000b79     p...s...v...y...
1a006450:	00000b7c 00000b7f 00000b82 00000b85     |...............
1a006460:	00000b88 00000b8b 00000b8e 00000b91     ................
1a006470:	00000b94 00000b97 00000b9a 00000b9d     ................
1a006480:	00000ba0 00000ba3 00000ba6 00000ba9     ................
1a006490:	00000bac 00000baf 00000bb2 00000bb5     ................
1a0064a0:	00000bb8 00000bbb 00000bbe 00000bc1     ................
1a0064b0:	00000bc4 00000bc7 00000bca 00000bcd     ................
1a0064c0:	00000bd0 00000bd3 00000bd6 00000bd9     ................
1a0064d0:	00000bdc 00000bdf 00000be2 00000be5     ................
1a0064e0:	00000be8 00000beb 00000bee 00000bf1     ................
1a0064f0:	00000bf4 00000bf7 00000bfa 00000bfd     ................

1a006500 <pace_look_up>:
	...
1a006608:	0000039c 000003aa 000003b8 000003c6     ................
1a006618:	000003d4 000003e2 000003f0 000003fe     ................
1a006628:	0000040c 0000041a 00000428 00000436     ........(...6...
1a006638:	00000444 00000452 00000460 0000046e     D...R...`...n...
1a006648:	0000047c 0000048a 00000498 000004a6     |...............
1a006658:	000004b4 000004c2 000004d0 000004de     ................
1a006668:	000004ec 000004fa 00000508 00000516     ................
1a006678:	00000524 00000532 00000540 0000054e     $...2...@...N...
1a006688:	0000055c 0000056a 00000578 00000586     \...j...x.......
1a006698:	00000594 000005a2 000005b0 000005be     ................
1a0066a8:	000005cc 000005da 000005e8 000005f6     ................
1a0066b8:	00000604 00000612 00000620 0000062e     ........ .......
1a0066c8:	0000063c 0000064a 00000658 00000666     <...J...X...f...
1a0066d8:	00000674 00000682 00000690 0000069e     t...............
1a0066e8:	000006ac 000006ba 000006c8 000006d6     ................
1a0066f8:	000006e4 000006f2 00000700 0000070e     ................
1a006708:	0000071c 0000072a 00000738 00000746     ....*...8...F...
1a006718:	00000754 00000762 00000770 0000077e     T...b...p...~...
1a006728:	0000078c 0000079a 000007a8 000007b6     ................
1a006738:	000007c4 000007d2 000007e0 000007ee     ................
1a006748:	000007fc 0000080a 00000818 00000826     ............&...
1a006758:	00000834 00000842 00000850 0000085e     4...B...P...^...
1a006768:	0000086c 0000087a 00000888 00000896     l...z...........
1a006778:	000008a4 000008b2 000008c0 000008ce     ................
1a006788:	000008dc 000008ea 000008f8 00000906     ................
1a006798:	00000914 00000922 00000930 0000093e     ...."...0...>...
1a0067a8:	0000094c 0000095a 00000968 00000976     L...Z...h...v...
1a0067b8:	00000984 00000992 000009a0 000009ae     ................
1a0067c8:	000009bc 000009ca 000009d8 000009e6     ................
1a0067d8:	000009f4 00000a02 00000a10 00000a1e     ................
1a0067e8:	00000a2c 00000a3a 00000a48 00000a56     ,...:...H...V...
1a0067f8:	00000a64 00000a72 00000a80 00000a8e     d...r...........
1a006808:	00000a9c 00000aaa 00000ab8 00000ac6     ................
1a006818:	00000ad4 00000ae2 00000af0 00000afe     ................
1a006828:	00000b0c 00000b1a 00000b28 00000b36     ........(...6...
1a006838:	00000b44 00000b52 00000b60 00000b6e     D...R...`...n...
1a006848:	00000b7c 00000b8a 00000b98 00000ba6     |...............
1a006858:	00000bb4 00000bc2 00000bd0 00000bde     ................
1a006868:	00000bec 00000bfa 00000c08 00000c16     ................
1a006878:	00000c24 00000c32 00000c40 00000c4e     $...2...@...N...
1a006888:	00000c5c 00000c6a 00000c78 00000c86     \...j...x.......
1a006898:	00000c94 00000ca2 00000cb0 00000cbe     ................
1a0068a8:	00000ccc 00000cda 00000ce8 00000cf6     ................
1a0068b8:	00000d04 00000d12 00000d20 00000d2e     ........ .......
1a0068c8:	00000d3c 00000d4a 00000d58 00000d66     <...J...X...f...
1a0068d8:	00000d74 00000d82 00000d90 00000d9e     t...............
1a0068e8:	00000dac 00000dba 00000dc8 00000dd6     ................
1a0068f8:	00000de4 00000df2 00000e00 00000e0e     ................
1a006908:	00000e1c 00000e2a 00000e38 00000e46     ....*...8...F...
1a006918:	00000e54 00000e62 00000e70 00000e7e     T...b...p...~...
1a006928:	00000e8c 00000e9a 00000ea8 00000eb6     ................
1a006938:	00000ec4 00000ed2 00000ee0 00000eee     ................
1a006948:	00000efc 00000f0a 00000f18 00000f26     ............&...
1a006958:	00000f34 00000f42 00000f50 00000f5e     4...B...P...^...
1a006968:	00000f6c 00000f7a 00000f88 00000f96     l...z...........
1a006978:	00000fa4 00000fb2 00000fc0 00000fce     ................
1a006988:	00000fdc 00000fea 00000ff8 00001006     ................
1a006998:	00001014 00001022 00001030 0000103e     ...."...0...>...
1a0069a8:	0000104c 0000105a 00001068 00001076     L...Z...h...v...
1a0069b8:	00001084 00001092 000010a0 000010ae     ................
1a0069c8:	000010bc 000010ca 000010d8 000010e6     ................
1a0069d8:	000010f4 00001102 00001110 0000111e     ................
1a0069e8:	0000112c 0000113a 00001148 00001156     ,...:...H...V...
1a0069f8:	00001164 00001172 00001180 0000118e     d...r...........
1a006a08:	0000119c 000011aa 000011b8 000011c6     ................
1a006a18:	000011d4 000011e2 000011f0 000011fe     ................
1a006a28:	0000120c 0000121a 00001228 00001236     ........(...6...
1a006a38:	00001244 00001252 00001260 0000126e     D...R...`...n...
1a006a48:	0000127c 0000128a 00001298 000012a6     |...............
1a006a58:	000012b4 000012c2 000012d0 000012de     ................
1a006a68:	000012ec 000012fa 00001308 00001316     ................
1a006a78:	00001324 00001332 00001340 0000134e     $...2...@...N...
1a006a88:	0000135c 0000136a 00001378 00001386     \...j...x.......
1a006a98:	00001394 000013a2 000013b0 000013be     ................
1a006aa8:	000013cc 000013da 000013e8 000013f6     ................
1a006ab8:	00001404 00001412 00001420 0000142e     ........ .......
1a006ac8:	0000143c 0000144a 00001458 00001466     <...J...X...f...
1a006ad8:	00001474 00001482 00001490 0000149e     t...............
1a006ae8:	000014ac 000014ba 000014c8 000014d6     ................
1a006af8:	000014e4 000014f2 00001500 0000150e     ................
1a006b08:	0000151c 0000152a 00001538 00001546     ....*...8...F...
1a006b18:	00001554 00001562 00001570 0000157e     T...b...p...~...
1a006b28:	0000158c 0000159a 000015a8 000015b6     ................
1a006b38:	000015c4 000015d2 000015e0 000015ee     ................
1a006b48:	000015fc 0000160a 00001618 00001626     ............&...
1a006b58:	00001634 00001642 00001650 0000165e     4...B...P...^...
1a006b68:	0000166c 0000167a 00001688 00001696     l...z...........
1a006b78:	000016a4 000016b2 000016c0 000016ce     ................
1a006b88:	000016dc 000016ea 000016f8 00001706     ................
1a006b98:	00001714 00001722 00001730 0000173e     ...."...0...>...
1a006ba8:	0000174c 0000175a 00001768 00001776     L...Z...h...v...
1a006bb8:	00001784 00001792 000017a0 000017ae     ................
1a006bc8:	000017bc 000017ca 000017d8 000017e6     ................
1a006bd8:	000017f4 00001802 00001810 0000181e     ................
1a006be8:	0000182c 0000183a 00001848 00001856     ,...:...H...V...
1a006bf8:	00001864 00001872 00001880 0000188e     d...r...........
1a006c08:	0000189c 000018aa 000018b8 000018c6     ................
1a006c18:	000018d4 000018e2 000018f0 000018fe     ................
1a006c28:	0000190c 0000191a 00001928 00001936     ........(...6...
1a006c38:	00001944 00001952 00001960 0000196e     D...R...`...n...
1a006c48:	0000197c 0000198a 00001998 000019a6     |...............
1a006c58:	000019b4 000019c2 000019d0 000019de     ................
1a006c68:	000019ec 000019fa 00001a08 00001a16     ................
1a006c78:	00001a24 00001a32 00001a40 00001a4e     $...2...@...N...
1a006c88:	00001a5c 00001a6a 00001a78 00001a86     \...j...x.......
1a006c98:	00001a94 00001aa2 00001ab0 00001abe     ................
1a006ca8:	00001acc 00001ada 00001ae8 00001af6     ................
1a006cb8:	00001b04 00001b12 00001b20 00001b2e     ........ .......
1a006cc8:	00001b3c 00001b4a 00001b58 00001b66     <...J...X...f...
1a006cd8:	00001b74 00001b82 00001b90 00001b9e     t...............
1a006ce8:	00001bac 00001bba 00001bc8 00001bd6     ................
1a006cf8:	00001be4 00001bf2 00001c00 00001c0e     ................
1a006d08:	00001c1c 00001c2a 00001c38 00001c46     ....*...8...F...
1a006d18:	00001c54 00001c62 00001c70 00001c7e     T...b...p...~...
1a006d28:	00001c8c 00001c9a 00001ca8 00001cb6     ................
1a006d38:	00001cc4 00001cd2 00001ce0 00001cee     ................
1a006d48:	00001cfc 00001d0a 00001d18 00001d26     ............&...
1a006d58:	00001d34 00001d42 00001d50 00001d5e     4...B...P...^...
1a006d68:	00001d6c 00001d7a 00001d88 00001d96     l...z...........
1a006d78:	00001da4 00001db2 00001dc0 00001dce     ................
1a006d88:	00001ddc 00001dea 00001df8 00001e06     ................
1a006d98:	00001e14 00001e22 00001e30 00001e3e     ...."...0...>...
1a006da8:	00001e4c 00001e5a 00001e68 00001e76     L...Z...h...v...
1a006db8:	00001e84 00001e92 00001ea0 00001eae     ................
1a006dc8:	00001ebc 00001eca 00001ed8 00001ee6     ................
1a006dd8:	00001ef4 00001f02 00001f10 00001f1e     ................
1a006de8:	00001f2c 00001f3a 00001f48 00001f56     ,...:...H...V...
1a006df8:	00001f64 00001f72 00001f80 00001f8e     d...r...........
1a006e08:	00001f9c 00001faa 00001fb8 00001fc6     ................
1a006e18:	00001fd4 00001fe2 00001ff0 00001ffe     ................
1a006e28:	0000200c 0000201a 00002028 00002036     . ... ..( ..6 ..
1a006e38:	00002044 00002052 00002060 0000206e     D ..R ..` ..n ..
1a006e48:	0000207c 0000208a 00002098 000020a6     | ... ... ... ..
1a006e58:	000020b4 000020c2 000020d0 000020de     . ... ... ... ..
1a006e68:	000020ec 000020fa 00002108 00002116     . ... ...!...!..
1a006e78:	00002124 00002132 00002140 0000214e     $!..2!..@!..N!..
1a006e88:	0000215c 0000216a 00002178 00002186     \!..j!..x!...!..
1a006e98:	00002194 000021a2 000021b0 000021be     .!...!...!...!..
1a006ea8:	000021cc 000021da 000021e8 000021f6     .!...!...!...!..
1a006eb8:	00002204 00002212 00002220 0000222e     ."...".. "..."..
1a006ec8:	0000223c 0000224a 00002258 00002266     <"..J"..X"..f"..
1a006ed8:	00002274 00002282 00002290 0000229e     t"..."..."..."..
1a006ee8:	000022ac 000022ba 000022c8 000022d6     ."..."..."..."..
1a006ef8:	000022e4 000022f2 00002300 0000230e     ."..."...#...#..
1a006f08:	0000231c 0000232a 00002338 00002346     .#..*#..8#..F#..
1a006f18:	00002354 00002362 00002370 0000237e     T#..b#..p#..~#..
1a006f28:	0000238c 0000239a 000023a8 000023b6     .#...#...#...#..
1a006f38:	000023c4 000023d2 000023e0 000023ee     .#...#...#...#..
1a006f48:	000023fc 0000240a 00002418 00002426     .#...$...$..&$..
1a006f58:	00002434 00002442 00002450 0000245e     4$..B$..P$..^$..
1a006f68:	0000246c 0000247a 00002488 00002496     l$..z$...$...$..
1a006f78:	000024a4 000024b2 000024c0 000024ce     .$...$...$...$..
1a006f88:	000024dc 000024ea 000024f8 00002506     .$...$...$...%..
1a006f98:	00002514 00002522 00002530 0000253e     .%.."%..0%..>%..
1a006fa8:	0000254c 0000255a 00002568 00002576     L%..Z%..h%..v%..
1a006fb8:	00002584 00002592 000025a0 000025ae     .%...%...%...%..
1a006fc8:	000025bc 000025ca 000025d8 000025e6     .%...%...%...%..
1a006fd8:	000025f4 00002602 00002610 0000261e     .%...&...&...&..
1a006fe8:	0000262c 0000263a 00002648 00002656     ,&..:&..H&..V&..
1a006ff8:	00002664 00002672 00002680 0000268e     d&..r&...&...&..
1a007008:	0000269c 000026aa 000026b8 000026c6     .&...&...&...&..
1a007018:	000026d4 000026e2 000026f0 000026fe     .&...&...&...&..
1a007028:	0000270c 0000271a 00002728 00002736     .'...'..('..6'..
1a007038:	00002744 00002752 00002760 0000276e     D'..R'..`'..n'..
1a007048:	0000277c 0000278a 00002798 000027a6     |'...'...'...'..
1a007058:	000027b4 000027c2 000027d0 000027de     .'...'...'...'..
1a007068:	000027ec 000027fa 00002808 00002816     .'...'...(...(..
1a007078:	00002824 00002832 00002840 0000284e     $(..2(..@(..N(..
1a007088:	0000285c 0000286a 00002878 00002886     \(..j(..x(...(..
1a007098:	00002894 000028a2 000028b0 000028be     .(...(...(...(..
1a0070a8:	000028cc 000028da 000028e8 000028f6     .(...(...(...(..
1a0070b8:	00002904 00002912 00002920 0000292e     .)...).. )...)..
1a0070c8:	0000293c 0000294a 00002958 00002966     <)..J)..X)..f)..
1a0070d8:	00002974 00002982 00002990 0000299e     t)...)...)...)..
1a0070e8:	000029ac 000029ba 000029c8 000029d6     .)...)...)...)..
1a0070f8:	000029e4 000029f2 00002a00 00002a0e     .)...)...*...*..
1a007108:	00002a1c 00002a2a 00002a38 00002a46     .*..**..8*..F*..
1a007118:	00002a54 00002a62 00002a70 00002a7e     T*..b*..p*..~*..
1a007128:	00002a8c 00002a9a 00002aa8 00002ab6     .*...*...*...*..
1a007138:	00002ac4 00002ad2 00002ae0 00002aee     .*...*...*...*..
1a007148:	00002afc 00002b0a 00002b18 00002b26     .*...+...+..&+..
1a007158:	00002b34 00002b42 00002b50 00002b5e     4+..B+..P+..^+..
1a007168:	00002b6c 00002b7a 00002b88 00002b96     l+..z+...+...+..
1a007178:	00002ba4 00002bb2 00002bc0 00002bce     .+...+...+...+..
1a007188:	00002bdc 00002bea 00002bf8 00002c06     .+...+...+...,..
1a007198:	00002c14 00002c22 00002c30 00002c3e     .,..",..0,..>,..
1a0071a8:	00002c4c 00002c5a 00002c68 00002c76     L,..Z,..h,..v,..
1a0071b8:	00002c84 00002c92 00002ca0 00002cae     .,...,...,...,..
1a0071c8:	00002cbc 00002cca 00002cd8 00002ce6     .,...,...,...,..
1a0071d8:	00002cf4 00002d02 00002d10 00002d1e     .,...-...-...-..
1a0071e8:	00002d2c 00002d3a 00002d48 00002d56     ,-..:-..H-..V-..
1a0071f8:	00002d64 00002d72 00002d80 00002d8e     d-..r-...-...-..
1a007208:	00002d9c 00002daa 00002db8 00002dc6     .-...-...-...-..
1a007218:	00002dd4 00002de2 00002df0 00002dfe     .-...-...-...-..
1a007228:	00002e0c 00002e1a 00002e28 00002e36     ........(...6...
1a007238:	00002e44 00002e52 00002e60 00002e6e     D...R...`...n...
1a007248:	00002e7c 00002e8a 00002e98 00002ea6     |...............
1a007258:	00002eb4 00002ec2 00002ed0 00002ede     ................
1a007268:	00002eec 00002efa 00002f08 00002f16     ........./.../..
1a007278:	00002f24 00002f32 00002f40 00002f4e     $/..2/..@/..N/..
1a007288:	00002f5c 00002f6a 00002f78 00002f86     \/..j/..x/.../..
1a007298:	00002f94 00002fa2 00002fb0 00002fbe     ./.../.../.../..
1a0072a8:	00002fcc 00002fda 00002fe8 00002ff6     ./.../.../.../..
1a0072b8:	00003004 00003012 00003020 0000302e     .0...0.. 0...0..
1a0072c8:	0000303c 0000304a 00003058 00003066     <0..J0..X0..f0..
1a0072d8:	00003074 00003082 00003090 0000309e     t0...0...0...0..
1a0072e8:	000030ac 000030ba 000030c8 000030d6     .0...0...0...0..
1a0072f8:	000030e4 000030f2 00003100 0000310e     .0...0...1...1..
1a007308:	0000311c 0000312a 00003138 00003146     .1..*1..81..F1..
1a007318:	00003154 00003162 00003170 0000317e     T1..b1..p1..~1..
1a007328:	0000318c 0000319a 000031a8 000031b6     .1...1...1...1..
1a007338:	000031c4 000031d2 000031e0 000031ee     .1...1...1...1..
1a007348:	000031fc 0000320a 00003218 00003226     .1...2...2..&2..
1a007358:	00003234 00003242 00003250 0000325e     42..B2..P2..^2..
1a007368:	0000326c 0000327a 00003288 00003296     l2..z2...2...2..
1a007378:	000032a4 000032b2 000032c0 000032ce     .2...2...2...2..
1a007388:	000032dc 000032ea 000032f8 00003306     .2...2...2...3..
1a007398:	00003314 00003322 00003330 0000333e     .3.."3..03..>3..
1a0073a8:	0000334c 0000335a 00003368 00003376     L3..Z3..h3..v3..
1a0073b8:	00003384 00003392 000033a0 000033ae     .3...3...3...3..
1a0073c8:	000033bc 000033ca 000033d8 000033e6     .3...3...3...3..
1a0073d8:	000033f4 00003402 00003410 0000341e     .3...4...4...4..
1a0073e8:	0000342c 0000343a 00003448 00003456     ,4..:4..H4..V4..
1a0073f8:	00003464 00003472 00003480 0000348e     d4..r4...4...4..
1a007408:	0000349c 000034aa 000034b8 000034c6     .4...4...4...4..
1a007418:	000034d4 000034e2 000034f0 000034fe     .4...4...4...4..
1a007428:	0000350c 0000351a 00003528 00003536     .5...5..(5..65..
1a007438:	00003544 00003552 00003560 0000356e     D5..R5..`5..n5..
1a007448:	0000357c 0000358a 00003598 000035a6     |5...5...5...5..
1a007458:	000035b4 000035c2 000035d0 000035de     .5...5...5...5..
1a007468:	000035ec 000035fa 00003608 00003616     .5...5...6...6..
1a007478:	00003624 00003632 00003640 0000364e     $6..26..@6..N6..
1a007488:	0000365c 0000366a 00003678 00003686     \6..j6..x6...6..
1a007498:	00003694 000036a2 000036b0 000036be     .6...6...6...6..
1a0074a8:	000036cc 000036da 000036e8 000036f6     .6...6...6...6..
1a0074b8:	00003704 00003712 00003720 0000372e     .7...7.. 7...7..
1a0074c8:	0000373c 0000374a 00003758 00003766     <7..J7..X7..f7..
1a0074d8:	00003774 00003782 00003790 0000379e     t7...7...7...7..
1a0074e8:	000037ac 000037ba 000037c8 000037d6     .7...7...7...7..
1a0074f8:	000037e4 000037f2                       .7...7..

1a007500 <vbat_look_up>:
1a007500:	00000000 0000000f 0000001f 0000002f     ............/...
1a007510:	0000003e 0000004e 0000005e 0000006e     >...N...^...n...
1a007520:	0000007d 0000008d 0000009d 000000ad     }...............
1a007530:	000000bc 000000cc 000000dc 000000ec     ................
1a007540:	000000fb 0000010b 0000011b 0000012b     ............+...
1a007550:	0000013a 0000014a 0000015a 0000016a     :...J...Z...j...
1a007560:	00000179 00000189 00000199 000001a8     y...............
1a007570:	000001b8 000001c8 000001d8 000001e7     ................
1a007580:	000001f7 00000207 00000217 00000226     ............&...
1a007590:	00000236 00000246 00000256 00000265     6...F...V...e...
1a0075a0:	00000275 00000285 00000295 000002a4     u...............
1a0075b0:	000002b4 000002c4 000002d4 000002e3     ................
1a0075c0:	000002f3 00000303 00000313 00000322     ............"...
1a0075d0:	00000332 00000342 00000351 00000361     2...B...Q...a...
1a0075e0:	00000371 00000381 00000390 000003a0     q...............
1a0075f0:	000003b0 000003c0 000003cf 000003df     ................
1a007600:	000003ef 000003ff 0000040e 0000041e     ................
1a007610:	0000042e 0000043e 0000044d 0000045d     ....>...M...]...
1a007620:	0000046d 0000047d 0000048c 0000049c     m...}...........
1a007630:	000004ac 000004bb 000004cb 000004db     ................
1a007640:	000004eb 000004fa 0000050a 0000051a     ................
1a007650:	0000052a 00000539 00000549 00000559     *...9...I...Y...
1a007660:	00000569 00000578 00000588 00000598     i...x...........
1a007670:	000005a8 000005b7 000005c7 000005d7     ................
1a007680:	000005e7 000005f6 00000606 00000616     ................
1a007690:	00000626 00000635 00000645 00000655     &...5...E...U...
1a0076a0:	00000664 00000674 00000684 00000694     d...t...........
1a0076b0:	000006a3 000006b3 000006c3 000006d3     ................
1a0076c0:	000006e2 000006f2 00000702 00000712     ................
1a0076d0:	00000721 00000731 00000741 00000751     !...1...A...Q...
1a0076e0:	00000760 00000770 00000780 00000790     `...p...........
1a0076f0:	0000079f 000007af 000007bf 000007ce     ................
1a007700:	000007de 000007ee 000007fe 0000080d     ................
1a007710:	0000081d 0000082d 0000083d 0000084c     ....-...=...L...
1a007720:	0000085c 0000086c 0000087c 0000088b     \...l...|.......
1a007730:	0000089b 000008ab 000008bb 000008ca     ................
1a007740:	000008da 000008ea 000008fa 00000909     ................
1a007750:	00000919 00000929 00000939 00000948     ....)...9...H...
1a007760:	00000958 00000968 00000977 00000987     X...h...w.......
1a007770:	00000997 000009a7 000009b6 000009c6     ................
1a007780:	000009d6 000009e6 000009f5 00000a05     ................
1a007790:	00000a15 00000a25 00000a34 00000a44     ....%...4...D...
1a0077a0:	00000a54 00000a64 00000a73 00000a83     T...d...s.......
1a0077b0:	00000a93 00000aa3 00000ab2 00000ac2     ................
1a0077c0:	00000ad2 00000ae1 00000af1 00000b01     ................
1a0077d0:	00000b11 00000b20 00000b30 00000b40     .... ...0...@...
1a0077e0:	00000b50 00000b5f 00000b6f 00000b7f     P..._...o.......
1a0077f0:	00000b8f 00000b9e 00000bae 00000bbe     ................
1a007800:	00000bce 00000bdd 00000bed 00000bfd     ................
1a007810:	00000c0d 00000c1c 00000c2c 00000c3c     ........,...<...
1a007820:	00000c4c 00000c5b 00000c6b 00000c7b     L...[...k...{...
1a007830:	00000c8a 00000c9a 00000caa 00000cba     ................
1a007840:	00000cc9 00000cd9 00000ce9 00000cf9     ................
1a007850:	00000d08 00000d18 00000d28 00000d38     ........(...8...
1a007860:	00000d47 00000d57 00000d67 00000d77     G...W...g...w...
1a007870:	00000d86 00000d96 00000da6 00000db6     ................
1a007880:	00000dc5 00000dd5 00000de5 00000df4     ................
1a007890:	00000e04 00000e14 00000e24 00000e33     ........$...3...
1a0078a0:	00000e43 00000e53 00000e63 00000e72     C...S...c...r...
1a0078b0:	00000e82 00000e92 00000ea2 00000eb1     ................
1a0078c0:	00000ec1 00000ed1 00000ee1 00000ef0     ................
1a0078d0:	00000f00 00000f10 00000f20 00000f2f     ........ .../...
1a0078e0:	00000f3f 00000f4f 00000f5f 00000f6e     ?...O..._...n...
1a0078f0:	00000f7e 00000f8e 00000f9d 00000fad     ~...............
1a007900:	00000fbd 00000fcd 00000fdc 00000fec     ................
1a007910:	00000ffc 0000100c 0000101b 0000102b     ............+...
1a007920:	0000103b 0000104b 0000105a 0000106a     ;...K...Z...j...
1a007930:	0000107a 0000108a 00001099 000010a9     z...............
1a007940:	000010b9 000010c9 000010d8 000010e8     ................
1a007950:	000010f8 00001107 00001117 00001127     ............'...
1a007960:	00001137 00001146 00001156 00001166     7...F...V...f...
1a007970:	00001176 00001185 00001195 000011a5     v...............
1a007980:	000011b5 000011c4 000011d4 000011e4     ................
1a007990:	000011f4 00001203 00001213 00001223     ............#...
1a0079a0:	00001233 00001242 00001252 00001262     3...B...R...b...
1a0079b0:	00001272 00001281 00001291 000012a1     r...............
1a0079c0:	000012b0 000012c0 000012d0 000012e0     ................
1a0079d0:	000012ef 000012ff 0000130f 0000131f     ................
1a0079e0:	0000132e 0000133e 0000134e 0000135e     ....>...N...^...
1a0079f0:	0000136d 0000137d 0000138d 0000139d     m...}...........
1a007a00:	000013ac 000013bc 000013cc 000013dc     ................
1a007a10:	000013eb 000013fb 0000140b 0000141a     ................
1a007a20:	0000142a 0000143a 0000144a 00001459     *...:...J...Y...
1a007a30:	00001469 00001479 00001489 00001498     i...y...........
1a007a40:	000014a8 000014b8 000014c8 000014d7     ................
1a007a50:	000014e7 000014f7 00001507 00001516     ................
1a007a60:	00001526 00001536 00001546 00001555     &...6...F...U...
1a007a70:	00001565 00001575 00001585 00001594     e...u...........
1a007a80:	000015a4 000015b4 000015c3 000015d3     ................
1a007a90:	000015e3 000015f3 00001602 00001612     ................
1a007aa0:	00001622 00001632 00001641 00001651     "...2...A...Q...
1a007ab0:	00001661 00001671 00001680 00001690     a...q...........
1a007ac0:	000016a0 000016b0 000016bf 000016cf     ................
1a007ad0:	000016df 000016ef 000016fe 0000170e     ................
1a007ae0:	0000171e 0000172d 0000173d 0000174d     ....-...=...M...
1a007af0:	0000175d 0000176c 0000177c 0000178c     ]...l...|.......
1a007b00:	0000179c 000017ab 000017bb 000017cb     ................
1a007b10:	000017db 000017ea 000017fa 0000180a     ................
1a007b20:	0000181a 00001829 00001839 00001849     ....)...9...I...
1a007b30:	00001859 00001868 00001878 00001888     Y...h...x.......
1a007b40:	00001898 000018a7 000018b7 000018c7     ................
1a007b50:	000018d6 000018e6 000018f6 00001906     ................
1a007b60:	00001915 00001925 00001935 00001945     ....%...5...E...
1a007b70:	00001954 00001964 00001974 00001984     T...d...t.......
1a007b80:	00001993 000019a3 000019b3 000019c3     ................
1a007b90:	000019d2 000019e2 000019f2 00001a02     ................
1a007ba0:	00001a11 00001a21 00001a31 00001a40     ....!...1...@...
1a007bb0:	00001a50 00001a60 00001a70 00001a7f     P...`...p.......
1a007bc0:	00001a8f 00001a9f 00001aaf 00001abe     ................
1a007bd0:	00001ace 00001ade 00001aee 00001afd     ................
1a007be0:	00001b0d 00001b1d 00001b2d 00001b3c     ........-...<...
1a007bf0:	00001b4c 00001b5c 00001b6c 00001b7b     L...\...l...{...
1a007c00:	00001b8b 00001b9b 00001bab 00001bba     ................
1a007c10:	00001bca 00001bda 00001be9 00001bf9     ................
1a007c20:	00001c09 00001c19 00001c28 00001c38     ........(...8...
1a007c30:	00001c48 00001c58 00001c67 00001c77     H...X...g...w...
1a007c40:	00001c87 00001c97 00001ca6 00001cb6     ................
1a007c50:	00001cc6 00001cd6 00001ce5 00001cf5     ................
1a007c60:	00001d05 00001d15 00001d24 00001d34     ........$...4...
1a007c70:	00001d44 00001d53 00001d63 00001d73     D...S...c...s...
1a007c80:	00001d83 00001d92 00001da2 00001db2     ................
1a007c90:	00001dc2 00001dd1 00001de1 00001df1     ................
1a007ca0:	00001e01 00001e10 00001e20 00001e30     ........ ...0...
1a007cb0:	00001e40 00001e4f 00001e5f 00001e6f     @...O..._...o...
1a007cc0:	00001e7f 00001e8e 00001e9e 00001eae     ................
1a007cd0:	00001ebe 00001ecd 00001edd 00001eed     ................
1a007ce0:	00001efc 00001f0c 00001f1c 00001f2c     ............,...
1a007cf0:	00001f3b 00001f4b 00001f5b 00001f6b     ;...K...[...k...
1a007d00:	00001f7a 00001f8a 00001f9a 00001faa     z...............
1a007d10:	00001fb9 00001fc9 00001fd9 00001fe9     ................
1a007d20:	00001ff8 00002008 00002018 00002028     ..... ... ..( ..
1a007d30:	00002037 00002047 00002057 00002066     7 ..G ..W ..f ..
1a007d40:	00002076 00002086 00002096 000020a5     v ... ... ... ..
1a007d50:	000020b5 000020c5 000020d5 000020e4     . ... ... ... ..
1a007d60:	000020f4 00002104 00002114 00002123     . ...!...!..#!..
1a007d70:	00002133 00002143 00002153 00002162     3!..C!..S!..b!..
1a007d80:	00002172 00002182 00002192 000021a1     r!...!...!...!..
1a007d90:	000021b1 000021c1 000021d1 000021e0     .!...!...!...!..
1a007da0:	000021f0 00002200 0000220f 0000221f     .!..."..."..."..
1a007db0:	0000222f 0000223f 0000224e 0000225e     /"..?"..N"..^"..
1a007dc0:	0000226e 0000227e 0000228d 0000229d     n"..~"..."..."..
1a007dd0:	000022ad 000022bd 000022cc 000022dc     ."..."..."..."..
1a007de0:	000022ec 000022fc 0000230b 0000231b     ."..."...#...#..
1a007df0:	0000232b 0000233b 0000234a 0000235a     +#..;#..J#..Z#..
1a007e00:	0000236a 00002379 00002389 00002399     j#..y#...#...#..
1a007e10:	000023a9 000023b8 000023c8 000023d8     .#...#...#...#..
1a007e20:	000023e8 000023f7 00002407 00002417     .#...#...$...$..
1a007e30:	00002427 00002436 00002446 00002456     '$..6$..F$..V$..
1a007e40:	00002466 00002475 00002485 00002495     f$..u$...$...$..
1a007e50:	000024a5 000024b4 000024c4 000024d4     .$...$...$...$..
1a007e60:	000024e4 000024f3 00002503 00002513     .$...$...%...%..
1a007e70:	00002522 00002532 00002542 00002552     "%..2%..B%..R%..
1a007e80:	00002561 00002571 00002581 00002591     a%..q%...%...%..
1a007e90:	000025a0 000025b0 000025c0 000025d0     .%...%...%...%..
1a007ea0:	000025df 000025ef 000025ff 0000260f     .%...%...%...&..
1a007eb0:	0000261e 0000262e 0000263e 0000264e     .&...&..>&..N&..
1a007ec0:	0000265d 0000266d 0000267d 0000268c     ]&..m&..}&...&..
1a007ed0:	0000269c 000026ac 000026bc 000026cb     .&...&...&...&..
1a007ee0:	000026db 000026eb 000026fb 0000270a     .&...&...&...'..
1a007ef0:	0000271a 0000272a 0000273a 00002749     .'..*'..:'..I'..
1a007f00:	00002759 00002769 00002779 00002788     Y'..i'..y'...'..
1a007f10:	00002798 000027a8 000027b8 000027c7     .'...'...'...'..
1a007f20:	000027d7 000027e7 000027f7 00002806     .'...'...'...(..
1a007f30:	00002816 00002826 00002835 00002845     .(..&(..5(..E(..
1a007f40:	00002855 00002865 00002874 00002884     U(..e(..t(...(..
1a007f50:	00002894 000028a4 000028b3 000028c3     .(...(...(...(..
1a007f60:	000028d3 000028e3 000028f2 00002902     .(...(...(...)..
1a007f70:	00002912 00002922 00002931 00002941     .)..")..1)..A)..
1a007f80:	00002951 00002961 00002970 00002980     Q)..a)..p)...)..
1a007f90:	00002990 0000299f 000029af 000029bf     .)...)...)...)..
1a007fa0:	000029cf 000029de 000029ee 000029fe     .)...)...)...)..
1a007fb0:	00002a0e 00002a1d 00002a2d 00002a3d     .*...*..-*..=*..
1a007fc0:	00002a4d 00002a5c 00002a6c 00002a7c     M*..\*..l*..|*..
1a007fd0:	00002a8c 00002a9b 00002aab 00002abb     .*...*...*...*..
1a007fe0:	00002acb 00002ada 00002aea 00002afa     .*...*...*...*..
1a007ff0:	00002b0a 00002b19 00002b29 00002b39     .+...+..)+..9+..
1a008000:	00002b48 00002b58 00002b68 00002b78     H+..X+..h+..x+..
1a008010:	00002b87 00002b97 00002ba7 00002bb7     .+...+...+...+..
1a008020:	00002bc6 00002bd6 00002be6 00002bf6     .+...+...+...+..
1a008030:	00002c05 00002c15 00002c25 00002c35     .,...,..%,..5,..
1a008040:	00002c44 00002c54 00002c64 00002c74     D,..T,..d,..t,..
1a008050:	00002c83 00002c93 00002ca3 00002cb2     .,...,...,...,..
1a008060:	00002cc2 00002cd2 00002ce2 00002cf1     .,...,...,...,..
1a008070:	00002d01 00002d11 00002d21 00002d30     .-...-..!-..0-..
1a008080:	00002d40 00002d50 00002d60 00002d6f     @-..P-..`-..o-..
1a008090:	00002d7f 00002d8f 00002d9f 00002dae     .-...-...-...-..
1a0080a0:	00002dbe 00002dce 00002dde 00002ded     .-...-...-...-..
1a0080b0:	00002dfd 00002e0d 00002e1d 00002e2c     .-..........,...
1a0080c0:	00002e3c 00002e4c 00002e5b 00002e6b     <...L...[...k...
1a0080d0:	00002e7b 00002e8b 00002e9a 00002eaa     {...............
1a0080e0:	00002eba 00002eca 00002ed9 00002ee9     ................
1a0080f0:	00002ef9 00002f09 00002f18 00002f28     ...../.../..(/..
1a008100:	00002f38 00002f48 00002f57 00002f67     8/..H/..W/..g/..
1a008110:	00002f77 00002f87 00002f96 00002fa6     w/.../.../.../..
1a008120:	00002fb6 00002fc5 00002fd5 00002fe5     ./.../.../.../..
1a008130:	00002ff5 00003004 00003014 00003024     ./...0...0..$0..
1a008140:	00003034 00003043 00003053 00003063     40..C0..S0..c0..
1a008150:	00003073 00003082 00003092 000030a2     s0...0...0...0..
1a008160:	000030b2 000030c1 000030d1 000030e1     .0...0...0...0..
1a008170:	000030f1 00003100 00003110 00003120     .0...1...1.. 1..
1a008180:	00003130 0000313f 0000314f 0000315f     01..?1..O1.._1..
1a008190:	0000316e 0000317e 0000318e 0000319e     n1..~1...1...1..
1a0081a0:	000031ad 000031bd 000031cd 000031dd     .1...1...1...1..
1a0081b0:	000031ec 000031fc 0000320c 0000321c     .1...1...2...2..
1a0081c0:	0000322b 0000323b 0000324b 0000325b     +2..;2..K2..[2..
1a0081d0:	0000326a 0000327a 0000328a 0000329a     j2..z2...2...2..
1a0081e0:	000032a9 000032b9 000032c9 000032d8     .2...2...2...2..
1a0081f0:	000032e8 000032f8 00003308 00003317     .2...2...3...3..
1a008200:	00003327 00003337 00003347 00003356     '3..73..G3..V3..
1a008210:	00003366 00003376 00003386 00003395     f3..v3...3...3..
1a008220:	000033a5 000033b5 000033c5 000033d4     .3...3...3...3..
1a008230:	000033e4 000033f4 00003404 00003413     .3...3...4...4..
1a008240:	00003423 00003433 00003443 00003452     #4..34..C4..R4..
1a008250:	00003462 00003472 00003481 00003491     b4..r4...4...4..
1a008260:	000034a1 000034b1 000034c0 000034d0     .4...4...4...4..
1a008270:	000034e0 000034f0 000034ff 0000350f     .4...4...4...5..
1a008280:	0000351f 0000352f 0000353e 0000354e     .5../5..>5..N5..
1a008290:	0000355e 0000356e 0000357d 0000358d     ^5..n5..}5...5..
1a0082a0:	0000359d 000035ad 000035bc 000035cc     .5...5...5...5..
1a0082b0:	000035dc 000035eb 000035fb 0000360b     .5...5...5...6..
1a0082c0:	0000361b 0000362a 0000363a 0000364a     .6..*6..:6..J6..
1a0082d0:	0000365a 00003669 00003679 00003689     Z6..i6..y6...6..
1a0082e0:	00003699 000036a8 000036b8 000036c8     .6...6...6...6..
1a0082f0:	000036d8 000036e7 000036f7 00003707     .6...6...6...7..
1a008300:	00003717 00003726 00003736 00003746     .7..&7..67..F7..
1a008310:	00003756 00003765 00003775 00003785     V7..e7..u7...7..
1a008320:	00003794 000037a4 000037b4 000037c4     .7...7...7...7..
1a008330:	000037d3 000037e3 000037f3 00003803     .7...7...7...8..
1a008340:	00003812 00003822 00003832 00003842     .8.."8..28..B8..
1a008350:	00003851 00003861 00003871 00003881     Q8..a8..q8...8..
1a008360:	00003890 000038a0 000038b0 000038c0     .8...8...8...8..
1a008370:	000038cf 000038df 000038ef 000038fe     .8...8...8...8..
1a008380:	0000390e 0000391e 0000392e 0000393d     .9...9...9..=9..
1a008390:	0000394d 0000395d 0000396d 0000397c     M9..]9..m9..|9..
1a0083a0:	0000398c 0000399c 000039ac 000039bb     .9...9...9...9..
1a0083b0:	000039cb 000039db 000039eb 000039fa     .9...9...9...9..
1a0083c0:	00003a0a 00003a1a 00003a2a 00003a39     .:...:..*:..9:..
1a0083d0:	00003a49 00003a59 00003a69 00003a78     I:..Y:..i:..x:..
1a0083e0:	00003a88 00003a98 00003aa7 00003ab7     .:...:...:...:..
1a0083f0:	00003ac7 00003ad7 00003ae6 00003af6     .:...:...:...:..
1a008400:	00003b06 00003b16 00003b25 00003b35     .;...;..%;..5;..
1a008410:	00003b45 00003b55 00003b64 00003b74     E;..U;..d;..t;..
1a008420:	00003b84 00003b94 00003ba3 00003bb3     .;...;...;...;..
1a008430:	00003bc3 00003bd3 00003be2 00003bf2     .;...;...;...;..
1a008440:	00003c02 00003c11 00003c21 00003c31     .<...<..!<..1<..
1a008450:	00003c41 00003c50 00003c60 00003c70     A<..P<..`<..p<..
1a008460:	00003c80 00003c8f 00003c9f 00003caf     .<...<...<...<..
1a008470:	00003cbf 00003cce 00003cde 00003cee     .<...<...<...<..
1a008480:	00003cfe 00003d0d 00003d1d 00003d2d     .<...=...=..-=..
1a008490:	00003d3d 00003d4c 00003d5c 00003d6c     ==..L=..\=..l=..
1a0084a0:	00003d7c 00003d8b 00003d9b 00003dab     |=...=...=...=..
1a0084b0:	00003dba 00003dca 00003dda 00003dea     .=...=...=...=..
1a0084c0:	00003df9 00003e09 00003e19 00003e29     .=...>...>..)>..
1a0084d0:	00003e38 00003e48 00003e58 00003e68     8>..H>..X>..h>..
1a0084e0:	00003e77 00003e87 00003e97 00003ea7     w>...>...>...>..
1a0084f0:	00003eb6 00003ec6 00003ed6 00003ee6     .>...>...>...>..
1a008500:	65756c62 746f6f74 61745f68 00006b73     bluetooth_task..
1a008510:	706d6574 7361745f 0000006b 6c616e61     temp_task...anal
1a008520:	735f676f 6f736e65 ff007372 1d642502     og_sensors...%d.
1a008530:	251d7325 64251d64 3230251d 0a0d0378     %s.%d.%d.%02x...
1a008540:	ffffff00 696c6d68 0d6f7473 00000000     ....hmlisto.....
1a008550:	454d414e 2d454349 00514441 45505954     NAMEICE-ADQ.TYPE
1a008560:	ffff0030 002b5441 51726d54 ffffff00     0...AT+.TmrQ....
1a008570:	20726d54 00637653 454c4449 ffffff00     Tmr Svc.IDLE....
1a008580:	6c707041 74616369 206e6f69 6c6c614d     Application Mall
1a008590:	4620636f 656c6961 6f482064 0d216b6f     oc Failed Hook!.
1a0085a0:	00000000 7362696c 6572662f 6f747265     ....libs/freerto
1a0085b0:	6f732f73 65637275 6f6f682f 632e736b     s/source/hooks.c
1a0085c0:	ffffff00 70410a0d 63696c70 6f697461     ......Applicatio
1a0085d0:	7453206e 206b6361 7265764f 776f6c66     n Stack Overflow
1a0085e0:	6f202121 6154206e 203a6b73 0a0d7325     !! on Task: %s..
1a0085f0:	ffffff00 41760a0d 72657373 6c614374     ......vAssertCal
1a008600:	2864656c 200a0d29 4c4c2020 20656e69     led()..   LLine 
1a008610:	626d754e 3d207265 0d642520 2020200a     Number = %d..   
1a008620:	656c6946 6d614e20 203d2065 0a0d7325     File Name = %s..
1a008630:	ff000a0d                                ....

1a008634 <InitClkStates>:
1a008634:	01010f01                                ....

1a008638 <pinmuxing>:
1a008638:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a008648:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a008658:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a008668:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a008678:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a008688:	00d50301 00d50401 00160107 00560207     ..............V.
1a008698:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0086a8:	00570206                                ..W.

1a0086ac <ExtRateIn>:
1a0086ac:	00000000                                ....

1a0086b0 <GpioButtons>:
1a0086b0:	08000400 09010900                       ........

1a0086b8 <GpioLeds>:
1a0086b8:	01050005 0e000205 0c010b01              ............

1a0086c4 <GpioPorts>:
1a0086c4:	03030003 0f050403 05031005 07030603     ................
1a0086d4:	ffff0802                                ....

1a0086d8 <OscRateIn>:
1a0086d8:	00b71b00                                ....

1a0086dc <InitClkStates>:
1a0086dc:	00010100 00010909 0001090a 01010701     ................
1a0086ec:	00010902 00010906 0101090c 0001090d     ................
1a0086fc:	0001090e 0001090f 00010910 00010911     ................
1a00870c:	00010912 00010913 00011114 00011119     ................
1a00871c:	0001111a 0001111b 08040201 0f0f0f03     ................
1a00872c:	000000ff                                ....

1a008730 <periph_to_base>:
1a008730:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a008740:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a008750:	000100e0 01000100 01200003 00060120     .......... . ...
1a008760:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008770:	01820013 00120182 01a201a2 01c20011     ................
1a008780:	001001c2 01e201e2 0202000f 000e0202     ................
1a008790:	02220222 0223000d 001c0223              "."...#.#...

1a00879c <UART_BClock>:
1a00879c:	01a201c2 01620182                       ......b.

1a0087a4 <UART_PClock>:
1a0087a4:	00820081 00a200a1                       ........

1a0087ac <gpioPinsInit>:
1a0087ac:	02000104 00050701 05010d03 04080100     ................
1a0087bc:	02020002 02000304 00000403 04070002     ................
1a0087cc:	030c0300 09050402 05040103 04030208     ................
1a0087dc:	04020305 06040504 0802000c 03000b06     ................
1a0087ec:	00090607 07060503 060f0504 03030004     ................
1a0087fc:	02000404 00050404 06040502 04060200     ................
1a00880c:	0c050408 05040a04 0003010e 14010a00     ................
1a00881c:	010f0000 0d000012 00001101 0010010c     ................
1a00882c:	07070300 000f0300 01000001 00000000     ................
1a00883c:	000a0600 08060603 06100504 04030005     ................
1a00884c:	03000106 04090400 04010d05 010b0000     ................
1a00885c:	0200000f 00000001 00010104 02010800     ................
1a00886c:	01090000 09010006 05040002 04010200     ................
1a00887c:	02020105 02020504 0e00000a 01000b02     ................
1a00888c:	000c020b ffff0c01                       ........

1a008894 <lpcUarts>:
1a008894:	40081000 06020406 00180205 40081000     ...@...........@
1a0088a4:	09070509 00180706 40082000 00000000     ......... .@....
1a0088b4:	00190000 400c1000 07060107 001a0602     .......@........
1a0088c4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0088d4:	02020302 001b0204                       ........

1a0088dc <__sf_fake_stderr>:
	...

1a0088fc <__sf_fake_stdin>:
	...

1a00891c <__sf_fake_stdout>:
	...

1a00893c <_global_impure_ptr>:
1a00893c:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a00894c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00895c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00896c:	64636261 ff006665                       abcdef..
