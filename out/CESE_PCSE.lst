
CESE_PCSE/out/CESE_PCSE.elf:     file format elf32-littlearm
CESE_PCSE/out/CESE_PCSE.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000585

Program Header:
0x70000001 off    0x00015310 vaddr 0x1a005310 paddr 0x1a005310 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002284 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005318 memsz 0x00005318 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005318 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000530c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a005318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002284  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a00530c  1a00530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005310  1a005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002328  10002328  000200a4  2**2
                  CONTENTS
 19 .debug_info   0002f5a3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000064de  00000000  00000000  0004f647  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000cfe4  00000000  00000000  00055b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000fc0  00000000  00000000  00062b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000011c0  00000000  00000000  00063ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000105e4  00000000  00000000  00064c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001c9a4  00000000  00000000  0007526d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002fdcc  00000000  00000000  00091c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000c19dd  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000c1a45  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003038  00000000  00000000  000c1a78  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00530c l    d  .init_array	00000000 .init_array
1a005310 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002328 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 clock_task.c
100000a4 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 max31855.c
00000000 l    df *ABS*	00000000 system.c
100000a8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
100000b0 l     O .bss	00002000 ucHeap
100000ac l     O .bss	00000004 pucAlignedHeap.11512
100020b0 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 timers.c
1a000760 l     F .text	00000020 prvGetNextExpireTime
1a000780 l     F .text	00000048 prvInsertTimerInActiveList
1a0007c8 l     F .text	0000005c prvCheckForValidListAndQueue
1a000b4c l     F .text	00000016 prvTimerTask
1a0008e0 l     F .text	00000078 prvSwitchTimerLists
1a000958 l     F .text	0000002c prvSampleTimeNow
1a000984 l     F .text	00000060 prvProcessExpiredTimer
1a0009e4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a000a58 l     F .text	000000f4 prvProcessReceivedCommands
100020b4 l     O .bss	00000004 pxCurrentTimerList
100020b8 l     O .bss	00000004 pxOverflowTimerList
100020bc l     O .bss	00000014 xActiveTimerList1
100020d0 l     O .bss	00000014 xActiveTimerList2
100020e4 l     O .bss	00000004 xLastTime.11818
100020e8 l     O .bss	00000004 xTimerQueue
100020ec l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 tasks.c
1a000b64 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000b90 l     F .text	00000012 prvDeleteTCB
1a000ba2 l     F .text	00000090 prvInitialiseNewTask
1a000c34 l     F .text	00000068 prvInitialiseTaskLists
1a000c9c l     F .text	000000ac prvAddNewTaskToReadyList
1a000d48 l     F .text	0000004c prvCheckTasksWaitingTermination
1a000d94 l     F .text	00000028 prvIdleTask
1a000dbc l     F .text	00000098 prvAddCurrentTaskToDelayedList
100020f4 l     O .bss	00000004 pxDelayedTaskList
100020f8 l     O .bss	00000004 pxOverflowDelayedTaskList
100020fc l     O .bss	0000008c pxReadyTasksLists
10002188 l     O .bss	00000004 uxCurrentNumberOfTasks
1000218c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002190 l     O .bss	00000004 uxPendedTicks
10002194 l     O .bss	00000004 uxSchedulerSuspended
10002198 l     O .bss	00000004 uxTaskNumber
1000219c l     O .bss	00000004 uxTopReadyPriority
100021a0 l     O .bss	00000014 xDelayedTaskList1
100021b4 l     O .bss	00000014 xDelayedTaskList2
100021c8 l     O .bss	00000004 xIdleTaskHandle
100021cc l     O .bss	00000004 xNextTaskUnblockTime
100021d0 l     O .bss	00000004 xNumOfOverflows
100021d4 l     O .bss	00000014 xPendingReadyList
100021e8 l     O .bss	00000004 xSchedulerRunning
100021ec l     O .bss	00000014 xSuspendedTaskList
10002200 l     O .bss	00000014 xTasksWaitingTermination
10002214 l     O .bss	00000004 xTickCount
10002218 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
1a0015e4 l     F .text	0000001e prvIsQueueFull
1a001602 l     F .text	0000001a prvIsQueueEmpty
1a00161c l     F .text	00000076 prvCopyDataToQueue
1a001692 l     F .text	00000024 prvCopyDataFromQueue
1a0016b6 l     F .text	0000006e prvUnlockQueue
1a0017a8 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 port.c
1a001c3c l     F .text	00000040 prvTaskExitError
1a001c7c l     F .text	00000022 prvPortStartFirstTask
1a001ca4 l     F .text	0000000e vPortEnableVFP
1a001d10 l       .text	00000000 pxCurrentTCBConst2
1a001df0 l       .text	00000000 pxCurrentTCBConst
1000221c l     O .bss	00000001 ucMaxSysCallPriority
10002220 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004fcc l     O .text	00000004 InitClkStates
1a004fd0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a002094 l     F .text	00000044 Board_LED_Init
1a0020d8 l     F .text	00000040 Board_TEC_Init
1a002118 l     F .text	00000040 Board_GPIO_Init
1a002158 l     F .text	00000030 Board_ADC_Init
1a002188 l     F .text	00000038 Board_SPI_Init
1a0021c0 l     F .text	00000024 Board_I2C_Init
1a005048 l     O .text	00000008 GpioButtons
1a005050 l     O .text	0000000c GpioLeds
1a00505c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002282 l     F .text	0000001a SSP_Write2BFifo
1a00229c l     F .text	00000018 SSP_Write1BFifo
1a0022b4 l     F .text	00000042 SSP_Read2BFifo
1a0022f6 l     F .text	00000040 SSP_Read1BFifo
1a002338 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00234c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002610 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002624 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005074 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002844 l     F .text	000000a0 pll_calc_divs
1a0028e4 l     F .text	0000010c pll_get_frac
1a0029f0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002c64 l     F .text	00000022 Chip_Clock_GetDivRate
10002228 l     O .bss	00000008 audio_usb_pll_freq
1a0050c8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002de8 l     F .text	0000002c Chip_UART_GetIndex
1a005134 l     O .text	00000008 UART_BClock
1a00513c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002fd8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00522c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_rtc.c
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002230 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004090 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004444 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005310 l       .init_array	00000000 __init_array_end
1a00530c l       .bss_RAM5	00000000 __preinit_array_end
1a00530c l       .init_array	00000000 __init_array_start
1a00530c l       .bss_RAM5	00000000 __preinit_array_start
1a002a88 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000624 g     F .text	00000012 _isatty_r
1a004a2c g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000636 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001d58 g     F .text	0000002c vPortExitCritical
1a003738 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0049fc g     F .text	00000030 printf
1a00227a g     F .text	00000008 __stdio_init
1000231c g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00257a g     F .text	0000002c Chip_RTC_GetFullTime
1a004b72 g     F .text	00000024 __sseek
1a004140 g     F .text	00000070 __sinit
1a000524 g     F .text	00000010 max31855_init
1a004bc4 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001be8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0040e4 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0026ca g     F .text	0000000c Chip_ADC_SetResolution
1a004ebc g     F .text	0000000c __malloc_unlock
1a001df4 g     F .text	0000002c SysTick_Handler
1a002e68 g     F .text	00000040 Chip_UART_SetBaud
1000231d g     O .bss	00000001 __lock___arc4random_mutex
1a000580  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00221c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000358 g     F .text	00000018 clock_task
1a001d90 g     F .text	00000064 PendSV_Handler
1a001994 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005318 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100020f0 g     O .bss	00000004 pxCurrentTCB
1a00061a g     F .text	0000000a _fstat_r
53ff730a g       *ABS*	00000000 __valid_user_code_checksum
1a005318 g       .ARM.exidx	00000000 _etext
10002244 g     O .bss	00000014 admision
1a00331c g     F .text	00000034 rtcRead
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001378 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002d06 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001e58 g     F .text	00000110 xPortStartScheduler
1a0042c6 g     F .text	0000001c memcpy
1a001284 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0040d8 g     F .text	0000000c _cleanup_r
1a0036c0 g     F .text	00000022 .hidden __floatsidf
1a001e20  w    F .text	00000038 vPortSetupTimerInterrupt
1a003c08 g     F .text	00000000 .hidden __aeabi_uldivmod
10002328 g       .noinit	00000000 _noinit
1a004b08 g     F .text	00000010 puts
1a000748 g     F .text	00000016 vPortFree
10002314 g     O .bss	00000004 SystemCoreClock
1a002e14 g     F .text	00000054 Chip_UART_Init
1000223c g     O .bss	00000008 date_time
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001f68 g     F .text	0000005c vPortValidateInterruptPriority
10002258 g     O .bss	00000004 measurement_queue
1a000180  w    F .text	00000002 UsageFault_Handler
1a002d9c g     F .text	0000004c Chip_Clock_GetRate
1a001574 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00340c g     F .text	00000010 printInitUart
1a00201c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0036a0 g     F .text	0000001e .hidden __aeabi_ui2d
1a003c38 g     F .text	000002d0 .hidden __udivmoddi4
1a00341c g     F .text	00000000 .hidden __aeabi_drsub
1a0006b8 g     F .text	00000020 _sbrk_r
1a005044 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1000225c g     O .bss	00000014 escape
1a003274 g     F .text	0000002c spiRead
1a000640 g     F .text	0000004e _read_r
1a00156e g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a001a64 g     F .text	0000015c xQueueReceive
100022d4 g     O .bss	00000040 xQueueRegistry
1a0036e4 g     F .text	00000042 .hidden __extendsfdf2
1a0039e8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003428 g     F .text	00000276 .hidden __adddf3
1a005310 g       .ARM.exidx	00000000 __exidx_start
1000231e g     O .bss	00000001 __lock___env_recursive_mutex
1a003794 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1000231f g     O .bss	00000001 __lock___sinit_recursive_mutex
1a0052d4 g     O .text	00000004 _global_impure_ptr
1a004278 g     F .text	00000048 __libc_init_array
1a0036a0 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0006d8 g     F .text	00000070 pvPortMalloc
1a002238 g     F .text	00000030 Board_Init
1a00060e  w    F .text	00000002 _init
1a001558 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a000370 g     F .text	00000010 clock_task_get_date_time
1a002376 g     F .text	000000a8 Chip_SSP_RWFrames_Blocking
1a000f4c g     F .text	0000000c xTaskGetTickCount
1a001814 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002328 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000584 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0024d8 g     F .text	00000038 Chip_I2C_SetClockRate
1a003bb8 g     F .text	0000004e .hidden __fixdfsi
1a001440 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002a3c g     F .text	0000004c Chip_Clock_EnableCrystal
10002320 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a00254c g     F .text	0000002e Chip_RTC_SetFullTime
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0012ec g     F .text	0000008c xTaskRemoveFromEventList
1a001520  w    F .text	0000001c vApplicationMallocFailedHook
1a003428 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a000300 g     F .text	00000058 clock_init
1a002534 g     F .text	00000018 Chip_RTC_Enable
1a003728 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a005274 g     O .text	00000020 __sf_fake_stderr
1a0024b4 g     F .text	00000024 Chip_I2C_Init
1a0042c4 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002bf8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002512 g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a005144 g     O .text	000000e6 gpioPinsInit
1a0014f4  w    F .text	0000002c vAssertCalled
1a002364 g     F .text	00000012 Chip_SSP_SetClockRate
1a004472 g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a004110 g     F .text	0000000c __sfp_lock_acquire
1a004e10 g     F .text	00000000 memchr
1a001390 g     F .text	00000084 xTaskCheckForTimeOut
1a0042f4 g     F .text	0000009c _free_r
1a002ce0 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a4 g       .bss	00000000 _bss
1a002698 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003424 g     F .text	0000027a .hidden __aeabi_dsub
10002224 g     O .bss	00000004 freeRtosInterruptCallback
1a000f3c g     F .text	00000010 vTaskSuspendAll
1a003728 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00241e g     F .text	0000003e Chip_SSP_SetBitRate
1a0015be g     F .text	00000026 uxListRemove
1a002510 g     F .text	00000002 Chip_GPIO_Init
1a000534 g     F .text	00000022 max31855
1a005070 g     O .text	00000004 OscRateIn
1a0032a0 g     F .text	0000007c uartInit
10002328 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a004b9e g     F .text	00000026 strncpy
1a0011b8 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0012b4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000610 g     F .text	0000000a _close_r
1a0036c0 g     F .text	00000022 .hidden __aeabi_i2d
1a00300c g     F .text	000001ac gpioInit
1a0025c8 g     F .text	00000048 Chip_RTC_Init
1a000874 g     F .text	0000006c xTimerGenericCommand
1a004c68 g     F .text	000000dc __swsetup_r
1a00153c  w    F .text	0000001c vApplicationStackOverflowHook
1a003f08  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0039e8 g     F .text	000001d0 .hidden __divdf3
1a0041b0 g     F .text	0000008c __sfp
1a004134 g     F .text	0000000c __sinit_lock_release
1a003794 g     F .text	00000254 .hidden __muldf3
1a004b18 g     F .text	00000022 __sread
1a003384 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004eb0 g     F .text	0000000c __malloc_lock
1a002208 g     F .text	00000014 Board_UARTPutChar
10002270 g     O .bss	00000050 termocuplas
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004018 g     F .text	00000078 _fflush_r
1a005294 g     O .text	00000020 __sf_fake_stdin
1a002aa4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0042c2 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0042e2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
100000a5 g     O .bss	00000001 spi_port
1a000488 g     F .text	0000009c main
1a0042c0 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a003224 g     F .text	00000050 spiInit
1a00158a g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001cf0 g     F .text	00000024 SVC_Handler
1a004b96 g     F .text	00000008 __sclose
1a000824 g     F .text	00000050 xTimerCreateTimerTask
1a004390 g     F .text	000000b4 _malloc_r
1a003738 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002d14 g     F .text	0000003c Chip_Clock_EnableOpts
1a002272 g     F .text	00000008 __stdio_getchar
1a0017ca g     F .text	00000048 xQueueGenericCreate
1a002ac0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002b78 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002f84 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002d84 g     F .text	00000018 Chip_Clock_RTCEnable
1a0031b8 g     F .text	0000006a gpioWrite
1a00060c  w    F .text	00000002 _fini
1a0049fc g     F .text	00000030 iprintf
1a001070 g     F .text	000000fc xTaskResumeAll
1a000eb8 g     F .text	00000084 vTaskStartScheduler
1a002658 g     F .text	00000040 Chip_ADC_Init
10002318 g     O .bss	00000004 g_pUsbApi
1a001fe4 g     F .text	00000038 Board_SetupMuxing
1a003350 g     F .text	00000034 rtcWrite
1a002ea8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00068e g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0046e8 g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a003f0c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000380 g     F .text	00000108 max31855_task
1a001414 g     F .text	0000000c vTaskMissedYield
10002328 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00245c g     F .text	00000038 Chip_SSP_Init
1a001bc0 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000f58 g     F .text	00000118 xTaskIncrementTick
1a004d44 g     F .text	00000048 __swhatbuf_r
1a001fc4 g     F .text	00000020 DAC_IRQHandler
1a0021e4 g     F .text	00000024 Board_Debug_Init
1a002268 g     F .text	0000000a __stdio_putchar
1a001724 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002494 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10002321 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000e54 g     F .text	00000062 xTaskCreate
1a0026d8 g     F .text	00000158 Chip_SetupCoreClock
1a004b3a g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a004498 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a00423c g     F .text	0000003c _fwalk_reent
1a002830 g     F .text	00000014 SystemCoreClockUpdate
1a003bb8 g     F .text	0000004e .hidden __aeabi_d2iz
1a0025a6 g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a00116c g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00411c g     F .text	0000000c __sfp_lock_release
1a0052b4 g     O .text	00000020 __sf_fake_stdout
1a001420 g     F .text	00000020 xTaskGetSchedulerState
1a003f08  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10002322 g     O .bss	00000001 __lock___dd_hash_mutex
1a004d8c g     F .text	00000080 __smakebuf_r
10002323 g     O .bss	00000001 __lock___tz_mutex
1a001cb8 g     F .text	0000002c pxPortInitialiseStack
1a0047d4 g     F .text	00000228 _printf_i
1a000558 g     F .text	00000028 max31855_read
1a002d50 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002238 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0036e4 g     F .text	00000042 .hidden __aeabi_f2d
1a0033a0 g     F .text	0000006c boardInit
1a001d14 g     F .text	00000044 vPortEnterCritical
10002234 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003424 g     F .text	0000027a .hidden __subdf3
1a004498 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002c88 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002fbc g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10002324 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a004128 g     F .text	0000000c __sinit_lock_acquire
100022c0 g     O .bss	00000014 aceite
1a002088 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 85 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 0a 73 ff 53     }............s.S
	...
1a00002c:	f1 1c 00 1a 85 01 00 1a 00 00 00 00 91 1d 00 1a     ................
1a00003c:	f5 1d 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	c5 1f 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	85 33 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .3..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005318 	.word	0x1a005318
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a005318 	.word	0x1a005318
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005318 	.word	0x1a005318
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005318 	.word	0x1a005318
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005318 	.word	0x1a005318
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002284 	.word	0x00002284
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clock_init>:
rtc_t date_time;

DEBUG_PRINT_ENABLE;

void clock_init(void)
{
1a000300:	b510      	push	{r4, lr}
	//No es posible usar rtcInit y FreeRTOS porque rtcInit llama
	//a la funcion de sapi "delay"
	Chip_RTC_Init(LPC_RTC);
1a000302:	4c11      	ldr	r4, [pc, #68]	; (1a000348 <clock_init+0x48>)
1a000304:	4620      	mov	r0, r4
1a000306:	f002 f95f 	bl	1a0025c8 <Chip_RTC_Init>
	Chip_RTC_Enable(LPC_RTC, ENABLE);
1a00030a:	2101      	movs	r1, #1
1a00030c:	4620      	mov	r0, r4
1a00030e:	f002 f911 	bl	1a002534 <Chip_RTC_Enable>

	//vTaskDelay(pdMS_TO_TICKS(2100));

	date_time.year = 2021;
1a000312:	480e      	ldr	r0, [pc, #56]	; (1a00034c <clock_init+0x4c>)
1a000314:	f240 73e5 	movw	r3, #2021	; 0x7e5
1a000318:	8003      	strh	r3, [r0, #0]
	date_time.month = 4;
1a00031a:	2304      	movs	r3, #4
1a00031c:	7083      	strb	r3, [r0, #2]
	date_time.mday = 1;
1a00031e:	2201      	movs	r2, #1
1a000320:	70c2      	strb	r2, [r0, #3]
	date_time.wday = 4;
1a000322:	7103      	strb	r3, [r0, #4]
	date_time.hour = 3;
1a000324:	2403      	movs	r4, #3
1a000326:	7144      	strb	r4, [r0, #5]
	date_time.min = 2;
1a000328:	2302      	movs	r3, #2
1a00032a:	7183      	strb	r3, [r0, #6]
	date_time.sec = 0;
1a00032c:	2300      	movs	r3, #0
1a00032e:	71c3      	strb	r3, [r0, #7]
	rtcWrite(&date_time);
1a000330:	f003 f80e 	bl	1a003350 <rtcWrite>

	debugPrintConfigUart(UART_USB, 115200);
1a000334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000338:	4621      	mov	r1, r4
1a00033a:	4805      	ldr	r0, [pc, #20]	; (1a000350 <clock_init+0x50>)
1a00033c:	f003 f866 	bl	1a00340c <printInitUart>
	printf("Clock Init OK\r\n");
1a000340:	4804      	ldr	r0, [pc, #16]	; (1a000354 <clock_init+0x54>)
1a000342:	f004 fbe1 	bl	1a004b08 <puts>
}
1a000346:	bd10      	pop	{r4, pc}
1a000348:	40046000 	.word	0x40046000
1a00034c:	1000223c 	.word	0x1000223c
1a000350:	100000a4 	.word	0x100000a4
1a000354:	1a004ec8 	.word	0x1a004ec8

1a000358 <clock_task>:

void clock_task(void* taskParamPtr)
{
1a000358:	b508      	push	{r3, lr}
    while(TRUE)
    {
        rtcRead(&date_time);
1a00035a:	4804      	ldr	r0, [pc, #16]	; (1a00036c <clock_task+0x14>)
1a00035c:	f002 ffde 	bl	1a00331c <rtcRead>
        vTaskDelay(pdMS_TO_TICKS(LED_RATE));
1a000360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000364:	f000 ff02 	bl	1a00116c <vTaskDelay>
1a000368:	e7f7      	b.n	1a00035a <clock_task+0x2>
1a00036a:	bf00      	nop
1a00036c:	1000223c 	.word	0x1000223c

1a000370 <clock_task_get_date_time>:
    }
}

rtc_t clock_task_get_date_time()
{
	return date_time;
1a000370:	4a02      	ldr	r2, [pc, #8]	; (1a00037c <clock_task_get_date_time+0xc>)
1a000372:	6811      	ldr	r1, [r2, #0]
1a000374:	6852      	ldr	r2, [r2, #4]
1a000376:	6001      	str	r1, [r0, #0]
1a000378:	6042      	str	r2, [r0, #4]
}
1a00037a:	4770      	bx	lr
1a00037c:	1000223c 	.word	0x1000223c

1a000380 <max31855_task>:

    return TRUE;
}

void max31855_task(void* taskParamPtr)
{
1a000380:	b530      	push	{r4, r5, lr}
1a000382:	b08d      	sub	sp, #52	; 0x34
	max31855_t device = *((max31855_t*)taskParamPtr);
1a000384:	ac07      	add	r4, sp, #28
1a000386:	4605      	mov	r5, r0
1a000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00038c:	682b      	ldr	r3, [r5, #0]
1a00038e:	6023      	str	r3, [r4, #0]
1a000390:	e036      	b.n	1a000400 <max31855_task+0x80>
			device.internal_temp = 10000 * -0.0625 * internal_temp_raw;
		}
		else
		{
			internal_temp_raw &= 0x07FF;
			device.internal_temp = 10000 * 0.0625 * internal_temp_raw;
1a000392:	f3c0 000a 	ubfx	r0, r0, #0, #11
1a000396:	f003 f993 	bl	1a0036c0 <__aeabi_i2d>
1a00039a:	2200      	movs	r2, #0
1a00039c:	4b36      	ldr	r3, [pc, #216]	; (1a000478 <max31855_task+0xf8>)
1a00039e:	f003 f9f9 	bl	1a003794 <__aeabi_dmul>
1a0003a2:	f003 fc09 	bl	1a003bb8 <__aeabi_d2iz>
1a0003a6:	9007      	str	r0, [sp, #28]
1a0003a8:	e04a      	b.n	1a000440 <max31855_task+0xc0>
			device.external_temp = 1000 * -0.025 * external_temp_raw;
		}
		else
		{
			external_temp_raw &= 0x3FFF;
			device.external_temp = 1000 * 0.025 * external_temp_raw;
1a0003aa:	f003 f989 	bl	1a0036c0 <__aeabi_i2d>
1a0003ae:	2200      	movs	r2, #0
1a0003b0:	4b32      	ldr	r3, [pc, #200]	; (1a00047c <max31855_task+0xfc>)
1a0003b2:	f003 f9ef 	bl	1a003794 <__aeabi_dmul>
1a0003b6:	f003 fbff 	bl	1a003bb8 <__aeabi_d2iz>
1a0003ba:	9008      	str	r0, [sp, #32]
		}

		measurement_t max31855_measurement;
		max31855_measurement.value = device.internal_temp;
1a0003bc:	9b07      	ldr	r3, [sp, #28]
1a0003be:	9302      	str	r3, [sp, #8]
		max31855_measurement.date_time = clock_task_get_date_time();
1a0003c0:	4668      	mov	r0, sp
1a0003c2:	f7ff ffd5 	bl	1a000370 <clock_task_get_date_time>
1a0003c6:	ab03      	add	r3, sp, #12
1a0003c8:	9800      	ldr	r0, [sp, #0]
1a0003ca:	9901      	ldr	r1, [sp, #4]
1a0003cc:	c303      	stmia	r3!, {r0, r1}
		max31855_measurement.decimal_pos = 2;
1a0003ce:	2302      	movs	r3, #2
1a0003d0:	f88d 3014 	strb.w	r3, [sp, #20]
		max31855_measurement.fault_code = device.buffer[3] & 0x0F;
1a0003d4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
1a0003d8:	f003 030f 	and.w	r3, r3, #15
1a0003dc:	f88d 3019 	strb.w	r3, [sp, #25]
		xQueueSend(measurement_queue, &max31855_measurement, portMAX_DELAY);
1a0003e0:	2300      	movs	r3, #0
1a0003e2:	f04f 32ff 	mov.w	r2, #4294967295
1a0003e6:	a902      	add	r1, sp, #8
1a0003e8:	4825      	ldr	r0, [pc, #148]	; (1a000480 <max31855_task+0x100>)
1a0003ea:	6800      	ldr	r0, [r0, #0]
1a0003ec:	f001 fa12 	bl	1a001814 <xQueueGenericSend>
		gpioWrite(LED2, OFF);
1a0003f0:	2100      	movs	r1, #0
1a0003f2:	202c      	movs	r0, #44	; 0x2c
1a0003f4:	f002 fee0 	bl	1a0031b8 <gpioWrite>
		vTaskDelay(pdMS_TO_TICKS(900));
1a0003f8:	f44f 7061 	mov.w	r0, #900	; 0x384
1a0003fc:	f000 feb6 	bl	1a00116c <vTaskDelay>
		gpioWrite(LED2, ON);
1a000400:	2101      	movs	r1, #1
1a000402:	202c      	movs	r0, #44	; 0x2c
1a000404:	f002 fed8 	bl	1a0031b8 <gpioWrite>
		vTaskDelay(pdMS_TO_TICKS(100));
1a000408:	2064      	movs	r0, #100	; 0x64
1a00040a:	f000 feaf 	bl	1a00116c <vTaskDelay>
		max31855_read(&device);
1a00040e:	a807      	add	r0, sp, #28
1a000410:	f000 f8a2 	bl	1a000558 <max31855_read>
		internal_temp_raw |= (int16_t)(device.buffer[3] >> 4);
1a000414:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
		internal_temp_raw |= (int16_t)(device.buffer[2] << 4);
1a000418:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
1a00041c:	0100      	lsls	r0, r0, #4
1a00041e:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
		if((internal_temp_raw & 0x800) != 0)
1a000422:	f410 6f00 	tst.w	r0, #2048	; 0x800
1a000426:	d0b4      	beq.n	1a000392 <max31855_task+0x12>
			device.internal_temp = 10000 * -0.0625 * internal_temp_raw;
1a000428:	f440 4078 	orr.w	r0, r0, #63488	; 0xf800
1a00042c:	f003 f948 	bl	1a0036c0 <__aeabi_i2d>
1a000430:	a30f      	add	r3, pc, #60	; (adr r3, 1a000470 <max31855_task+0xf0>)
1a000432:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000436:	f003 f9ad 	bl	1a003794 <__aeabi_dmul>
1a00043a:	f003 fbbd 	bl	1a003bb8 <__aeabi_d2iz>
1a00043e:	9007      	str	r0, [sp, #28]
		external_temp_raw |= (int16_t)(device.buffer[1] >> 2);
1a000440:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		external_temp_raw |= (int16_t)(device.buffer[0] << 6);
1a000444:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
1a000448:	0180      	lsls	r0, r0, #6
1a00044a:	ea40 0093 	orr.w	r0, r0, r3, lsr #2
		if((external_temp_raw & 0x0200) != 0)
1a00044e:	f410 7f00 	tst.w	r0, #512	; 0x200
1a000452:	d0aa      	beq.n	1a0003aa <max31855_task+0x2a>
			device.external_temp = 1000 * -0.025 * external_temp_raw;
1a000454:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
1a000458:	f003 f932 	bl	1a0036c0 <__aeabi_i2d>
1a00045c:	2200      	movs	r2, #0
1a00045e:	4b09      	ldr	r3, [pc, #36]	; (1a000484 <max31855_task+0x104>)
1a000460:	f003 f998 	bl	1a003794 <__aeabi_dmul>
1a000464:	f003 fba8 	bl	1a003bb8 <__aeabi_d2iz>
1a000468:	9008      	str	r0, [sp, #32]
1a00046a:	e7a7      	b.n	1a0003bc <max31855_task+0x3c>
1a00046c:	f3af 8000 	nop.w
1a000470:	00000000 	.word	0x00000000
1a000474:	c0838800 	.word	0xc0838800
1a000478:	40838800 	.word	0x40838800
1a00047c:	40390000 	.word	0x40390000
1a000480:	10002258 	.word	0x10002258
1a000484:	c0390000 	.word	0xc0390000

1a000488 <main>:
{
1a000488:	b500      	push	{lr}
1a00048a:	b083      	sub	sp, #12
	clock_init();
1a00048c:	f7ff ff38 	bl	1a000300 <clock_init>
	max31855(&admision, ENET_RXD1, "TAdm");
1a000490:	4a1e      	ldr	r2, [pc, #120]	; (1a00050c <main+0x84>)
1a000492:	211c      	movs	r1, #28
1a000494:	481e      	ldr	r0, [pc, #120]	; (1a000510 <main+0x88>)
1a000496:	f000 f84d 	bl	1a000534 <max31855>
    boardConfig();
1a00049a:	f002 ff81 	bl	1a0033a0 <boardInit>
    max31855_init();
1a00049e:	f000 f841 	bl	1a000524 <max31855_init>
	xTaskCreate(
1a0004a2:	2300      	movs	r3, #0
1a0004a4:	9301      	str	r3, [sp, #4]
1a0004a6:	2201      	movs	r2, #1
1a0004a8:	9200      	str	r2, [sp, #0]
1a0004aa:	22b4      	movs	r2, #180	; 0xb4
1a0004ac:	4919      	ldr	r1, [pc, #100]	; (1a000514 <main+0x8c>)
1a0004ae:	481a      	ldr	r0, [pc, #104]	; (1a000518 <main+0x90>)
1a0004b0:	f000 fcd0 	bl	1a000e54 <xTaskCreate>
    configASSERT(res == pdPASS);
1a0004b4:	2801      	cmp	r0, #1
1a0004b6:	d008      	beq.n	1a0004ca <main+0x42>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0004b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004bc:	f383 8811 	msr	BASEPRI, r3
1a0004c0:	f3bf 8f6f 	isb	sy
1a0004c4:	f3bf 8f4f 	dsb	sy
1a0004c8:	e7fe      	b.n	1a0004c8 <main+0x40>
    	xTaskCreate(
1a0004ca:	2300      	movs	r3, #0
1a0004cc:	9301      	str	r3, [sp, #4]
1a0004ce:	2301      	movs	r3, #1
1a0004d0:	9300      	str	r3, [sp, #0]
1a0004d2:	4b0f      	ldr	r3, [pc, #60]	; (1a000510 <main+0x88>)
1a0004d4:	22b4      	movs	r2, #180	; 0xb4
1a0004d6:	4911      	ldr	r1, [pc, #68]	; (1a00051c <main+0x94>)
1a0004d8:	4811      	ldr	r0, [pc, #68]	; (1a000520 <main+0x98>)
1a0004da:	f000 fcbb 	bl	1a000e54 <xTaskCreate>
    configASSERT(res == pdPASS);
1a0004de:	2801      	cmp	r0, #1
1a0004e0:	d008      	beq.n	1a0004f4 <main+0x6c>
1a0004e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004e6:	f383 8811 	msr	BASEPRI, r3
1a0004ea:	f3bf 8f6f 	isb	sy
1a0004ee:	f3bf 8f4f 	dsb	sy
1a0004f2:	e7fe      	b.n	1a0004f2 <main+0x6a>
    vTaskStartScheduler();
1a0004f4:	f000 fce0 	bl	1a000eb8 <vTaskStartScheduler>
1a0004f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004fc:	f383 8811 	msr	BASEPRI, r3
1a000500:	f3bf 8f6f 	isb	sy
1a000504:	f3bf 8f4f 	dsb	sy
    configASSERT(0);
1a000508:	e7fe      	b.n	1a000508 <main+0x80>
1a00050a:	bf00      	nop
1a00050c:	1a004ed8 	.word	0x1a004ed8
1a000510:	10002244 	.word	0x10002244
1a000514:	1a004ee0 	.word	0x1a004ee0
1a000518:	1a000359 	.word	0x1a000359
1a00051c:	1a004eec 	.word	0x1a004eec
1a000520:	1a000381 	.word	0x1a000381

1a000524 <max31855_init>:
#include <string.h>

spiMap_t spi_port = SPI0;

void max31855_init()
{
1a000524:	b508      	push	{r3, lr}
	spiInit(spi_port);
1a000526:	4b02      	ldr	r3, [pc, #8]	; (1a000530 <max31855_init+0xc>)
1a000528:	7818      	ldrb	r0, [r3, #0]
1a00052a:	f002 fe7b 	bl	1a003224 <spiInit>
}
1a00052e:	bd08      	pop	{r3, pc}
1a000530:	100000a5 	.word	0x100000a5

1a000534 <max31855>:

void max31855(max31855_t* device, gpioMap_t chip_select, char* name_str)
{
1a000534:	b538      	push	{r3, r4, r5, lr}
1a000536:	4604      	mov	r4, r0
1a000538:	4608      	mov	r0, r1
1a00053a:	4615      	mov	r5, r2
	device->cs_pin = chip_select;
1a00053c:	7421      	strb	r1, [r4, #16]
	gpioInit(chip_select, GPIO_OUTPUT);
1a00053e:	2101      	movs	r1, #1
1a000540:	f002 fd64 	bl	1a00300c <gpioInit>
	memset(device->buffer, 0, MAX31855_BUFFER_SIZE);
1a000544:	2300      	movs	r3, #0
1a000546:	60a3      	str	r3, [r4, #8]
	strncpy(device->name, name_str, MAX31855_BUFFER_SIZE);
1a000548:	2204      	movs	r2, #4
1a00054a:	4629      	mov	r1, r5
1a00054c:	f104 000c 	add.w	r0, r4, #12
1a000550:	f004 fb25 	bl	1a004b9e <strncpy>
}
1a000554:	bd38      	pop	{r3, r4, r5, pc}
1a000556:	Address 0x1a000556 is out of bounds.


1a000558 <max31855_read>:

void max31855_read(max31855_t* device)
{
1a000558:	b510      	push	{r4, lr}
1a00055a:	4604      	mov	r4, r0
	gpioWrite(ENET_RXD1, OFF);
1a00055c:	2100      	movs	r1, #0
1a00055e:	201c      	movs	r0, #28
1a000560:	f002 fe2a 	bl	1a0031b8 <gpioWrite>
	spiRead(spi_port, device->buffer, MAX31855_BUFFER_SIZE);
1a000564:	2204      	movs	r2, #4
1a000566:	f104 0108 	add.w	r1, r4, #8
1a00056a:	4b04      	ldr	r3, [pc, #16]	; (1a00057c <max31855_read+0x24>)
1a00056c:	7818      	ldrb	r0, [r3, #0]
1a00056e:	f002 fe81 	bl	1a003274 <spiRead>
	gpioWrite(ENET_RXD1, ON);
1a000572:	2101      	movs	r1, #1
1a000574:	201c      	movs	r0, #28
1a000576:	f002 fe1f 	bl	1a0031b8 <gpioWrite>
}
1a00057a:	bd10      	pop	{r4, pc}
1a00057c:	100000a5 	.word	0x100000a5

1a000580 <initialise_monitor_handles>:
}
1a000580:	4770      	bx	lr
1a000582:	Address 0x1a000582 is out of bounds.


1a000584 <Reset_Handler>:
void Reset_Handler(void) {
1a000584:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000586:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000588:	4b19      	ldr	r3, [pc, #100]	; (1a0005f0 <Reset_Handler+0x6c>)
1a00058a:	4a1a      	ldr	r2, [pc, #104]	; (1a0005f4 <Reset_Handler+0x70>)
1a00058c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00058e:	3304      	adds	r3, #4
1a000590:	4a19      	ldr	r2, [pc, #100]	; (1a0005f8 <Reset_Handler+0x74>)
1a000592:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000594:	2300      	movs	r3, #0
1a000596:	e005      	b.n	1a0005a4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000598:	4a18      	ldr	r2, [pc, #96]	; (1a0005fc <Reset_Handler+0x78>)
1a00059a:	f04f 31ff 	mov.w	r1, #4294967295
1a00059e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005a2:	3301      	adds	r3, #1
1a0005a4:	2b07      	cmp	r3, #7
1a0005a6:	d9f7      	bls.n	1a000598 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0005a8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0005aa:	4b15      	ldr	r3, [pc, #84]	; (1a000600 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0005ac:	e007      	b.n	1a0005be <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0005ae:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0005b2:	689a      	ldr	r2, [r3, #8]
1a0005b4:	6859      	ldr	r1, [r3, #4]
1a0005b6:	6818      	ldr	r0, [r3, #0]
1a0005b8:	f7ff fde7 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005bc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005be:	4a11      	ldr	r2, [pc, #68]	; (1a000604 <Reset_Handler+0x80>)
1a0005c0:	4293      	cmp	r3, r2
1a0005c2:	d3f4      	bcc.n	1a0005ae <Reset_Handler+0x2a>
1a0005c4:	e006      	b.n	1a0005d4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0005c6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005c8:	6859      	ldr	r1, [r3, #4]
1a0005ca:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005ce:	f7ff fdeb 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005d2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005d4:	4a0c      	ldr	r2, [pc, #48]	; (1a000608 <Reset_Handler+0x84>)
1a0005d6:	4293      	cmp	r3, r2
1a0005d8:	d3f5      	bcc.n	1a0005c6 <Reset_Handler+0x42>
    SystemInit();
1a0005da:	f002 fcd3 	bl	1a002f84 <SystemInit>
    __libc_init_array();
1a0005de:	f003 fe4b 	bl	1a004278 <__libc_init_array>
    initialise_monitor_handles();
1a0005e2:	f7ff ffcd 	bl	1a000580 <initialise_monitor_handles>
    main();
1a0005e6:	f7ff ff4f 	bl	1a000488 <main>
        __asm__ volatile("wfi");
1a0005ea:	bf30      	wfi
1a0005ec:	e7fd      	b.n	1a0005ea <Reset_Handler+0x66>
1a0005ee:	bf00      	nop
1a0005f0:	40053100 	.word	0x40053100
1a0005f4:	10df1000 	.word	0x10df1000
1a0005f8:	01dff7ff 	.word	0x01dff7ff
1a0005fc:	e000e280 	.word	0xe000e280
1a000600:	1a000114 	.word	0x1a000114
1a000604:	1a000150 	.word	0x1a000150
1a000608:	1a000178 	.word	0x1a000178

1a00060c <_fini>:
void _fini(void) {}
1a00060c:	4770      	bx	lr

1a00060e <_init>:
void _init(void) {}
1a00060e:	4770      	bx	lr

1a000610 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000610:	2309      	movs	r3, #9
1a000612:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000614:	f04f 30ff 	mov.w	r0, #4294967295
1a000618:	4770      	bx	lr

1a00061a <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00061a:	2358      	movs	r3, #88	; 0x58
1a00061c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00061e:	f04f 30ff 	mov.w	r0, #4294967295
1a000622:	4770      	bx	lr

1a000624 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000624:	2902      	cmp	r1, #2
1a000626:	d904      	bls.n	1a000632 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000628:	2309      	movs	r3, #9
1a00062a:	6003      	str	r3, [r0, #0]
       return -1;
1a00062c:	f04f 30ff 	mov.w	r0, #4294967295
1a000630:	4770      	bx	lr
       return 1;
1a000632:	2001      	movs	r0, #1
   }
}
1a000634:	4770      	bx	lr

1a000636 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000636:	2358      	movs	r3, #88	; 0x58
1a000638:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00063a:	f04f 30ff 	mov.w	r0, #4294967295
1a00063e:	4770      	bx	lr

1a000640 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000640:	2902      	cmp	r1, #2
1a000642:	d81f      	bhi.n	1a000684 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000648:	461d      	mov	r5, r3
1a00064a:	4617      	mov	r7, r2
1a00064c:	4606      	mov	r6, r0
  size_t i = 0;
1a00064e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000650:	42ac      	cmp	r4, r5
1a000652:	d211      	bcs.n	1a000678 <_read_r+0x38>
         int c = __stdio_getchar();
1a000654:	f001 fe0d 	bl	1a002272 <__stdio_getchar>
         if( c != -1 ){
1a000658:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00065c:	d0f8      	beq.n	1a000650 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00065e:	f104 0801 	add.w	r8, r4, #1
1a000662:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000664:	280d      	cmp	r0, #13
1a000666:	d003      	beq.n	1a000670 <_read_r+0x30>
1a000668:	280a      	cmp	r0, #10
1a00066a:	d001      	beq.n	1a000670 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a00066c:	4644      	mov	r4, r8
1a00066e:	e7ef      	b.n	1a000650 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000670:	f001 fdff 	bl	1a002272 <__stdio_getchar>
               return i;
1a000674:	4640      	mov	r0, r8
1a000676:	e003      	b.n	1a000680 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000678:	2313      	movs	r3, #19
1a00067a:	6033      	str	r3, [r6, #0]
      return -1;
1a00067c:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000684:	2313      	movs	r3, #19
1a000686:	6003      	str	r3, [r0, #0]
      return -1;
1a000688:	f04f 30ff 	mov.w	r0, #4294967295
}
1a00068c:	4770      	bx	lr

1a00068e <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00068e:	2902      	cmp	r1, #2
1a000690:	d80c      	bhi.n	1a0006ac <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000692:	b570      	push	{r4, r5, r6, lr}
1a000694:	461d      	mov	r5, r3
1a000696:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000698:	2400      	movs	r4, #0
1a00069a:	42ac      	cmp	r4, r5
1a00069c:	d204      	bcs.n	1a0006a8 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a00069e:	5d30      	ldrb	r0, [r6, r4]
1a0006a0:	f001 fde2 	bl	1a002268 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0006a4:	3401      	adds	r4, #1
1a0006a6:	e7f8      	b.n	1a00069a <_write_r+0xc>
       return n;
1a0006a8:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006aa:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006ac:	2313      	movs	r3, #19
1a0006ae:	6003      	str	r3, [r0, #0]
       return -1;
1a0006b0:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0006b4:	4770      	bx	lr
1a0006b6:	Address 0x1a0006b6 is out of bounds.


1a0006b8 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006b8:	4b05      	ldr	r3, [pc, #20]	; (1a0006d0 <_sbrk_r+0x18>)
1a0006ba:	681b      	ldr	r3, [r3, #0]
1a0006bc:	b123      	cbz	r3, 1a0006c8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006be:	4b04      	ldr	r3, [pc, #16]	; (1a0006d0 <_sbrk_r+0x18>)
1a0006c0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006c2:	4401      	add	r1, r0
1a0006c4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006c6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006c8:	4b01      	ldr	r3, [pc, #4]	; (1a0006d0 <_sbrk_r+0x18>)
1a0006ca:	4a02      	ldr	r2, [pc, #8]	; (1a0006d4 <_sbrk_r+0x1c>)
1a0006cc:	601a      	str	r2, [r3, #0]
1a0006ce:	e7f6      	b.n	1a0006be <_sbrk_r+0x6>
1a0006d0:	100000a8 	.word	0x100000a8
1a0006d4:	10002328 	.word	0x10002328

1a0006d8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0006d8:	b538      	push	{r3, r4, r5, lr}
1a0006da:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0006dc:	f010 0f07 	tst.w	r0, #7
1a0006e0:	d002      	beq.n	1a0006e8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0006e2:	f020 0407 	bic.w	r4, r0, #7
1a0006e6:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0006e8:	f000 fc28 	bl	1a000f3c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0006ec:	4b13      	ldr	r3, [pc, #76]	; (1a00073c <pvPortMalloc+0x64>)
1a0006ee:	681b      	ldr	r3, [r3, #0]
1a0006f0:	b17b      	cbz	r3, 1a000712 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0006f2:	4b13      	ldr	r3, [pc, #76]	; (1a000740 <pvPortMalloc+0x68>)
1a0006f4:	681b      	ldr	r3, [r3, #0]
1a0006f6:	441c      	add	r4, r3
1a0006f8:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0006fc:	4294      	cmp	r4, r2
1a0006fe:	d80e      	bhi.n	1a00071e <pvPortMalloc+0x46>
1a000700:	42a3      	cmp	r3, r4
1a000702:	d310      	bcc.n	1a000726 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000704:	f000 fcb4 	bl	1a001070 <xTaskResumeAll>
void *pvReturn = NULL;
1a000708:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a00070a:	f000 ff09 	bl	1a001520 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a00070e:	4628      	mov	r0, r5
1a000710:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000712:	4b0c      	ldr	r3, [pc, #48]	; (1a000744 <pvPortMalloc+0x6c>)
1a000714:	f023 0307 	bic.w	r3, r3, #7
1a000718:	4a08      	ldr	r2, [pc, #32]	; (1a00073c <pvPortMalloc+0x64>)
1a00071a:	6013      	str	r3, [r2, #0]
1a00071c:	e7e9      	b.n	1a0006f2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a00071e:	f000 fca7 	bl	1a001070 <xTaskResumeAll>
void *pvReturn = NULL;
1a000722:	2500      	movs	r5, #0
1a000724:	e7f1      	b.n	1a00070a <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000726:	4a05      	ldr	r2, [pc, #20]	; (1a00073c <pvPortMalloc+0x64>)
1a000728:	6815      	ldr	r5, [r2, #0]
1a00072a:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a00072c:	4b04      	ldr	r3, [pc, #16]	; (1a000740 <pvPortMalloc+0x68>)
1a00072e:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000730:	f000 fc9e 	bl	1a001070 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000734:	2d00      	cmp	r5, #0
1a000736:	d1ea      	bne.n	1a00070e <pvPortMalloc+0x36>
1a000738:	e7e7      	b.n	1a00070a <pvPortMalloc+0x32>
1a00073a:	bf00      	nop
1a00073c:	100000ac 	.word	0x100000ac
1a000740:	100020b0 	.word	0x100020b0
1a000744:	100000b8 	.word	0x100000b8

1a000748 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000748:	b140      	cbz	r0, 1a00075c <vPortFree+0x14>
1a00074a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00074e:	f383 8811 	msr	BASEPRI, r3
1a000752:	f3bf 8f6f 	isb	sy
1a000756:	f3bf 8f4f 	dsb	sy
1a00075a:	e7fe      	b.n	1a00075a <vPortFree+0x12>
}
1a00075c:	4770      	bx	lr
1a00075e:	Address 0x1a00075e is out of bounds.


1a000760 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a000760:	4b06      	ldr	r3, [pc, #24]	; (1a00077c <prvGetNextExpireTime+0x1c>)
1a000762:	681a      	ldr	r2, [r3, #0]
1a000764:	6813      	ldr	r3, [r2, #0]
1a000766:	fab3 f383 	clz	r3, r3
1a00076a:	095b      	lsrs	r3, r3, #5
1a00076c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00076e:	b913      	cbnz	r3, 1a000776 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a000770:	68d3      	ldr	r3, [r2, #12]
1a000772:	6818      	ldr	r0, [r3, #0]
1a000774:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a000776:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a000778:	4770      	bx	lr
1a00077a:	bf00      	nop
1a00077c:	100020b4 	.word	0x100020b4

1a000780 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a000780:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a000782:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a000784:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a000786:	4291      	cmp	r1, r2
1a000788:	d80c      	bhi.n	1a0007a4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00078a:	1ad2      	subs	r2, r2, r3
1a00078c:	6983      	ldr	r3, [r0, #24]
1a00078e:	429a      	cmp	r2, r3
1a000790:	d301      	bcc.n	1a000796 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a000792:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a000794:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a000796:	1d01      	adds	r1, r0, #4
1a000798:	4b09      	ldr	r3, [pc, #36]	; (1a0007c0 <prvInsertTimerInActiveList+0x40>)
1a00079a:	6818      	ldr	r0, [r3, #0]
1a00079c:	f000 fef5 	bl	1a00158a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0007a0:	2000      	movs	r0, #0
1a0007a2:	e7f7      	b.n	1a000794 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0007a4:	429a      	cmp	r2, r3
1a0007a6:	d201      	bcs.n	1a0007ac <prvInsertTimerInActiveList+0x2c>
1a0007a8:	4299      	cmp	r1, r3
1a0007aa:	d206      	bcs.n	1a0007ba <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0007ac:	1d01      	adds	r1, r0, #4
1a0007ae:	4b05      	ldr	r3, [pc, #20]	; (1a0007c4 <prvInsertTimerInActiveList+0x44>)
1a0007b0:	6818      	ldr	r0, [r3, #0]
1a0007b2:	f000 feea 	bl	1a00158a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0007b6:	2000      	movs	r0, #0
1a0007b8:	e7ec      	b.n	1a000794 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a0007ba:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0007bc:	e7ea      	b.n	1a000794 <prvInsertTimerInActiveList+0x14>
1a0007be:	bf00      	nop
1a0007c0:	100020b8 	.word	0x100020b8
1a0007c4:	100020b4 	.word	0x100020b4

1a0007c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0007c8:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0007ca:	f001 faa3 	bl	1a001d14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0007ce:	4b0f      	ldr	r3, [pc, #60]	; (1a00080c <prvCheckForValidListAndQueue+0x44>)
1a0007d0:	681b      	ldr	r3, [r3, #0]
1a0007d2:	b113      	cbz	r3, 1a0007da <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0007d4:	f001 fac0 	bl	1a001d58 <vPortExitCritical>
}
1a0007d8:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0007da:	4d0d      	ldr	r5, [pc, #52]	; (1a000810 <prvCheckForValidListAndQueue+0x48>)
1a0007dc:	4628      	mov	r0, r5
1a0007de:	f000 febb 	bl	1a001558 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0007e2:	4c0c      	ldr	r4, [pc, #48]	; (1a000814 <prvCheckForValidListAndQueue+0x4c>)
1a0007e4:	4620      	mov	r0, r4
1a0007e6:	f000 feb7 	bl	1a001558 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0007ea:	4b0b      	ldr	r3, [pc, #44]	; (1a000818 <prvCheckForValidListAndQueue+0x50>)
1a0007ec:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0007ee:	4b0b      	ldr	r3, [pc, #44]	; (1a00081c <prvCheckForValidListAndQueue+0x54>)
1a0007f0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1a0007f2:	2200      	movs	r2, #0
1a0007f4:	2110      	movs	r1, #16
1a0007f6:	200a      	movs	r0, #10
1a0007f8:	f000 ffe7 	bl	1a0017ca <xQueueGenericCreate>
1a0007fc:	4b03      	ldr	r3, [pc, #12]	; (1a00080c <prvCheckForValidListAndQueue+0x44>)
1a0007fe:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a000800:	2800      	cmp	r0, #0
1a000802:	d0e7      	beq.n	1a0007d4 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a000804:	4906      	ldr	r1, [pc, #24]	; (1a000820 <prvCheckForValidListAndQueue+0x58>)
1a000806:	f001 f9db 	bl	1a001bc0 <vQueueAddToRegistry>
1a00080a:	e7e3      	b.n	1a0007d4 <prvCheckForValidListAndQueue+0xc>
1a00080c:	100020e8 	.word	0x100020e8
1a000810:	100020bc 	.word	0x100020bc
1a000814:	100020d0 	.word	0x100020d0
1a000818:	100020b4 	.word	0x100020b4
1a00081c:	100020b8 	.word	0x100020b8
1a000820:	1a004f00 	.word	0x1a004f00

1a000824 <xTimerCreateTimerTask>:
{
1a000824:	b500      	push	{lr}
1a000826:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
1a000828:	f7ff ffce 	bl	1a0007c8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a00082c:	4b0d      	ldr	r3, [pc, #52]	; (1a000864 <xTimerCreateTimerTask+0x40>)
1a00082e:	681b      	ldr	r3, [r3, #0]
1a000830:	b15b      	cbz	r3, 1a00084a <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
1a000832:	4b0d      	ldr	r3, [pc, #52]	; (1a000868 <xTimerCreateTimerTask+0x44>)
1a000834:	9301      	str	r3, [sp, #4]
1a000836:	2304      	movs	r3, #4
1a000838:	9300      	str	r3, [sp, #0]
1a00083a:	2300      	movs	r3, #0
1a00083c:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a000840:	490a      	ldr	r1, [pc, #40]	; (1a00086c <xTimerCreateTimerTask+0x48>)
1a000842:	480b      	ldr	r0, [pc, #44]	; (1a000870 <xTimerCreateTimerTask+0x4c>)
1a000844:	f000 fb06 	bl	1a000e54 <xTaskCreate>
	configASSERT( xReturn );
1a000848:	b940      	cbnz	r0, 1a00085c <xTimerCreateTimerTask+0x38>
1a00084a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00084e:	f383 8811 	msr	BASEPRI, r3
1a000852:	f3bf 8f6f 	isb	sy
1a000856:	f3bf 8f4f 	dsb	sy
1a00085a:	e7fe      	b.n	1a00085a <xTimerCreateTimerTask+0x36>
}
1a00085c:	b003      	add	sp, #12
1a00085e:	f85d fb04 	ldr.w	pc, [sp], #4
1a000862:	bf00      	nop
1a000864:	100020e8 	.word	0x100020e8
1a000868:	100020ec 	.word	0x100020ec
1a00086c:	1a004f08 	.word	0x1a004f08
1a000870:	1a000b4d 	.word	0x1a000b4d

1a000874 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a000874:	b1c0      	cbz	r0, 1a0008a8 <xTimerGenericCommand+0x34>
{
1a000876:	b530      	push	{r4, r5, lr}
1a000878:	b085      	sub	sp, #20
1a00087a:	4615      	mov	r5, r2
1a00087c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00087e:	4a17      	ldr	r2, [pc, #92]	; (1a0008dc <xTimerGenericCommand+0x68>)
1a000880:	6810      	ldr	r0, [r2, #0]
1a000882:	b340      	cbz	r0, 1a0008d6 <xTimerGenericCommand+0x62>
1a000884:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a000886:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a000888:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00088a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00088c:	2905      	cmp	r1, #5
1a00088e:	dc1c      	bgt.n	1a0008ca <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a000890:	f000 fdc6 	bl	1a001420 <xTaskGetSchedulerState>
1a000894:	2802      	cmp	r0, #2
1a000896:	d010      	beq.n	1a0008ba <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a000898:	2300      	movs	r3, #0
1a00089a:	461a      	mov	r2, r3
1a00089c:	4669      	mov	r1, sp
1a00089e:	480f      	ldr	r0, [pc, #60]	; (1a0008dc <xTimerGenericCommand+0x68>)
1a0008a0:	6800      	ldr	r0, [r0, #0]
1a0008a2:	f000 ffb7 	bl	1a001814 <xQueueGenericSend>
1a0008a6:	e014      	b.n	1a0008d2 <xTimerGenericCommand+0x5e>
1a0008a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008ac:	f383 8811 	msr	BASEPRI, r3
1a0008b0:	f3bf 8f6f 	isb	sy
1a0008b4:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a0008b8:	e7fe      	b.n	1a0008b8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0008ba:	2300      	movs	r3, #0
1a0008bc:	9a08      	ldr	r2, [sp, #32]
1a0008be:	4669      	mov	r1, sp
1a0008c0:	4806      	ldr	r0, [pc, #24]	; (1a0008dc <xTimerGenericCommand+0x68>)
1a0008c2:	6800      	ldr	r0, [r0, #0]
1a0008c4:	f000 ffa6 	bl	1a001814 <xQueueGenericSend>
1a0008c8:	e003      	b.n	1a0008d2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0008ca:	2300      	movs	r3, #0
1a0008cc:	4669      	mov	r1, sp
1a0008ce:	f001 f861 	bl	1a001994 <xQueueGenericSendFromISR>
}
1a0008d2:	b005      	add	sp, #20
1a0008d4:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a0008d6:	2000      	movs	r0, #0
	return xReturn;
1a0008d8:	e7fb      	b.n	1a0008d2 <xTimerGenericCommand+0x5e>
1a0008da:	bf00      	nop
1a0008dc:	100020e8 	.word	0x100020e8

1a0008e0 <prvSwitchTimerLists>:
{
1a0008e0:	b570      	push	{r4, r5, r6, lr}
1a0008e2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0008e4:	4b1a      	ldr	r3, [pc, #104]	; (1a000950 <prvSwitchTimerLists+0x70>)
1a0008e6:	681b      	ldr	r3, [r3, #0]
1a0008e8:	681a      	ldr	r2, [r3, #0]
1a0008ea:	b352      	cbz	r2, 1a000942 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0008ec:	68db      	ldr	r3, [r3, #12]
1a0008ee:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0008f0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0008f2:	1d25      	adds	r5, r4, #4
1a0008f4:	4628      	mov	r0, r5
1a0008f6:	f000 fe62 	bl	1a0015be <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0008fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0008fc:	4620      	mov	r0, r4
1a0008fe:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a000900:	69e3      	ldr	r3, [r4, #28]
1a000902:	2b01      	cmp	r3, #1
1a000904:	d1ee      	bne.n	1a0008e4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a000906:	69a3      	ldr	r3, [r4, #24]
1a000908:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00090a:	429e      	cmp	r6, r3
1a00090c:	d207      	bcs.n	1a00091e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00090e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a000910:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a000912:	4629      	mov	r1, r5
1a000914:	4b0e      	ldr	r3, [pc, #56]	; (1a000950 <prvSwitchTimerLists+0x70>)
1a000916:	6818      	ldr	r0, [r3, #0]
1a000918:	f000 fe37 	bl	1a00158a <vListInsert>
1a00091c:	e7e2      	b.n	1a0008e4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00091e:	2100      	movs	r1, #0
1a000920:	9100      	str	r1, [sp, #0]
1a000922:	460b      	mov	r3, r1
1a000924:	4632      	mov	r2, r6
1a000926:	4620      	mov	r0, r4
1a000928:	f7ff ffa4 	bl	1a000874 <xTimerGenericCommand>
				configASSERT( xResult );
1a00092c:	2800      	cmp	r0, #0
1a00092e:	d1d9      	bne.n	1a0008e4 <prvSwitchTimerLists+0x4>
1a000930:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000934:	f383 8811 	msr	BASEPRI, r3
1a000938:	f3bf 8f6f 	isb	sy
1a00093c:	f3bf 8f4f 	dsb	sy
1a000940:	e7fe      	b.n	1a000940 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a000942:	4a04      	ldr	r2, [pc, #16]	; (1a000954 <prvSwitchTimerLists+0x74>)
1a000944:	6810      	ldr	r0, [r2, #0]
1a000946:	4902      	ldr	r1, [pc, #8]	; (1a000950 <prvSwitchTimerLists+0x70>)
1a000948:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00094a:	6013      	str	r3, [r2, #0]
}
1a00094c:	b002      	add	sp, #8
1a00094e:	bd70      	pop	{r4, r5, r6, pc}
1a000950:	100020b4 	.word	0x100020b4
1a000954:	100020b8 	.word	0x100020b8

1a000958 <prvSampleTimeNow>:
{
1a000958:	b538      	push	{r3, r4, r5, lr}
1a00095a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00095c:	f000 faf6 	bl	1a000f4c <xTaskGetTickCount>
1a000960:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a000962:	4b07      	ldr	r3, [pc, #28]	; (1a000980 <prvSampleTimeNow+0x28>)
1a000964:	681b      	ldr	r3, [r3, #0]
1a000966:	4283      	cmp	r3, r0
1a000968:	d805      	bhi.n	1a000976 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00096a:	2300      	movs	r3, #0
1a00096c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00096e:	4b04      	ldr	r3, [pc, #16]	; (1a000980 <prvSampleTimeNow+0x28>)
1a000970:	601c      	str	r4, [r3, #0]
}
1a000972:	4620      	mov	r0, r4
1a000974:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a000976:	f7ff ffb3 	bl	1a0008e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00097a:	2301      	movs	r3, #1
1a00097c:	602b      	str	r3, [r5, #0]
1a00097e:	e7f6      	b.n	1a00096e <prvSampleTimeNow+0x16>
1a000980:	100020e4 	.word	0x100020e4

1a000984 <prvProcessExpiredTimer>:
{
1a000984:	b570      	push	{r4, r5, r6, lr}
1a000986:	b082      	sub	sp, #8
1a000988:	4605      	mov	r5, r0
1a00098a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00098c:	4b14      	ldr	r3, [pc, #80]	; (1a0009e0 <prvProcessExpiredTimer+0x5c>)
1a00098e:	681b      	ldr	r3, [r3, #0]
1a000990:	68db      	ldr	r3, [r3, #12]
1a000992:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a000994:	1d20      	adds	r0, r4, #4
1a000996:	f000 fe12 	bl	1a0015be <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00099a:	69e3      	ldr	r3, [r4, #28]
1a00099c:	2b01      	cmp	r3, #1
1a00099e:	d004      	beq.n	1a0009aa <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0009a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0009a2:	4620      	mov	r0, r4
1a0009a4:	4798      	blx	r3
}
1a0009a6:	b002      	add	sp, #8
1a0009a8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0009aa:	69a1      	ldr	r1, [r4, #24]
1a0009ac:	462b      	mov	r3, r5
1a0009ae:	4632      	mov	r2, r6
1a0009b0:	4429      	add	r1, r5
1a0009b2:	4620      	mov	r0, r4
1a0009b4:	f7ff fee4 	bl	1a000780 <prvInsertTimerInActiveList>
1a0009b8:	2800      	cmp	r0, #0
1a0009ba:	d0f1      	beq.n	1a0009a0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0009bc:	2100      	movs	r1, #0
1a0009be:	9100      	str	r1, [sp, #0]
1a0009c0:	460b      	mov	r3, r1
1a0009c2:	462a      	mov	r2, r5
1a0009c4:	4620      	mov	r0, r4
1a0009c6:	f7ff ff55 	bl	1a000874 <xTimerGenericCommand>
			configASSERT( xResult );
1a0009ca:	2800      	cmp	r0, #0
1a0009cc:	d1e8      	bne.n	1a0009a0 <prvProcessExpiredTimer+0x1c>
1a0009ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009d2:	f383 8811 	msr	BASEPRI, r3
1a0009d6:	f3bf 8f6f 	isb	sy
1a0009da:	f3bf 8f4f 	dsb	sy
1a0009de:	e7fe      	b.n	1a0009de <prvProcessExpiredTimer+0x5a>
1a0009e0:	100020b4 	.word	0x100020b4

1a0009e4 <prvProcessTimerOrBlockTask>:
{
1a0009e4:	b570      	push	{r4, r5, r6, lr}
1a0009e6:	b082      	sub	sp, #8
1a0009e8:	4606      	mov	r6, r0
1a0009ea:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0009ec:	f000 faa6 	bl	1a000f3c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0009f0:	a801      	add	r0, sp, #4
1a0009f2:	f7ff ffb1 	bl	1a000958 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0009f6:	9b01      	ldr	r3, [sp, #4]
1a0009f8:	bb1b      	cbnz	r3, 1a000a42 <prvProcessTimerOrBlockTask+0x5e>
1a0009fa:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0009fc:	b90c      	cbnz	r4, 1a000a02 <prvProcessTimerOrBlockTask+0x1e>
1a0009fe:	42b0      	cmp	r0, r6
1a000a00:	d218      	bcs.n	1a000a34 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a000a02:	b12c      	cbz	r4, 1a000a10 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a000a04:	4b11      	ldr	r3, [pc, #68]	; (1a000a4c <prvProcessTimerOrBlockTask+0x68>)
1a000a06:	681b      	ldr	r3, [r3, #0]
1a000a08:	681c      	ldr	r4, [r3, #0]
1a000a0a:	fab4 f484 	clz	r4, r4
1a000a0e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a000a10:	4622      	mov	r2, r4
1a000a12:	1b71      	subs	r1, r6, r5
1a000a14:	4b0e      	ldr	r3, [pc, #56]	; (1a000a50 <prvProcessTimerOrBlockTask+0x6c>)
1a000a16:	6818      	ldr	r0, [r3, #0]
1a000a18:	f001 f8e6 	bl	1a001be8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a000a1c:	f000 fb28 	bl	1a001070 <xTaskResumeAll>
1a000a20:	b988      	cbnz	r0, 1a000a46 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a000a22:	4b0c      	ldr	r3, [pc, #48]	; (1a000a54 <prvProcessTimerOrBlockTask+0x70>)
1a000a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a28:	601a      	str	r2, [r3, #0]
1a000a2a:	f3bf 8f4f 	dsb	sy
1a000a2e:	f3bf 8f6f 	isb	sy
1a000a32:	e008      	b.n	1a000a46 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a000a34:	f000 fb1c 	bl	1a001070 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a000a38:	4629      	mov	r1, r5
1a000a3a:	4630      	mov	r0, r6
1a000a3c:	f7ff ffa2 	bl	1a000984 <prvProcessExpiredTimer>
1a000a40:	e001      	b.n	1a000a46 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a000a42:	f000 fb15 	bl	1a001070 <xTaskResumeAll>
}
1a000a46:	b002      	add	sp, #8
1a000a48:	bd70      	pop	{r4, r5, r6, pc}
1a000a4a:	bf00      	nop
1a000a4c:	100020b8 	.word	0x100020b8
1a000a50:	100020e8 	.word	0x100020e8
1a000a54:	e000ed04 	.word	0xe000ed04

1a000a58 <prvProcessReceivedCommands>:
{
1a000a58:	b530      	push	{r4, r5, lr}
1a000a5a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a000a5c:	e006      	b.n	1a000a6c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a000a5e:	9907      	ldr	r1, [sp, #28]
1a000a60:	9806      	ldr	r0, [sp, #24]
1a000a62:	9b05      	ldr	r3, [sp, #20]
1a000a64:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a000a66:	9b04      	ldr	r3, [sp, #16]
1a000a68:	2b00      	cmp	r3, #0
1a000a6a:	da0b      	bge.n	1a000a84 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a000a6c:	2200      	movs	r2, #0
1a000a6e:	a904      	add	r1, sp, #16
1a000a70:	4b35      	ldr	r3, [pc, #212]	; (1a000b48 <prvProcessReceivedCommands+0xf0>)
1a000a72:	6818      	ldr	r0, [r3, #0]
1a000a74:	f000 fff6 	bl	1a001a64 <xQueueReceive>
1a000a78:	2800      	cmp	r0, #0
1a000a7a:	d062      	beq.n	1a000b42 <prvProcessReceivedCommands+0xea>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a000a7c:	9b04      	ldr	r3, [sp, #16]
1a000a7e:	2b00      	cmp	r3, #0
1a000a80:	daf1      	bge.n	1a000a66 <prvProcessReceivedCommands+0xe>
1a000a82:	e7ec      	b.n	1a000a5e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a000a84:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a000a86:	6963      	ldr	r3, [r4, #20]
1a000a88:	b113      	cbz	r3, 1a000a90 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a000a8a:	1d20      	adds	r0, r4, #4
1a000a8c:	f000 fd97 	bl	1a0015be <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a000a90:	a803      	add	r0, sp, #12
1a000a92:	f7ff ff61 	bl	1a000958 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a000a96:	9b04      	ldr	r3, [sp, #16]
1a000a98:	2b09      	cmp	r3, #9
1a000a9a:	d8e7      	bhi.n	1a000a6c <prvProcessReceivedCommands+0x14>
1a000a9c:	a201      	add	r2, pc, #4	; (adr r2, 1a000aa4 <prvProcessReceivedCommands+0x4c>)
1a000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000aa2:	bf00      	nop
1a000aa4:	1a000acd 	.word	0x1a000acd
1a000aa8:	1a000acd 	.word	0x1a000acd
1a000aac:	1a000acd 	.word	0x1a000acd
1a000ab0:	1a000a6d 	.word	0x1a000a6d
1a000ab4:	1a000b15 	.word	0x1a000b15
1a000ab8:	1a000b3b 	.word	0x1a000b3b
1a000abc:	1a000acd 	.word	0x1a000acd
1a000ac0:	1a000acd 	.word	0x1a000acd
1a000ac4:	1a000a6d 	.word	0x1a000a6d
1a000ac8:	1a000b15 	.word	0x1a000b15
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a000acc:	9905      	ldr	r1, [sp, #20]
1a000ace:	69a5      	ldr	r5, [r4, #24]
1a000ad0:	460b      	mov	r3, r1
1a000ad2:	4602      	mov	r2, r0
1a000ad4:	4429      	add	r1, r5
1a000ad6:	4620      	mov	r0, r4
1a000ad8:	f7ff fe52 	bl	1a000780 <prvInsertTimerInActiveList>
1a000adc:	2800      	cmp	r0, #0
1a000ade:	d0c5      	beq.n	1a000a6c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a000ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000ae2:	4620      	mov	r0, r4
1a000ae4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a000ae6:	69e3      	ldr	r3, [r4, #28]
1a000ae8:	2b01      	cmp	r3, #1
1a000aea:	d1bf      	bne.n	1a000a6c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a000aec:	69a2      	ldr	r2, [r4, #24]
1a000aee:	2100      	movs	r1, #0
1a000af0:	9100      	str	r1, [sp, #0]
1a000af2:	460b      	mov	r3, r1
1a000af4:	9805      	ldr	r0, [sp, #20]
1a000af6:	4402      	add	r2, r0
1a000af8:	4620      	mov	r0, r4
1a000afa:	f7ff febb 	bl	1a000874 <xTimerGenericCommand>
							configASSERT( xResult );
1a000afe:	2800      	cmp	r0, #0
1a000b00:	d1b4      	bne.n	1a000a6c <prvProcessReceivedCommands+0x14>
1a000b02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b06:	f383 8811 	msr	BASEPRI, r3
1a000b0a:	f3bf 8f6f 	isb	sy
1a000b0e:	f3bf 8f4f 	dsb	sy
1a000b12:	e7fe      	b.n	1a000b12 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a000b14:	9905      	ldr	r1, [sp, #20]
1a000b16:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a000b18:	b131      	cbz	r1, 1a000b28 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a000b1a:	4603      	mov	r3, r0
1a000b1c:	4602      	mov	r2, r0
1a000b1e:	4401      	add	r1, r0
1a000b20:	4620      	mov	r0, r4
1a000b22:	f7ff fe2d 	bl	1a000780 <prvInsertTimerInActiveList>
					break;
1a000b26:	e7a1      	b.n	1a000a6c <prvProcessReceivedCommands+0x14>
1a000b28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b2c:	f383 8811 	msr	BASEPRI, r3
1a000b30:	f3bf 8f6f 	isb	sy
1a000b34:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a000b38:	e7fe      	b.n	1a000b38 <prvProcessReceivedCommands+0xe0>
						vPortFree( pxTimer );
1a000b3a:	4620      	mov	r0, r4
1a000b3c:	f7ff fe04 	bl	1a000748 <vPortFree>
					break;
1a000b40:	e794      	b.n	1a000a6c <prvProcessReceivedCommands+0x14>
}
1a000b42:	b009      	add	sp, #36	; 0x24
1a000b44:	bd30      	pop	{r4, r5, pc}
1a000b46:	bf00      	nop
1a000b48:	100020e8 	.word	0x100020e8

1a000b4c <prvTimerTask>:
{
1a000b4c:	b500      	push	{lr}
1a000b4e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a000b50:	a801      	add	r0, sp, #4
1a000b52:	f7ff fe05 	bl	1a000760 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a000b56:	9901      	ldr	r1, [sp, #4]
1a000b58:	f7ff ff44 	bl	1a0009e4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a000b5c:	f7ff ff7c 	bl	1a000a58 <prvProcessReceivedCommands>
1a000b60:	e7f6      	b.n	1a000b50 <prvTimerTask+0x4>
1a000b62:	Address 0x1a000b62 is out of bounds.


1a000b64 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000b64:	4b08      	ldr	r3, [pc, #32]	; (1a000b88 <prvResetNextTaskUnblockTime+0x24>)
1a000b66:	681b      	ldr	r3, [r3, #0]
1a000b68:	681b      	ldr	r3, [r3, #0]
1a000b6a:	b923      	cbnz	r3, 1a000b76 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a000b6c:	4b07      	ldr	r3, [pc, #28]	; (1a000b8c <prvResetNextTaskUnblockTime+0x28>)
1a000b6e:	f04f 32ff 	mov.w	r2, #4294967295
1a000b72:	601a      	str	r2, [r3, #0]
1a000b74:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000b76:	4b04      	ldr	r3, [pc, #16]	; (1a000b88 <prvResetNextTaskUnblockTime+0x24>)
1a000b78:	681b      	ldr	r3, [r3, #0]
1a000b7a:	68db      	ldr	r3, [r3, #12]
1a000b7c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000b7e:	685a      	ldr	r2, [r3, #4]
1a000b80:	4b02      	ldr	r3, [pc, #8]	; (1a000b8c <prvResetNextTaskUnblockTime+0x28>)
1a000b82:	601a      	str	r2, [r3, #0]
	}
}
1a000b84:	4770      	bx	lr
1a000b86:	bf00      	nop
1a000b88:	100020f4 	.word	0x100020f4
1a000b8c:	100021cc 	.word	0x100021cc

1a000b90 <prvDeleteTCB>:
	{
1a000b90:	b510      	push	{r4, lr}
1a000b92:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a000b94:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000b96:	f7ff fdd7 	bl	1a000748 <vPortFree>
			vPortFree( pxTCB );
1a000b9a:	4620      	mov	r0, r4
1a000b9c:	f7ff fdd4 	bl	1a000748 <vPortFree>
	}
1a000ba0:	bd10      	pop	{r4, pc}

1a000ba2 <prvInitialiseNewTask>:
{
1a000ba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000ba6:	4681      	mov	r9, r0
1a000ba8:	460d      	mov	r5, r1
1a000baa:	4617      	mov	r7, r2
1a000bac:	469a      	mov	sl, r3
1a000bae:	9e08      	ldr	r6, [sp, #32]
1a000bb0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000bb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000bb6:	0092      	lsls	r2, r2, #2
1a000bb8:	21a5      	movs	r1, #165	; 0xa5
1a000bba:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000bbc:	f003 fb91 	bl	1a0042e2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000bc2:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000bc6:	3a01      	subs	r2, #1
1a000bc8:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000bcc:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000bd0:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000bd2:	2300      	movs	r3, #0
1a000bd4:	2b0f      	cmp	r3, #15
1a000bd6:	d806      	bhi.n	1a000be6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000bd8:	5cea      	ldrb	r2, [r5, r3]
1a000bda:	18e1      	adds	r1, r4, r3
1a000bdc:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000be0:	b10a      	cbz	r2, 1a000be6 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000be2:	3301      	adds	r3, #1
1a000be4:	e7f6      	b.n	1a000bd4 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000be6:	2300      	movs	r3, #0
1a000be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000bec:	2e06      	cmp	r6, #6
1a000bee:	d900      	bls.n	1a000bf2 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000bf0:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000bf2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000bf4:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000bf6:	2500      	movs	r5, #0
1a000bf8:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000bfa:	1d20      	adds	r0, r4, #4
1a000bfc:	f000 fcb7 	bl	1a00156e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000c00:	f104 0018 	add.w	r0, r4, #24
1a000c04:	f000 fcb3 	bl	1a00156e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000c08:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000c0a:	f1c6 0607 	rsb	r6, r6, #7
1a000c0e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000c10:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000c12:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000c14:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000c18:	4652      	mov	r2, sl
1a000c1a:	4649      	mov	r1, r9
1a000c1c:	4638      	mov	r0, r7
1a000c1e:	f001 f84b 	bl	1a001cb8 <pxPortInitialiseStack>
1a000c22:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000c24:	f1b8 0f00 	cmp.w	r8, #0
1a000c28:	d001      	beq.n	1a000c2e <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000c2a:	f8c8 4000 	str.w	r4, [r8]
}
1a000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000c32:	Address 0x1a000c32 is out of bounds.


1a000c34 <prvInitialiseTaskLists>:
{
1a000c34:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000c36:	2400      	movs	r4, #0
1a000c38:	2c06      	cmp	r4, #6
1a000c3a:	d808      	bhi.n	1a000c4e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000c3c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000c40:	0093      	lsls	r3, r2, #2
1a000c42:	480e      	ldr	r0, [pc, #56]	; (1a000c7c <prvInitialiseTaskLists+0x48>)
1a000c44:	4418      	add	r0, r3
1a000c46:	f000 fc87 	bl	1a001558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000c4a:	3401      	adds	r4, #1
1a000c4c:	e7f4      	b.n	1a000c38 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a000c4e:	4d0c      	ldr	r5, [pc, #48]	; (1a000c80 <prvInitialiseTaskLists+0x4c>)
1a000c50:	4628      	mov	r0, r5
1a000c52:	f000 fc81 	bl	1a001558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000c56:	4c0b      	ldr	r4, [pc, #44]	; (1a000c84 <prvInitialiseTaskLists+0x50>)
1a000c58:	4620      	mov	r0, r4
1a000c5a:	f000 fc7d 	bl	1a001558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000c5e:	480a      	ldr	r0, [pc, #40]	; (1a000c88 <prvInitialiseTaskLists+0x54>)
1a000c60:	f000 fc7a 	bl	1a001558 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000c64:	4809      	ldr	r0, [pc, #36]	; (1a000c8c <prvInitialiseTaskLists+0x58>)
1a000c66:	f000 fc77 	bl	1a001558 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000c6a:	4809      	ldr	r0, [pc, #36]	; (1a000c90 <prvInitialiseTaskLists+0x5c>)
1a000c6c:	f000 fc74 	bl	1a001558 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000c70:	4b08      	ldr	r3, [pc, #32]	; (1a000c94 <prvInitialiseTaskLists+0x60>)
1a000c72:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000c74:	4b08      	ldr	r3, [pc, #32]	; (1a000c98 <prvInitialiseTaskLists+0x64>)
1a000c76:	601c      	str	r4, [r3, #0]
}
1a000c78:	bd38      	pop	{r3, r4, r5, pc}
1a000c7a:	bf00      	nop
1a000c7c:	100020fc 	.word	0x100020fc
1a000c80:	100021a0 	.word	0x100021a0
1a000c84:	100021b4 	.word	0x100021b4
1a000c88:	100021d4 	.word	0x100021d4
1a000c8c:	10002200 	.word	0x10002200
1a000c90:	100021ec 	.word	0x100021ec
1a000c94:	100020f4 	.word	0x100020f4
1a000c98:	100020f8 	.word	0x100020f8

1a000c9c <prvAddNewTaskToReadyList>:
{
1a000c9c:	b510      	push	{r4, lr}
1a000c9e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000ca0:	f001 f838 	bl	1a001d14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000ca4:	4a21      	ldr	r2, [pc, #132]	; (1a000d2c <prvAddNewTaskToReadyList+0x90>)
1a000ca6:	6813      	ldr	r3, [r2, #0]
1a000ca8:	3301      	adds	r3, #1
1a000caa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000cac:	4b20      	ldr	r3, [pc, #128]	; (1a000d30 <prvAddNewTaskToReadyList+0x94>)
1a000cae:	681b      	ldr	r3, [r3, #0]
1a000cb0:	b15b      	cbz	r3, 1a000cca <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a000cb2:	4b20      	ldr	r3, [pc, #128]	; (1a000d34 <prvAddNewTaskToReadyList+0x98>)
1a000cb4:	681b      	ldr	r3, [r3, #0]
1a000cb6:	b96b      	cbnz	r3, 1a000cd4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000cb8:	4b1d      	ldr	r3, [pc, #116]	; (1a000d30 <prvAddNewTaskToReadyList+0x94>)
1a000cba:	681b      	ldr	r3, [r3, #0]
1a000cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000cc0:	429a      	cmp	r2, r3
1a000cc2:	d807      	bhi.n	1a000cd4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000cc4:	4b1a      	ldr	r3, [pc, #104]	; (1a000d30 <prvAddNewTaskToReadyList+0x94>)
1a000cc6:	601c      	str	r4, [r3, #0]
1a000cc8:	e004      	b.n	1a000cd4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000cca:	4b19      	ldr	r3, [pc, #100]	; (1a000d30 <prvAddNewTaskToReadyList+0x94>)
1a000ccc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000cce:	6813      	ldr	r3, [r2, #0]
1a000cd0:	2b01      	cmp	r3, #1
1a000cd2:	d027      	beq.n	1a000d24 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a000cd4:	4a18      	ldr	r2, [pc, #96]	; (1a000d38 <prvAddNewTaskToReadyList+0x9c>)
1a000cd6:	6813      	ldr	r3, [r2, #0]
1a000cd8:	3301      	adds	r3, #1
1a000cda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000cdc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a000cde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000ce0:	2201      	movs	r2, #1
1a000ce2:	409a      	lsls	r2, r3
1a000ce4:	4915      	ldr	r1, [pc, #84]	; (1a000d3c <prvAddNewTaskToReadyList+0xa0>)
1a000ce6:	6808      	ldr	r0, [r1, #0]
1a000ce8:	4302      	orrs	r2, r0
1a000cea:	600a      	str	r2, [r1, #0]
1a000cec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000cf0:	009a      	lsls	r2, r3, #2
1a000cf2:	1d21      	adds	r1, r4, #4
1a000cf4:	4812      	ldr	r0, [pc, #72]	; (1a000d40 <prvAddNewTaskToReadyList+0xa4>)
1a000cf6:	4410      	add	r0, r2
1a000cf8:	f000 fc3c 	bl	1a001574 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a000cfc:	f001 f82c 	bl	1a001d58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a000d00:	4b0c      	ldr	r3, [pc, #48]	; (1a000d34 <prvAddNewTaskToReadyList+0x98>)
1a000d02:	681b      	ldr	r3, [r3, #0]
1a000d04:	b16b      	cbz	r3, 1a000d22 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000d06:	4b0a      	ldr	r3, [pc, #40]	; (1a000d30 <prvAddNewTaskToReadyList+0x94>)
1a000d08:	681b      	ldr	r3, [r3, #0]
1a000d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000d0e:	429a      	cmp	r2, r3
1a000d10:	d207      	bcs.n	1a000d22 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a000d12:	4b0c      	ldr	r3, [pc, #48]	; (1a000d44 <prvAddNewTaskToReadyList+0xa8>)
1a000d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d18:	601a      	str	r2, [r3, #0]
1a000d1a:	f3bf 8f4f 	dsb	sy
1a000d1e:	f3bf 8f6f 	isb	sy
}
1a000d22:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a000d24:	f7ff ff86 	bl	1a000c34 <prvInitialiseTaskLists>
1a000d28:	e7d4      	b.n	1a000cd4 <prvAddNewTaskToReadyList+0x38>
1a000d2a:	bf00      	nop
1a000d2c:	10002188 	.word	0x10002188
1a000d30:	100020f0 	.word	0x100020f0
1a000d34:	100021e8 	.word	0x100021e8
1a000d38:	10002198 	.word	0x10002198
1a000d3c:	1000219c 	.word	0x1000219c
1a000d40:	100020fc 	.word	0x100020fc
1a000d44:	e000ed04 	.word	0xe000ed04

1a000d48 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000d48:	4b0f      	ldr	r3, [pc, #60]	; (1a000d88 <prvCheckTasksWaitingTermination+0x40>)
1a000d4a:	681b      	ldr	r3, [r3, #0]
1a000d4c:	b1d3      	cbz	r3, 1a000d84 <prvCheckTasksWaitingTermination+0x3c>
{
1a000d4e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a000d50:	f000 ffe0 	bl	1a001d14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000d54:	4b0d      	ldr	r3, [pc, #52]	; (1a000d8c <prvCheckTasksWaitingTermination+0x44>)
1a000d56:	68db      	ldr	r3, [r3, #12]
1a000d58:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000d5a:	1d20      	adds	r0, r4, #4
1a000d5c:	f000 fc2f 	bl	1a0015be <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000d60:	4a0b      	ldr	r2, [pc, #44]	; (1a000d90 <prvCheckTasksWaitingTermination+0x48>)
1a000d62:	6813      	ldr	r3, [r2, #0]
1a000d64:	3b01      	subs	r3, #1
1a000d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000d68:	4a07      	ldr	r2, [pc, #28]	; (1a000d88 <prvCheckTasksWaitingTermination+0x40>)
1a000d6a:	6813      	ldr	r3, [r2, #0]
1a000d6c:	3b01      	subs	r3, #1
1a000d6e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a000d70:	f000 fff2 	bl	1a001d58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a000d74:	4620      	mov	r0, r4
1a000d76:	f7ff ff0b 	bl	1a000b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000d7a:	4b03      	ldr	r3, [pc, #12]	; (1a000d88 <prvCheckTasksWaitingTermination+0x40>)
1a000d7c:	681b      	ldr	r3, [r3, #0]
1a000d7e:	2b00      	cmp	r3, #0
1a000d80:	d1e6      	bne.n	1a000d50 <prvCheckTasksWaitingTermination+0x8>
}
1a000d82:	bd10      	pop	{r4, pc}
1a000d84:	4770      	bx	lr
1a000d86:	bf00      	nop
1a000d88:	1000218c 	.word	0x1000218c
1a000d8c:	10002200 	.word	0x10002200
1a000d90:	10002188 	.word	0x10002188

1a000d94 <prvIdleTask>:
{
1a000d94:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a000d96:	f7ff ffd7 	bl	1a000d48 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000d9a:	4b06      	ldr	r3, [pc, #24]	; (1a000db4 <prvIdleTask+0x20>)
1a000d9c:	681b      	ldr	r3, [r3, #0]
1a000d9e:	2b01      	cmp	r3, #1
1a000da0:	d9f9      	bls.n	1a000d96 <prvIdleTask+0x2>
				taskYIELD();
1a000da2:	4b05      	ldr	r3, [pc, #20]	; (1a000db8 <prvIdleTask+0x24>)
1a000da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000da8:	601a      	str	r2, [r3, #0]
1a000daa:	f3bf 8f4f 	dsb	sy
1a000dae:	f3bf 8f6f 	isb	sy
1a000db2:	e7f0      	b.n	1a000d96 <prvIdleTask+0x2>
1a000db4:	100020fc 	.word	0x100020fc
1a000db8:	e000ed04 	.word	0xe000ed04

1a000dbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000dbc:	b570      	push	{r4, r5, r6, lr}
1a000dbe:	4604      	mov	r4, r0
1a000dc0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000dc2:	4b1d      	ldr	r3, [pc, #116]	; (1a000e38 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000dc4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000dc6:	4b1d      	ldr	r3, [pc, #116]	; (1a000e3c <prvAddCurrentTaskToDelayedList+0x80>)
1a000dc8:	6818      	ldr	r0, [r3, #0]
1a000dca:	3004      	adds	r0, #4
1a000dcc:	f000 fbf7 	bl	1a0015be <uxListRemove>
1a000dd0:	b950      	cbnz	r0, 1a000de8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000dd2:	4b1a      	ldr	r3, [pc, #104]	; (1a000e3c <prvAddCurrentTaskToDelayedList+0x80>)
1a000dd4:	681b      	ldr	r3, [r3, #0]
1a000dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000dd8:	2301      	movs	r3, #1
1a000dda:	fa03 f202 	lsl.w	r2, r3, r2
1a000dde:	4918      	ldr	r1, [pc, #96]	; (1a000e40 <prvAddCurrentTaskToDelayedList+0x84>)
1a000de0:	680b      	ldr	r3, [r1, #0]
1a000de2:	ea23 0302 	bic.w	r3, r3, r2
1a000de6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000de8:	f1b4 3fff 	cmp.w	r4, #4294967295
1a000dec:	d00d      	beq.n	1a000e0a <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a000dee:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000df0:	4b12      	ldr	r3, [pc, #72]	; (1a000e3c <prvAddCurrentTaskToDelayedList+0x80>)
1a000df2:	681b      	ldr	r3, [r3, #0]
1a000df4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a000df6:	42a5      	cmp	r5, r4
1a000df8:	d910      	bls.n	1a000e1c <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000dfa:	4b12      	ldr	r3, [pc, #72]	; (1a000e44 <prvAddCurrentTaskToDelayedList+0x88>)
1a000dfc:	6818      	ldr	r0, [r3, #0]
1a000dfe:	4b0f      	ldr	r3, [pc, #60]	; (1a000e3c <prvAddCurrentTaskToDelayedList+0x80>)
1a000e00:	6819      	ldr	r1, [r3, #0]
1a000e02:	3104      	adds	r1, #4
1a000e04:	f000 fbc1 	bl	1a00158a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a000e08:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000e0a:	2e00      	cmp	r6, #0
1a000e0c:	d0ef      	beq.n	1a000dee <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000e0e:	4b0b      	ldr	r3, [pc, #44]	; (1a000e3c <prvAddCurrentTaskToDelayedList+0x80>)
1a000e10:	6819      	ldr	r1, [r3, #0]
1a000e12:	3104      	adds	r1, #4
1a000e14:	480c      	ldr	r0, [pc, #48]	; (1a000e48 <prvAddCurrentTaskToDelayedList+0x8c>)
1a000e16:	f000 fbad 	bl	1a001574 <vListInsertEnd>
1a000e1a:	e7f5      	b.n	1a000e08 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000e1c:	4b0b      	ldr	r3, [pc, #44]	; (1a000e4c <prvAddCurrentTaskToDelayedList+0x90>)
1a000e1e:	6818      	ldr	r0, [r3, #0]
1a000e20:	4b06      	ldr	r3, [pc, #24]	; (1a000e3c <prvAddCurrentTaskToDelayedList+0x80>)
1a000e22:	6819      	ldr	r1, [r3, #0]
1a000e24:	3104      	adds	r1, #4
1a000e26:	f000 fbb0 	bl	1a00158a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a000e2a:	4b09      	ldr	r3, [pc, #36]	; (1a000e50 <prvAddCurrentTaskToDelayedList+0x94>)
1a000e2c:	681b      	ldr	r3, [r3, #0]
1a000e2e:	42a3      	cmp	r3, r4
1a000e30:	d9ea      	bls.n	1a000e08 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a000e32:	4b07      	ldr	r3, [pc, #28]	; (1a000e50 <prvAddCurrentTaskToDelayedList+0x94>)
1a000e34:	601c      	str	r4, [r3, #0]
}
1a000e36:	e7e7      	b.n	1a000e08 <prvAddCurrentTaskToDelayedList+0x4c>
1a000e38:	10002214 	.word	0x10002214
1a000e3c:	100020f0 	.word	0x100020f0
1a000e40:	1000219c 	.word	0x1000219c
1a000e44:	100020f8 	.word	0x100020f8
1a000e48:	100021ec 	.word	0x100021ec
1a000e4c:	100020f4 	.word	0x100020f4
1a000e50:	100021cc 	.word	0x100021cc

1a000e54 <xTaskCreate>:
	{
1a000e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000e58:	b085      	sub	sp, #20
1a000e5a:	4607      	mov	r7, r0
1a000e5c:	4688      	mov	r8, r1
1a000e5e:	4614      	mov	r4, r2
1a000e60:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000e62:	0090      	lsls	r0, r2, #2
1a000e64:	f7ff fc38 	bl	1a0006d8 <pvPortMalloc>
			if( pxStack != NULL )
1a000e68:	b1e8      	cbz	r0, 1a000ea6 <xTaskCreate+0x52>
1a000e6a:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a000e6c:	2060      	movs	r0, #96	; 0x60
1a000e6e:	f7ff fc33 	bl	1a0006d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a000e72:	4605      	mov	r5, r0
1a000e74:	b198      	cbz	r0, 1a000e9e <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
1a000e76:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a000e78:	b1d5      	cbz	r5, 1a000eb0 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a000e7a:	2300      	movs	r3, #0
1a000e7c:	9303      	str	r3, [sp, #12]
1a000e7e:	9502      	str	r5, [sp, #8]
1a000e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a000e82:	9301      	str	r3, [sp, #4]
1a000e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a000e86:	9300      	str	r3, [sp, #0]
1a000e88:	464b      	mov	r3, r9
1a000e8a:	4622      	mov	r2, r4
1a000e8c:	4641      	mov	r1, r8
1a000e8e:	4638      	mov	r0, r7
1a000e90:	f7ff fe87 	bl	1a000ba2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a000e94:	4628      	mov	r0, r5
1a000e96:	f7ff ff01 	bl	1a000c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a000e9a:	2001      	movs	r0, #1
1a000e9c:	e005      	b.n	1a000eaa <xTaskCreate+0x56>
					vPortFree( pxStack );
1a000e9e:	4630      	mov	r0, r6
1a000ea0:	f7ff fc52 	bl	1a000748 <vPortFree>
1a000ea4:	e7e8      	b.n	1a000e78 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000ea6:	f04f 30ff 	mov.w	r0, #4294967295
	}
1a000eaa:	b005      	add	sp, #20
1a000eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000eb0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
1a000eb4:	e7f9      	b.n	1a000eaa <xTaskCreate+0x56>
1a000eb6:	Address 0x1a000eb6 is out of bounds.


1a000eb8 <vTaskStartScheduler>:
{
1a000eb8:	b500      	push	{lr}
1a000eba:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a000ebc:	4b19      	ldr	r3, [pc, #100]	; (1a000f24 <vTaskStartScheduler+0x6c>)
1a000ebe:	9301      	str	r3, [sp, #4]
1a000ec0:	2300      	movs	r3, #0
1a000ec2:	9300      	str	r3, [sp, #0]
1a000ec4:	225a      	movs	r2, #90	; 0x5a
1a000ec6:	4918      	ldr	r1, [pc, #96]	; (1a000f28 <vTaskStartScheduler+0x70>)
1a000ec8:	4818      	ldr	r0, [pc, #96]	; (1a000f2c <vTaskStartScheduler+0x74>)
1a000eca:	f7ff ffc3 	bl	1a000e54 <xTaskCreate>
		if( xReturn == pdPASS )
1a000ece:	2801      	cmp	r0, #1
1a000ed0:	d007      	beq.n	1a000ee2 <vTaskStartScheduler+0x2a>
	if( xReturn == pdPASS )
1a000ed2:	2801      	cmp	r0, #1
1a000ed4:	d008      	beq.n	1a000ee8 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000ed6:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000eda:	d01a      	beq.n	1a000f12 <vTaskStartScheduler+0x5a>
}
1a000edc:	b003      	add	sp, #12
1a000ede:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
1a000ee2:	f7ff fc9f 	bl	1a000824 <xTimerCreateTimerTask>
1a000ee6:	e7f4      	b.n	1a000ed2 <vTaskStartScheduler+0x1a>
1a000ee8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eec:	f383 8811 	msr	BASEPRI, r3
1a000ef0:	f3bf 8f6f 	isb	sy
1a000ef4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a000ef8:	4b0d      	ldr	r3, [pc, #52]	; (1a000f30 <vTaskStartScheduler+0x78>)
1a000efa:	f04f 32ff 	mov.w	r2, #4294967295
1a000efe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a000f00:	4b0c      	ldr	r3, [pc, #48]	; (1a000f34 <vTaskStartScheduler+0x7c>)
1a000f02:	2201      	movs	r2, #1
1a000f04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a000f06:	4b0c      	ldr	r3, [pc, #48]	; (1a000f38 <vTaskStartScheduler+0x80>)
1a000f08:	2200      	movs	r2, #0
1a000f0a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a000f0c:	f000 ffa4 	bl	1a001e58 <xPortStartScheduler>
1a000f10:	e7e4      	b.n	1a000edc <vTaskStartScheduler+0x24>
1a000f12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f16:	f383 8811 	msr	BASEPRI, r3
1a000f1a:	f3bf 8f6f 	isb	sy
1a000f1e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000f22:	e7fe      	b.n	1a000f22 <vTaskStartScheduler+0x6a>
1a000f24:	100021c8 	.word	0x100021c8
1a000f28:	1a004f10 	.word	0x1a004f10
1a000f2c:	1a000d95 	.word	0x1a000d95
1a000f30:	100021cc 	.word	0x100021cc
1a000f34:	100021e8 	.word	0x100021e8
1a000f38:	10002214 	.word	0x10002214

1a000f3c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a000f3c:	4a02      	ldr	r2, [pc, #8]	; (1a000f48 <vTaskSuspendAll+0xc>)
1a000f3e:	6813      	ldr	r3, [r2, #0]
1a000f40:	3301      	adds	r3, #1
1a000f42:	6013      	str	r3, [r2, #0]
}
1a000f44:	4770      	bx	lr
1a000f46:	bf00      	nop
1a000f48:	10002194 	.word	0x10002194

1a000f4c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a000f4c:	4b01      	ldr	r3, [pc, #4]	; (1a000f54 <xTaskGetTickCount+0x8>)
1a000f4e:	6818      	ldr	r0, [r3, #0]
}
1a000f50:	4770      	bx	lr
1a000f52:	bf00      	nop
1a000f54:	10002214 	.word	0x10002214

1a000f58 <xTaskIncrementTick>:
{
1a000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a000f5a:	4b3a      	ldr	r3, [pc, #232]	; (1a001044 <xTaskIncrementTick+0xec>)
1a000f5c:	681b      	ldr	r3, [r3, #0]
1a000f5e:	2b00      	cmp	r3, #0
1a000f60:	d164      	bne.n	1a00102c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a000f62:	4b39      	ldr	r3, [pc, #228]	; (1a001048 <xTaskIncrementTick+0xf0>)
1a000f64:	681d      	ldr	r5, [r3, #0]
1a000f66:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a000f68:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a000f6a:	b9c5      	cbnz	r5, 1a000f9e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a000f6c:	4b37      	ldr	r3, [pc, #220]	; (1a00104c <xTaskIncrementTick+0xf4>)
1a000f6e:	681b      	ldr	r3, [r3, #0]
1a000f70:	681b      	ldr	r3, [r3, #0]
1a000f72:	b143      	cbz	r3, 1a000f86 <xTaskIncrementTick+0x2e>
1a000f74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f78:	f383 8811 	msr	BASEPRI, r3
1a000f7c:	f3bf 8f6f 	isb	sy
1a000f80:	f3bf 8f4f 	dsb	sy
1a000f84:	e7fe      	b.n	1a000f84 <xTaskIncrementTick+0x2c>
1a000f86:	4a31      	ldr	r2, [pc, #196]	; (1a00104c <xTaskIncrementTick+0xf4>)
1a000f88:	6811      	ldr	r1, [r2, #0]
1a000f8a:	4b31      	ldr	r3, [pc, #196]	; (1a001050 <xTaskIncrementTick+0xf8>)
1a000f8c:	6818      	ldr	r0, [r3, #0]
1a000f8e:	6010      	str	r0, [r2, #0]
1a000f90:	6019      	str	r1, [r3, #0]
1a000f92:	4a30      	ldr	r2, [pc, #192]	; (1a001054 <xTaskIncrementTick+0xfc>)
1a000f94:	6813      	ldr	r3, [r2, #0]
1a000f96:	3301      	adds	r3, #1
1a000f98:	6013      	str	r3, [r2, #0]
1a000f9a:	f7ff fde3 	bl	1a000b64 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a000f9e:	4b2e      	ldr	r3, [pc, #184]	; (1a001058 <xTaskIncrementTick+0x100>)
1a000fa0:	681b      	ldr	r3, [r3, #0]
1a000fa2:	42ab      	cmp	r3, r5
1a000fa4:	d938      	bls.n	1a001018 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a000fa6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a000fa8:	4b2c      	ldr	r3, [pc, #176]	; (1a00105c <xTaskIncrementTick+0x104>)
1a000faa:	681b      	ldr	r3, [r3, #0]
1a000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a000fae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000fb2:	009a      	lsls	r2, r3, #2
1a000fb4:	4b2a      	ldr	r3, [pc, #168]	; (1a001060 <xTaskIncrementTick+0x108>)
1a000fb6:	589b      	ldr	r3, [r3, r2]
1a000fb8:	2b01      	cmp	r3, #1
1a000fba:	d93c      	bls.n	1a001036 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a000fbc:	2401      	movs	r4, #1
1a000fbe:	e03a      	b.n	1a001036 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a000fc0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000fc2:	4b22      	ldr	r3, [pc, #136]	; (1a00104c <xTaskIncrementTick+0xf4>)
1a000fc4:	681b      	ldr	r3, [r3, #0]
1a000fc6:	681b      	ldr	r3, [r3, #0]
1a000fc8:	b343      	cbz	r3, 1a00101c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000fca:	4b20      	ldr	r3, [pc, #128]	; (1a00104c <xTaskIncrementTick+0xf4>)
1a000fcc:	681b      	ldr	r3, [r3, #0]
1a000fce:	68db      	ldr	r3, [r3, #12]
1a000fd0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a000fd2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a000fd4:	429d      	cmp	r5, r3
1a000fd6:	d326      	bcc.n	1a001026 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000fd8:	1d37      	adds	r7, r6, #4
1a000fda:	4638      	mov	r0, r7
1a000fdc:	f000 faef 	bl	1a0015be <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a000fe0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a000fe2:	b11b      	cbz	r3, 1a000fec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a000fe4:	f106 0018 	add.w	r0, r6, #24
1a000fe8:	f000 fae9 	bl	1a0015be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a000fec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a000fee:	2201      	movs	r2, #1
1a000ff0:	409a      	lsls	r2, r3
1a000ff2:	491c      	ldr	r1, [pc, #112]	; (1a001064 <xTaskIncrementTick+0x10c>)
1a000ff4:	6808      	ldr	r0, [r1, #0]
1a000ff6:	4302      	orrs	r2, r0
1a000ff8:	600a      	str	r2, [r1, #0]
1a000ffa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000ffe:	009a      	lsls	r2, r3, #2
1a001000:	4639      	mov	r1, r7
1a001002:	4817      	ldr	r0, [pc, #92]	; (1a001060 <xTaskIncrementTick+0x108>)
1a001004:	4410      	add	r0, r2
1a001006:	f000 fab5 	bl	1a001574 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00100a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a00100c:	4b13      	ldr	r3, [pc, #76]	; (1a00105c <xTaskIncrementTick+0x104>)
1a00100e:	681b      	ldr	r3, [r3, #0]
1a001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001012:	429a      	cmp	r2, r3
1a001014:	d2d4      	bcs.n	1a000fc0 <xTaskIncrementTick+0x68>
1a001016:	e7d4      	b.n	1a000fc2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001018:	2400      	movs	r4, #0
1a00101a:	e7d2      	b.n	1a000fc2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00101c:	4b0e      	ldr	r3, [pc, #56]	; (1a001058 <xTaskIncrementTick+0x100>)
1a00101e:	f04f 32ff 	mov.w	r2, #4294967295
1a001022:	601a      	str	r2, [r3, #0]
					break;
1a001024:	e7c0      	b.n	1a000fa8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001026:	4a0c      	ldr	r2, [pc, #48]	; (1a001058 <xTaskIncrementTick+0x100>)
1a001028:	6013      	str	r3, [r2, #0]
						break;
1a00102a:	e7bd      	b.n	1a000fa8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a00102c:	4a0e      	ldr	r2, [pc, #56]	; (1a001068 <xTaskIncrementTick+0x110>)
1a00102e:	6813      	ldr	r3, [r2, #0]
1a001030:	3301      	adds	r3, #1
1a001032:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001034:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001036:	4b0d      	ldr	r3, [pc, #52]	; (1a00106c <xTaskIncrementTick+0x114>)
1a001038:	681b      	ldr	r3, [r3, #0]
1a00103a:	b103      	cbz	r3, 1a00103e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a00103c:	2401      	movs	r4, #1
}
1a00103e:	4620      	mov	r0, r4
1a001040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001042:	bf00      	nop
1a001044:	10002194 	.word	0x10002194
1a001048:	10002214 	.word	0x10002214
1a00104c:	100020f4 	.word	0x100020f4
1a001050:	100020f8 	.word	0x100020f8
1a001054:	100021d0 	.word	0x100021d0
1a001058:	100021cc 	.word	0x100021cc
1a00105c:	100020f0 	.word	0x100020f0
1a001060:	100020fc 	.word	0x100020fc
1a001064:	1000219c 	.word	0x1000219c
1a001068:	10002190 	.word	0x10002190
1a00106c:	10002218 	.word	0x10002218

1a001070 <xTaskResumeAll>:
{
1a001070:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001072:	4b35      	ldr	r3, [pc, #212]	; (1a001148 <xTaskResumeAll+0xd8>)
1a001074:	681b      	ldr	r3, [r3, #0]
1a001076:	b943      	cbnz	r3, 1a00108a <xTaskResumeAll+0x1a>
1a001078:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00107c:	f383 8811 	msr	BASEPRI, r3
1a001080:	f3bf 8f6f 	isb	sy
1a001084:	f3bf 8f4f 	dsb	sy
1a001088:	e7fe      	b.n	1a001088 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00108a:	f000 fe43 	bl	1a001d14 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00108e:	4b2e      	ldr	r3, [pc, #184]	; (1a001148 <xTaskResumeAll+0xd8>)
1a001090:	681a      	ldr	r2, [r3, #0]
1a001092:	3a01      	subs	r2, #1
1a001094:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001096:	681b      	ldr	r3, [r3, #0]
1a001098:	2b00      	cmp	r3, #0
1a00109a:	d14d      	bne.n	1a001138 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00109c:	4b2b      	ldr	r3, [pc, #172]	; (1a00114c <xTaskResumeAll+0xdc>)
1a00109e:	681b      	ldr	r3, [r3, #0]
1a0010a0:	b90b      	cbnz	r3, 1a0010a6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a0010a2:	2400      	movs	r4, #0
1a0010a4:	e049      	b.n	1a00113a <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a0010a6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0010a8:	4b29      	ldr	r3, [pc, #164]	; (1a001150 <xTaskResumeAll+0xe0>)
1a0010aa:	681b      	ldr	r3, [r3, #0]
1a0010ac:	b31b      	cbz	r3, 1a0010f6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0010ae:	4b28      	ldr	r3, [pc, #160]	; (1a001150 <xTaskResumeAll+0xe0>)
1a0010b0:	68db      	ldr	r3, [r3, #12]
1a0010b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0010b4:	f104 0018 	add.w	r0, r4, #24
1a0010b8:	f000 fa81 	bl	1a0015be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0010bc:	1d25      	adds	r5, r4, #4
1a0010be:	4628      	mov	r0, r5
1a0010c0:	f000 fa7d 	bl	1a0015be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0010c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010c6:	2201      	movs	r2, #1
1a0010c8:	409a      	lsls	r2, r3
1a0010ca:	4922      	ldr	r1, [pc, #136]	; (1a001154 <xTaskResumeAll+0xe4>)
1a0010cc:	6808      	ldr	r0, [r1, #0]
1a0010ce:	4302      	orrs	r2, r0
1a0010d0:	600a      	str	r2, [r1, #0]
1a0010d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0010d6:	009a      	lsls	r2, r3, #2
1a0010d8:	4629      	mov	r1, r5
1a0010da:	481f      	ldr	r0, [pc, #124]	; (1a001158 <xTaskResumeAll+0xe8>)
1a0010dc:	4410      	add	r0, r2
1a0010de:	f000 fa49 	bl	1a001574 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0010e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0010e4:	4b1d      	ldr	r3, [pc, #116]	; (1a00115c <xTaskResumeAll+0xec>)
1a0010e6:	681b      	ldr	r3, [r3, #0]
1a0010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0010ea:	429a      	cmp	r2, r3
1a0010ec:	d3dc      	bcc.n	1a0010a8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a0010ee:	4b1c      	ldr	r3, [pc, #112]	; (1a001160 <xTaskResumeAll+0xf0>)
1a0010f0:	2201      	movs	r2, #1
1a0010f2:	601a      	str	r2, [r3, #0]
1a0010f4:	e7d8      	b.n	1a0010a8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0010f6:	b10c      	cbz	r4, 1a0010fc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0010f8:	f7ff fd34 	bl	1a000b64 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0010fc:	4b19      	ldr	r3, [pc, #100]	; (1a001164 <xTaskResumeAll+0xf4>)
1a0010fe:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001100:	b974      	cbnz	r4, 1a001120 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a001102:	4b17      	ldr	r3, [pc, #92]	; (1a001160 <xTaskResumeAll+0xf0>)
1a001104:	681b      	ldr	r3, [r3, #0]
1a001106:	b1e3      	cbz	r3, 1a001142 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001108:	4b17      	ldr	r3, [pc, #92]	; (1a001168 <xTaskResumeAll+0xf8>)
1a00110a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00110e:	601a      	str	r2, [r3, #0]
1a001110:	f3bf 8f4f 	dsb	sy
1a001114:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001118:	2401      	movs	r4, #1
1a00111a:	e00e      	b.n	1a00113a <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00111c:	3c01      	subs	r4, #1
1a00111e:	d007      	beq.n	1a001130 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a001120:	f7ff ff1a 	bl	1a000f58 <xTaskIncrementTick>
1a001124:	2800      	cmp	r0, #0
1a001126:	d0f9      	beq.n	1a00111c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a001128:	4b0d      	ldr	r3, [pc, #52]	; (1a001160 <xTaskResumeAll+0xf0>)
1a00112a:	2201      	movs	r2, #1
1a00112c:	601a      	str	r2, [r3, #0]
1a00112e:	e7f5      	b.n	1a00111c <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a001130:	4b0c      	ldr	r3, [pc, #48]	; (1a001164 <xTaskResumeAll+0xf4>)
1a001132:	2200      	movs	r2, #0
1a001134:	601a      	str	r2, [r3, #0]
1a001136:	e7e4      	b.n	1a001102 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a001138:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00113a:	f000 fe0d 	bl	1a001d58 <vPortExitCritical>
}
1a00113e:	4620      	mov	r0, r4
1a001140:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a001142:	2400      	movs	r4, #0
1a001144:	e7f9      	b.n	1a00113a <xTaskResumeAll+0xca>
1a001146:	bf00      	nop
1a001148:	10002194 	.word	0x10002194
1a00114c:	10002188 	.word	0x10002188
1a001150:	100021d4 	.word	0x100021d4
1a001154:	1000219c 	.word	0x1000219c
1a001158:	100020fc 	.word	0x100020fc
1a00115c:	100020f0 	.word	0x100020f0
1a001160:	10002218 	.word	0x10002218
1a001164:	10002190 	.word	0x10002190
1a001168:	e000ed04 	.word	0xe000ed04

1a00116c <vTaskDelay>:
	{
1a00116c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00116e:	b1a8      	cbz	r0, 1a00119c <vTaskDelay+0x30>
1a001170:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001172:	4b0f      	ldr	r3, [pc, #60]	; (1a0011b0 <vTaskDelay+0x44>)
1a001174:	681b      	ldr	r3, [r3, #0]
1a001176:	b143      	cbz	r3, 1a00118a <vTaskDelay+0x1e>
1a001178:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00117c:	f383 8811 	msr	BASEPRI, r3
1a001180:	f3bf 8f6f 	isb	sy
1a001184:	f3bf 8f4f 	dsb	sy
1a001188:	e7fe      	b.n	1a001188 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00118a:	f7ff fed7 	bl	1a000f3c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00118e:	2100      	movs	r1, #0
1a001190:	4620      	mov	r0, r4
1a001192:	f7ff fe13 	bl	1a000dbc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001196:	f7ff ff6b 	bl	1a001070 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00119a:	b938      	cbnz	r0, 1a0011ac <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a00119c:	4b05      	ldr	r3, [pc, #20]	; (1a0011b4 <vTaskDelay+0x48>)
1a00119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011a2:	601a      	str	r2, [r3, #0]
1a0011a4:	f3bf 8f4f 	dsb	sy
1a0011a8:	f3bf 8f6f 	isb	sy
	}
1a0011ac:	bd10      	pop	{r4, pc}
1a0011ae:	bf00      	nop
1a0011b0:	10002194 	.word	0x10002194
1a0011b4:	e000ed04 	.word	0xe000ed04

1a0011b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0011b8:	4b2d      	ldr	r3, [pc, #180]	; (1a001270 <vTaskSwitchContext+0xb8>)
1a0011ba:	681b      	ldr	r3, [r3, #0]
1a0011bc:	b11b      	cbz	r3, 1a0011c6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0011be:	4b2d      	ldr	r3, [pc, #180]	; (1a001274 <vTaskSwitchContext+0xbc>)
1a0011c0:	2201      	movs	r2, #1
1a0011c2:	601a      	str	r2, [r3, #0]
1a0011c4:	4770      	bx	lr
{
1a0011c6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0011c8:	4b2a      	ldr	r3, [pc, #168]	; (1a001274 <vTaskSwitchContext+0xbc>)
1a0011ca:	2200      	movs	r2, #0
1a0011cc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0011ce:	4b2a      	ldr	r3, [pc, #168]	; (1a001278 <vTaskSwitchContext+0xc0>)
1a0011d0:	681b      	ldr	r3, [r3, #0]
1a0011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0011d4:	681a      	ldr	r2, [r3, #0]
1a0011d6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0011da:	d103      	bne.n	1a0011e4 <vTaskSwitchContext+0x2c>
1a0011dc:	685a      	ldr	r2, [r3, #4]
1a0011de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0011e2:	d01b      	beq.n	1a00121c <vTaskSwitchContext+0x64>
1a0011e4:	4b24      	ldr	r3, [pc, #144]	; (1a001278 <vTaskSwitchContext+0xc0>)
1a0011e6:	6818      	ldr	r0, [r3, #0]
1a0011e8:	6819      	ldr	r1, [r3, #0]
1a0011ea:	3134      	adds	r1, #52	; 0x34
1a0011ec:	f000 f9a6 	bl	1a00153c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0011f0:	4b22      	ldr	r3, [pc, #136]	; (1a00127c <vTaskSwitchContext+0xc4>)
1a0011f2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0011f4:	fab3 f383 	clz	r3, r3
1a0011f8:	b2db      	uxtb	r3, r3
1a0011fa:	f1c3 031f 	rsb	r3, r3, #31
1a0011fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001202:	008a      	lsls	r2, r1, #2
1a001204:	491e      	ldr	r1, [pc, #120]	; (1a001280 <vTaskSwitchContext+0xc8>)
1a001206:	588a      	ldr	r2, [r1, r2]
1a001208:	b98a      	cbnz	r2, 1a00122e <vTaskSwitchContext+0x76>
	__asm volatile
1a00120a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00120e:	f383 8811 	msr	BASEPRI, r3
1a001212:	f3bf 8f6f 	isb	sy
1a001216:	f3bf 8f4f 	dsb	sy
1a00121a:	e7fe      	b.n	1a00121a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00121c:	689a      	ldr	r2, [r3, #8]
1a00121e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001222:	d1df      	bne.n	1a0011e4 <vTaskSwitchContext+0x2c>
1a001224:	68db      	ldr	r3, [r3, #12]
1a001226:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00122a:	d1db      	bne.n	1a0011e4 <vTaskSwitchContext+0x2c>
1a00122c:	e7e0      	b.n	1a0011f0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00122e:	4814      	ldr	r0, [pc, #80]	; (1a001280 <vTaskSwitchContext+0xc8>)
1a001230:	009a      	lsls	r2, r3, #2
1a001232:	18d4      	adds	r4, r2, r3
1a001234:	00a1      	lsls	r1, r4, #2
1a001236:	4401      	add	r1, r0
1a001238:	684c      	ldr	r4, [r1, #4]
1a00123a:	6864      	ldr	r4, [r4, #4]
1a00123c:	604c      	str	r4, [r1, #4]
1a00123e:	441a      	add	r2, r3
1a001240:	0091      	lsls	r1, r2, #2
1a001242:	3108      	adds	r1, #8
1a001244:	4408      	add	r0, r1
1a001246:	4284      	cmp	r4, r0
1a001248:	d009      	beq.n	1a00125e <vTaskSwitchContext+0xa6>
1a00124a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00124e:	009a      	lsls	r2, r3, #2
1a001250:	4b0b      	ldr	r3, [pc, #44]	; (1a001280 <vTaskSwitchContext+0xc8>)
1a001252:	4413      	add	r3, r2
1a001254:	685b      	ldr	r3, [r3, #4]
1a001256:	68da      	ldr	r2, [r3, #12]
1a001258:	4b07      	ldr	r3, [pc, #28]	; (1a001278 <vTaskSwitchContext+0xc0>)
1a00125a:	601a      	str	r2, [r3, #0]
}
1a00125c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00125e:	6860      	ldr	r0, [r4, #4]
1a001260:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001264:	0091      	lsls	r1, r2, #2
1a001266:	4a06      	ldr	r2, [pc, #24]	; (1a001280 <vTaskSwitchContext+0xc8>)
1a001268:	440a      	add	r2, r1
1a00126a:	6050      	str	r0, [r2, #4]
1a00126c:	e7ed      	b.n	1a00124a <vTaskSwitchContext+0x92>
1a00126e:	bf00      	nop
1a001270:	10002194 	.word	0x10002194
1a001274:	10002218 	.word	0x10002218
1a001278:	100020f0 	.word	0x100020f0
1a00127c:	1000219c 	.word	0x1000219c
1a001280:	100020fc 	.word	0x100020fc

1a001284 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001284:	b158      	cbz	r0, 1a00129e <vTaskPlaceOnEventList+0x1a>
{
1a001286:	b510      	push	{r4, lr}
1a001288:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00128a:	4b09      	ldr	r3, [pc, #36]	; (1a0012b0 <vTaskPlaceOnEventList+0x2c>)
1a00128c:	6819      	ldr	r1, [r3, #0]
1a00128e:	3118      	adds	r1, #24
1a001290:	f000 f97b 	bl	1a00158a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001294:	2101      	movs	r1, #1
1a001296:	4620      	mov	r0, r4
1a001298:	f7ff fd90 	bl	1a000dbc <prvAddCurrentTaskToDelayedList>
}
1a00129c:	bd10      	pop	{r4, pc}
1a00129e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012a2:	f383 8811 	msr	BASEPRI, r3
1a0012a6:	f3bf 8f6f 	isb	sy
1a0012aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a0012ae:	e7fe      	b.n	1a0012ae <vTaskPlaceOnEventList+0x2a>
1a0012b0:	100020f0 	.word	0x100020f0

1a0012b4 <vTaskPlaceOnEventListRestricted>:
	{
1a0012b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0012b6:	b170      	cbz	r0, 1a0012d6 <vTaskPlaceOnEventListRestricted+0x22>
1a0012b8:	460c      	mov	r4, r1
1a0012ba:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0012bc:	4a0a      	ldr	r2, [pc, #40]	; (1a0012e8 <vTaskPlaceOnEventListRestricted+0x34>)
1a0012be:	6811      	ldr	r1, [r2, #0]
1a0012c0:	3118      	adds	r1, #24
1a0012c2:	f000 f957 	bl	1a001574 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0012c6:	b10d      	cbz	r5, 1a0012cc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a0012c8:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0012cc:	4629      	mov	r1, r5
1a0012ce:	4620      	mov	r0, r4
1a0012d0:	f7ff fd74 	bl	1a000dbc <prvAddCurrentTaskToDelayedList>
	}
1a0012d4:	bd38      	pop	{r3, r4, r5, pc}
1a0012d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012da:	f383 8811 	msr	BASEPRI, r3
1a0012de:	f3bf 8f6f 	isb	sy
1a0012e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a0012e6:	e7fe      	b.n	1a0012e6 <vTaskPlaceOnEventListRestricted+0x32>
1a0012e8:	100020f0 	.word	0x100020f0

1a0012ec <xTaskRemoveFromEventList>:
{
1a0012ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0012ee:	68c3      	ldr	r3, [r0, #12]
1a0012f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0012f2:	b324      	cbz	r4, 1a00133e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0012f4:	f104 0518 	add.w	r5, r4, #24
1a0012f8:	4628      	mov	r0, r5
1a0012fa:	f000 f960 	bl	1a0015be <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0012fe:	4b18      	ldr	r3, [pc, #96]	; (1a001360 <xTaskRemoveFromEventList+0x74>)
1a001300:	681b      	ldr	r3, [r3, #0]
1a001302:	bb2b      	cbnz	r3, 1a001350 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001304:	1d25      	adds	r5, r4, #4
1a001306:	4628      	mov	r0, r5
1a001308:	f000 f959 	bl	1a0015be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00130c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00130e:	2201      	movs	r2, #1
1a001310:	409a      	lsls	r2, r3
1a001312:	4914      	ldr	r1, [pc, #80]	; (1a001364 <xTaskRemoveFromEventList+0x78>)
1a001314:	6808      	ldr	r0, [r1, #0]
1a001316:	4302      	orrs	r2, r0
1a001318:	600a      	str	r2, [r1, #0]
1a00131a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00131e:	009a      	lsls	r2, r3, #2
1a001320:	4629      	mov	r1, r5
1a001322:	4811      	ldr	r0, [pc, #68]	; (1a001368 <xTaskRemoveFromEventList+0x7c>)
1a001324:	4410      	add	r0, r2
1a001326:	f000 f925 	bl	1a001574 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00132a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00132c:	4b0f      	ldr	r3, [pc, #60]	; (1a00136c <xTaskRemoveFromEventList+0x80>)
1a00132e:	681b      	ldr	r3, [r3, #0]
1a001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001332:	429a      	cmp	r2, r3
1a001334:	d911      	bls.n	1a00135a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001336:	2001      	movs	r0, #1
1a001338:	4b0d      	ldr	r3, [pc, #52]	; (1a001370 <xTaskRemoveFromEventList+0x84>)
1a00133a:	6018      	str	r0, [r3, #0]
1a00133c:	e00e      	b.n	1a00135c <xTaskRemoveFromEventList+0x70>
1a00133e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001342:	f383 8811 	msr	BASEPRI, r3
1a001346:	f3bf 8f6f 	isb	sy
1a00134a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a00134e:	e7fe      	b.n	1a00134e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001350:	4629      	mov	r1, r5
1a001352:	4808      	ldr	r0, [pc, #32]	; (1a001374 <xTaskRemoveFromEventList+0x88>)
1a001354:	f000 f90e 	bl	1a001574 <vListInsertEnd>
1a001358:	e7e7      	b.n	1a00132a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a00135a:	2000      	movs	r0, #0
}
1a00135c:	bd38      	pop	{r3, r4, r5, pc}
1a00135e:	bf00      	nop
1a001360:	10002194 	.word	0x10002194
1a001364:	1000219c 	.word	0x1000219c
1a001368:	100020fc 	.word	0x100020fc
1a00136c:	100020f0 	.word	0x100020f0
1a001370:	10002218 	.word	0x10002218
1a001374:	100021d4 	.word	0x100021d4

1a001378 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001378:	4b03      	ldr	r3, [pc, #12]	; (1a001388 <vTaskInternalSetTimeOutState+0x10>)
1a00137a:	681b      	ldr	r3, [r3, #0]
1a00137c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00137e:	4b03      	ldr	r3, [pc, #12]	; (1a00138c <vTaskInternalSetTimeOutState+0x14>)
1a001380:	681b      	ldr	r3, [r3, #0]
1a001382:	6043      	str	r3, [r0, #4]
}
1a001384:	4770      	bx	lr
1a001386:	bf00      	nop
1a001388:	100021d0 	.word	0x100021d0
1a00138c:	10002214 	.word	0x10002214

1a001390 <xTaskCheckForTimeOut>:
{
1a001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001392:	b1c8      	cbz	r0, 1a0013c8 <xTaskCheckForTimeOut+0x38>
1a001394:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001396:	b301      	cbz	r1, 1a0013da <xTaskCheckForTimeOut+0x4a>
1a001398:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00139a:	f000 fcbb 	bl	1a001d14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00139e:	4b1b      	ldr	r3, [pc, #108]	; (1a00140c <xTaskCheckForTimeOut+0x7c>)
1a0013a0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0013a2:	686b      	ldr	r3, [r5, #4]
1a0013a4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a0013a6:	6822      	ldr	r2, [r4, #0]
1a0013a8:	f1b2 3fff 	cmp.w	r2, #4294967295
1a0013ac:	d026      	beq.n	1a0013fc <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0013ae:	682f      	ldr	r7, [r5, #0]
1a0013b0:	4e17      	ldr	r6, [pc, #92]	; (1a001410 <xTaskCheckForTimeOut+0x80>)
1a0013b2:	6836      	ldr	r6, [r6, #0]
1a0013b4:	42b7      	cmp	r7, r6
1a0013b6:	d001      	beq.n	1a0013bc <xTaskCheckForTimeOut+0x2c>
1a0013b8:	428b      	cmp	r3, r1
1a0013ba:	d924      	bls.n	1a001406 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0013bc:	4282      	cmp	r2, r0
1a0013be:	d815      	bhi.n	1a0013ec <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0013c0:	2300      	movs	r3, #0
1a0013c2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0013c4:	2401      	movs	r4, #1
1a0013c6:	e01a      	b.n	1a0013fe <xTaskCheckForTimeOut+0x6e>
1a0013c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013cc:	f383 8811 	msr	BASEPRI, r3
1a0013d0:	f3bf 8f6f 	isb	sy
1a0013d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a0013d8:	e7fe      	b.n	1a0013d8 <xTaskCheckForTimeOut+0x48>
1a0013da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013de:	f383 8811 	msr	BASEPRI, r3
1a0013e2:	f3bf 8f6f 	isb	sy
1a0013e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a0013ea:	e7fe      	b.n	1a0013ea <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a0013ec:	1a5b      	subs	r3, r3, r1
1a0013ee:	4413      	add	r3, r2
1a0013f0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0013f2:	4628      	mov	r0, r5
1a0013f4:	f7ff ffc0 	bl	1a001378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0013f8:	2400      	movs	r4, #0
1a0013fa:	e000      	b.n	1a0013fe <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a0013fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0013fe:	f000 fcab 	bl	1a001d58 <vPortExitCritical>
}
1a001402:	4620      	mov	r0, r4
1a001404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a001406:	2401      	movs	r4, #1
1a001408:	e7f9      	b.n	1a0013fe <xTaskCheckForTimeOut+0x6e>
1a00140a:	bf00      	nop
1a00140c:	10002214 	.word	0x10002214
1a001410:	100021d0 	.word	0x100021d0

1a001414 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001414:	4b01      	ldr	r3, [pc, #4]	; (1a00141c <vTaskMissedYield+0x8>)
1a001416:	2201      	movs	r2, #1
1a001418:	601a      	str	r2, [r3, #0]
}
1a00141a:	4770      	bx	lr
1a00141c:	10002218 	.word	0x10002218

1a001420 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001420:	4b05      	ldr	r3, [pc, #20]	; (1a001438 <xTaskGetSchedulerState+0x18>)
1a001422:	681b      	ldr	r3, [r3, #0]
1a001424:	b133      	cbz	r3, 1a001434 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001426:	4b05      	ldr	r3, [pc, #20]	; (1a00143c <xTaskGetSchedulerState+0x1c>)
1a001428:	681b      	ldr	r3, [r3, #0]
1a00142a:	b10b      	cbz	r3, 1a001430 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a00142c:	2000      	movs	r0, #0
	}
1a00142e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001430:	2002      	movs	r0, #2
1a001432:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001434:	2001      	movs	r0, #1
1a001436:	4770      	bx	lr
1a001438:	100021e8 	.word	0x100021e8
1a00143c:	10002194 	.word	0x10002194

1a001440 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001440:	2800      	cmp	r0, #0
1a001442:	d04c      	beq.n	1a0014de <xTaskPriorityDisinherit+0x9e>
	{
1a001444:	b538      	push	{r3, r4, r5, lr}
1a001446:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001448:	4a27      	ldr	r2, [pc, #156]	; (1a0014e8 <xTaskPriorityDisinherit+0xa8>)
1a00144a:	6812      	ldr	r2, [r2, #0]
1a00144c:	4282      	cmp	r2, r0
1a00144e:	d008      	beq.n	1a001462 <xTaskPriorityDisinherit+0x22>
1a001450:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001454:	f383 8811 	msr	BASEPRI, r3
1a001458:	f3bf 8f6f 	isb	sy
1a00145c:	f3bf 8f4f 	dsb	sy
1a001460:	e7fe      	b.n	1a001460 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001462:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001464:	b942      	cbnz	r2, 1a001478 <xTaskPriorityDisinherit+0x38>
1a001466:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00146a:	f383 8811 	msr	BASEPRI, r3
1a00146e:	f3bf 8f6f 	isb	sy
1a001472:	f3bf 8f4f 	dsb	sy
1a001476:	e7fe      	b.n	1a001476 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001478:	3a01      	subs	r2, #1
1a00147a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a00147c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00147e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001480:	4288      	cmp	r0, r1
1a001482:	d02e      	beq.n	1a0014e2 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001484:	b10a      	cbz	r2, 1a00148a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001486:	2000      	movs	r0, #0
	}
1a001488:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00148a:	1d25      	adds	r5, r4, #4
1a00148c:	4628      	mov	r0, r5
1a00148e:	f000 f896 	bl	1a0015be <uxListRemove>
1a001492:	b970      	cbnz	r0, 1a0014b2 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001494:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001496:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a00149a:	008b      	lsls	r3, r1, #2
1a00149c:	4913      	ldr	r1, [pc, #76]	; (1a0014ec <xTaskPriorityDisinherit+0xac>)
1a00149e:	58cb      	ldr	r3, [r1, r3]
1a0014a0:	b93b      	cbnz	r3, 1a0014b2 <xTaskPriorityDisinherit+0x72>
1a0014a2:	2301      	movs	r3, #1
1a0014a4:	fa03 f202 	lsl.w	r2, r3, r2
1a0014a8:	4911      	ldr	r1, [pc, #68]	; (1a0014f0 <xTaskPriorityDisinherit+0xb0>)
1a0014aa:	680b      	ldr	r3, [r1, #0]
1a0014ac:	ea23 0302 	bic.w	r3, r3, r2
1a0014b0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0014b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0014b4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014b6:	f1c3 0207 	rsb	r2, r3, #7
1a0014ba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0014bc:	2401      	movs	r4, #1
1a0014be:	fa04 f203 	lsl.w	r2, r4, r3
1a0014c2:	490b      	ldr	r1, [pc, #44]	; (1a0014f0 <xTaskPriorityDisinherit+0xb0>)
1a0014c4:	6808      	ldr	r0, [r1, #0]
1a0014c6:	4302      	orrs	r2, r0
1a0014c8:	600a      	str	r2, [r1, #0]
1a0014ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014ce:	009a      	lsls	r2, r3, #2
1a0014d0:	4629      	mov	r1, r5
1a0014d2:	4806      	ldr	r0, [pc, #24]	; (1a0014ec <xTaskPriorityDisinherit+0xac>)
1a0014d4:	4410      	add	r0, r2
1a0014d6:	f000 f84d 	bl	1a001574 <vListInsertEnd>
					xReturn = pdTRUE;
1a0014da:	4620      	mov	r0, r4
1a0014dc:	e7d4      	b.n	1a001488 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a0014de:	2000      	movs	r0, #0
	}
1a0014e0:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0014e2:	2000      	movs	r0, #0
1a0014e4:	e7d0      	b.n	1a001488 <xTaskPriorityDisinherit+0x48>
1a0014e6:	bf00      	nop
1a0014e8:	100020f0 	.word	0x100020f0
1a0014ec:	100020fc 	.word	0x100020fc
1a0014f0:	1000219c 	.word	0x1000219c

1a0014f4 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0014f4:	b510      	push	{r4, lr}
1a0014f6:	b082      	sub	sp, #8
1a0014f8:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0014fa:	9001      	str	r0, [sp, #4]
1a0014fc:	2300      	movs	r3, #0
1a0014fe:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001500:	f000 fc08 	bl	1a001d14 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001504:	9901      	ldr	r1, [sp, #4]
1a001506:	4622      	mov	r2, r4
1a001508:	4804      	ldr	r0, [pc, #16]	; (1a00151c <vAssertCalled+0x28>)
1a00150a:	f003 fa77 	bl	1a0049fc <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00150e:	9b00      	ldr	r3, [sp, #0]
1a001510:	2b00      	cmp	r3, #0
1a001512:	d0fc      	beq.n	1a00150e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001514:	f000 fc20 	bl	1a001d58 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001518:	b002      	add	sp, #8
1a00151a:	bd10      	pop	{r4, pc}
1a00151c:	1a004f8c 	.word	0x1a004f8c

1a001520 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001520:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001522:	4804      	ldr	r0, [pc, #16]	; (1a001534 <vApplicationMallocFailedHook+0x14>)
1a001524:	f003 faf0 	bl	1a004b08 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001528:	4903      	ldr	r1, [pc, #12]	; (1a001538 <vApplicationMallocFailedHook+0x18>)
1a00152a:	202c      	movs	r0, #44	; 0x2c
1a00152c:	f7ff ffe2 	bl	1a0014f4 <vAssertCalled>
}
1a001530:	bd08      	pop	{r3, pc}
1a001532:	bf00      	nop
1a001534:	1a004f18 	.word	0x1a004f18
1a001538:	1a004f3c 	.word	0x1a004f3c

1a00153c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a00153c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00153e:	4804      	ldr	r0, [pc, #16]	; (1a001550 <vApplicationStackOverflowHook+0x14>)
1a001540:	f003 fa5c 	bl	1a0049fc <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001544:	4903      	ldr	r1, [pc, #12]	; (1a001554 <vApplicationStackOverflowHook+0x18>)
1a001546:	2050      	movs	r0, #80	; 0x50
1a001548:	f7ff ffd4 	bl	1a0014f4 <vAssertCalled>
}
1a00154c:	bd08      	pop	{r3, pc}
1a00154e:	bf00      	nop
1a001550:	1a004f5c 	.word	0x1a004f5c
1a001554:	1a004f3c 	.word	0x1a004f3c

1a001558 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001558:	f100 0308 	add.w	r3, r0, #8
1a00155c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00155e:	f04f 32ff 	mov.w	r2, #4294967295
1a001562:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001564:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001566:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001568:	2300      	movs	r3, #0
1a00156a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00156c:	4770      	bx	lr

1a00156e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00156e:	2300      	movs	r3, #0
1a001570:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001572:	4770      	bx	lr

1a001574 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001574:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001576:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001578:	689a      	ldr	r2, [r3, #8]
1a00157a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00157c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00157e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001580:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001582:	6803      	ldr	r3, [r0, #0]
1a001584:	3301      	adds	r3, #1
1a001586:	6003      	str	r3, [r0, #0]
}
1a001588:	4770      	bx	lr

1a00158a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00158a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00158c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00158e:	f1b5 3fff 	cmp.w	r5, #4294967295
1a001592:	d002      	beq.n	1a00159a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001594:	f100 0208 	add.w	r2, r0, #8
1a001598:	e002      	b.n	1a0015a0 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00159a:	6902      	ldr	r2, [r0, #16]
1a00159c:	e004      	b.n	1a0015a8 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00159e:	461a      	mov	r2, r3
1a0015a0:	6853      	ldr	r3, [r2, #4]
1a0015a2:	681c      	ldr	r4, [r3, #0]
1a0015a4:	42ac      	cmp	r4, r5
1a0015a6:	d9fa      	bls.n	1a00159e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0015a8:	6853      	ldr	r3, [r2, #4]
1a0015aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0015ac:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0015ae:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0015b0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0015b2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0015b4:	6803      	ldr	r3, [r0, #0]
1a0015b6:	3301      	adds	r3, #1
1a0015b8:	6003      	str	r3, [r0, #0]
}
1a0015ba:	bc30      	pop	{r4, r5}
1a0015bc:	4770      	bx	lr

1a0015be <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0015be:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0015c0:	6841      	ldr	r1, [r0, #4]
1a0015c2:	6882      	ldr	r2, [r0, #8]
1a0015c4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0015c6:	6841      	ldr	r1, [r0, #4]
1a0015c8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0015ca:	685a      	ldr	r2, [r3, #4]
1a0015cc:	4282      	cmp	r2, r0
1a0015ce:	d006      	beq.n	1a0015de <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0015d0:	2200      	movs	r2, #0
1a0015d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0015d4:	681a      	ldr	r2, [r3, #0]
1a0015d6:	3a01      	subs	r2, #1
1a0015d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0015da:	6818      	ldr	r0, [r3, #0]
}
1a0015dc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0015de:	6882      	ldr	r2, [r0, #8]
1a0015e0:	605a      	str	r2, [r3, #4]
1a0015e2:	e7f5      	b.n	1a0015d0 <uxListRemove+0x12>

1a0015e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0015e4:	b510      	push	{r4, lr}
1a0015e6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0015e8:	f000 fb94 	bl	1a001d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0015ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0015ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0015f0:	429a      	cmp	r2, r3
1a0015f2:	d004      	beq.n	1a0015fe <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0015f4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0015f6:	f000 fbaf 	bl	1a001d58 <vPortExitCritical>

	return xReturn;
}
1a0015fa:	4620      	mov	r0, r4
1a0015fc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0015fe:	2401      	movs	r4, #1
1a001600:	e7f9      	b.n	1a0015f6 <prvIsQueueFull+0x12>

1a001602 <prvIsQueueEmpty>:
{
1a001602:	b510      	push	{r4, lr}
1a001604:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001606:	f000 fb85 	bl	1a001d14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00160a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00160c:	b923      	cbnz	r3, 1a001618 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a00160e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a001610:	f000 fba2 	bl	1a001d58 <vPortExitCritical>
}
1a001614:	4620      	mov	r0, r4
1a001616:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a001618:	2400      	movs	r4, #0
1a00161a:	e7f9      	b.n	1a001610 <prvIsQueueEmpty+0xe>

1a00161c <prvCopyDataToQueue>:
{
1a00161c:	b570      	push	{r4, r5, r6, lr}
1a00161e:	4604      	mov	r4, r0
1a001620:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001622:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001624:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001626:	b95a      	cbnz	r2, 1a001640 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001628:	6803      	ldr	r3, [r0, #0]
1a00162a:	b11b      	cbz	r3, 1a001634 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00162c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00162e:	3501      	adds	r5, #1
1a001630:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a001632:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001634:	6840      	ldr	r0, [r0, #4]
1a001636:	f7ff ff03 	bl	1a001440 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00163a:	2300      	movs	r3, #0
1a00163c:	6063      	str	r3, [r4, #4]
1a00163e:	e7f6      	b.n	1a00162e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a001640:	b96e      	cbnz	r6, 1a00165e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a001642:	6880      	ldr	r0, [r0, #8]
1a001644:	f002 fe3f 	bl	1a0042c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a001648:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00164a:	68a3      	ldr	r3, [r4, #8]
1a00164c:	4413      	add	r3, r2
1a00164e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001650:	6862      	ldr	r2, [r4, #4]
1a001652:	4293      	cmp	r3, r2
1a001654:	d319      	bcc.n	1a00168a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a001656:	6823      	ldr	r3, [r4, #0]
1a001658:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00165a:	2000      	movs	r0, #0
1a00165c:	e7e7      	b.n	1a00162e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00165e:	68c0      	ldr	r0, [r0, #12]
1a001660:	f002 fe31 	bl	1a0042c6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001664:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001666:	4252      	negs	r2, r2
1a001668:	68e3      	ldr	r3, [r4, #12]
1a00166a:	4413      	add	r3, r2
1a00166c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00166e:	6821      	ldr	r1, [r4, #0]
1a001670:	428b      	cmp	r3, r1
1a001672:	d202      	bcs.n	1a00167a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001674:	6863      	ldr	r3, [r4, #4]
1a001676:	441a      	add	r2, r3
1a001678:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00167a:	2e02      	cmp	r6, #2
1a00167c:	d001      	beq.n	1a001682 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00167e:	2000      	movs	r0, #0
1a001680:	e7d5      	b.n	1a00162e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001682:	b125      	cbz	r5, 1a00168e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001684:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001686:	2000      	movs	r0, #0
1a001688:	e7d1      	b.n	1a00162e <prvCopyDataToQueue+0x12>
1a00168a:	2000      	movs	r0, #0
1a00168c:	e7cf      	b.n	1a00162e <prvCopyDataToQueue+0x12>
1a00168e:	2000      	movs	r0, #0
1a001690:	e7cd      	b.n	1a00162e <prvCopyDataToQueue+0x12>

1a001692 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001692:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001694:	b172      	cbz	r2, 1a0016b4 <prvCopyDataFromQueue+0x22>
{
1a001696:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001698:	68c3      	ldr	r3, [r0, #12]
1a00169a:	4413      	add	r3, r2
1a00169c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00169e:	6844      	ldr	r4, [r0, #4]
1a0016a0:	42a3      	cmp	r3, r4
1a0016a2:	d301      	bcc.n	1a0016a8 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0016a4:	6803      	ldr	r3, [r0, #0]
1a0016a6:	60c3      	str	r3, [r0, #12]
1a0016a8:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0016aa:	68c1      	ldr	r1, [r0, #12]
1a0016ac:	4620      	mov	r0, r4
1a0016ae:	f002 fe0a 	bl	1a0042c6 <memcpy>
}
1a0016b2:	bd10      	pop	{r4, pc}
1a0016b4:	4770      	bx	lr

1a0016b6 <prvUnlockQueue>:
{
1a0016b6:	b538      	push	{r3, r4, r5, lr}
1a0016b8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0016ba:	f000 fb2b 	bl	1a001d14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0016be:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0016c2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0016c4:	e003      	b.n	1a0016ce <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0016c6:	f7ff fea5 	bl	1a001414 <vTaskMissedYield>
			--cTxLock;
1a0016ca:	3c01      	subs	r4, #1
1a0016cc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0016ce:	2c00      	cmp	r4, #0
1a0016d0:	dd08      	ble.n	1a0016e4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0016d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0016d4:	b133      	cbz	r3, 1a0016e4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0016d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0016da:	f7ff fe07 	bl	1a0012ec <xTaskRemoveFromEventList>
1a0016de:	2800      	cmp	r0, #0
1a0016e0:	d0f3      	beq.n	1a0016ca <prvUnlockQueue+0x14>
1a0016e2:	e7f0      	b.n	1a0016c6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0016e4:	23ff      	movs	r3, #255	; 0xff
1a0016e6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0016ea:	f000 fb35 	bl	1a001d58 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0016ee:	f000 fb11 	bl	1a001d14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0016f2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0016f6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0016f8:	e003      	b.n	1a001702 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0016fa:	f7ff fe8b 	bl	1a001414 <vTaskMissedYield>
				--cRxLock;
1a0016fe:	3c01      	subs	r4, #1
1a001700:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001702:	2c00      	cmp	r4, #0
1a001704:	dd08      	ble.n	1a001718 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001706:	692b      	ldr	r3, [r5, #16]
1a001708:	b133      	cbz	r3, 1a001718 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00170a:	f105 0010 	add.w	r0, r5, #16
1a00170e:	f7ff fded 	bl	1a0012ec <xTaskRemoveFromEventList>
1a001712:	2800      	cmp	r0, #0
1a001714:	d0f3      	beq.n	1a0016fe <prvUnlockQueue+0x48>
1a001716:	e7f0      	b.n	1a0016fa <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001718:	23ff      	movs	r3, #255	; 0xff
1a00171a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00171e:	f000 fb1b 	bl	1a001d58 <vPortExitCritical>
}
1a001722:	bd38      	pop	{r3, r4, r5, pc}

1a001724 <xQueueGenericReset>:
{
1a001724:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a001726:	b1e0      	cbz	r0, 1a001762 <xQueueGenericReset+0x3e>
1a001728:	4604      	mov	r4, r0
1a00172a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00172c:	f000 faf2 	bl	1a001d14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001730:	6821      	ldr	r1, [r4, #0]
1a001732:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001734:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001736:	fb03 1002 	mla	r0, r3, r2, r1
1a00173a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00173c:	2000      	movs	r0, #0
1a00173e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001740:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001742:	3a01      	subs	r2, #1
1a001744:	fb02 1303 	mla	r3, r2, r3, r1
1a001748:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00174a:	23ff      	movs	r3, #255	; 0xff
1a00174c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001754:	b9ed      	cbnz	r5, 1a001792 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001756:	6923      	ldr	r3, [r4, #16]
1a001758:	b963      	cbnz	r3, 1a001774 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00175a:	f000 fafd 	bl	1a001d58 <vPortExitCritical>
}
1a00175e:	2001      	movs	r0, #1
1a001760:	bd38      	pop	{r3, r4, r5, pc}
1a001762:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001766:	f383 8811 	msr	BASEPRI, r3
1a00176a:	f3bf 8f6f 	isb	sy
1a00176e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001772:	e7fe      	b.n	1a001772 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001774:	f104 0010 	add.w	r0, r4, #16
1a001778:	f7ff fdb8 	bl	1a0012ec <xTaskRemoveFromEventList>
1a00177c:	2800      	cmp	r0, #0
1a00177e:	d0ec      	beq.n	1a00175a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a001780:	4b08      	ldr	r3, [pc, #32]	; (1a0017a4 <xQueueGenericReset+0x80>)
1a001782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001786:	601a      	str	r2, [r3, #0]
1a001788:	f3bf 8f4f 	dsb	sy
1a00178c:	f3bf 8f6f 	isb	sy
1a001790:	e7e3      	b.n	1a00175a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001792:	f104 0010 	add.w	r0, r4, #16
1a001796:	f7ff fedf 	bl	1a001558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00179a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00179e:	f7ff fedb 	bl	1a001558 <vListInitialise>
1a0017a2:	e7da      	b.n	1a00175a <xQueueGenericReset+0x36>
1a0017a4:	e000ed04 	.word	0xe000ed04

1a0017a8 <prvInitialiseNewQueue>:
{
1a0017a8:	b538      	push	{r3, r4, r5, lr}
1a0017aa:	461d      	mov	r5, r3
1a0017ac:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0017ae:	460b      	mov	r3, r1
1a0017b0:	b949      	cbnz	r1, 1a0017c6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0017b2:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0017b4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0017b6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0017b8:	2101      	movs	r1, #1
1a0017ba:	4620      	mov	r0, r4
1a0017bc:	f7ff ffb2 	bl	1a001724 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0017c0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0017c4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0017c6:	6022      	str	r2, [r4, #0]
1a0017c8:	e7f4      	b.n	1a0017b4 <prvInitialiseNewQueue+0xc>

1a0017ca <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0017ca:	b940      	cbnz	r0, 1a0017de <xQueueGenericCreate+0x14>
1a0017cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017d0:	f383 8811 	msr	BASEPRI, r3
1a0017d4:	f3bf 8f6f 	isb	sy
1a0017d8:	f3bf 8f4f 	dsb	sy
1a0017dc:	e7fe      	b.n	1a0017dc <xQueueGenericCreate+0x12>
	{
1a0017de:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0017e0:	b083      	sub	sp, #12
1a0017e2:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0017e4:	b199      	cbz	r1, 1a00180e <xQueueGenericCreate+0x44>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017e6:	fb01 f000 	mul.w	r0, r1, r0
1a0017ea:	4617      	mov	r7, r2
1a0017ec:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0017ee:	3050      	adds	r0, #80	; 0x50
1a0017f0:	f7fe ff72 	bl	1a0006d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0017f4:	4606      	mov	r6, r0
1a0017f6:	b138      	cbz	r0, 1a001808 <xQueueGenericCreate+0x3e>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0017f8:	9000      	str	r0, [sp, #0]
1a0017fa:	463b      	mov	r3, r7
1a0017fc:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001800:	4621      	mov	r1, r4
1a001802:	4628      	mov	r0, r5
1a001804:	f7ff ffd0 	bl	1a0017a8 <prvInitialiseNewQueue>
	}
1a001808:	4630      	mov	r0, r6
1a00180a:	b003      	add	sp, #12
1a00180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a00180e:	2000      	movs	r0, #0
1a001810:	e7eb      	b.n	1a0017ea <xQueueGenericCreate+0x20>
1a001812:	Address 0x1a001812 is out of bounds.


1a001814 <xQueueGenericSend>:
{
1a001814:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001816:	b085      	sub	sp, #20
1a001818:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00181a:	b178      	cbz	r0, 1a00183c <xQueueGenericSend+0x28>
1a00181c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00181e:	b1b1      	cbz	r1, 1a00184e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001820:	2b02      	cmp	r3, #2
1a001822:	d120      	bne.n	1a001866 <xQueueGenericSend+0x52>
1a001824:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001826:	2a01      	cmp	r2, #1
1a001828:	d01d      	beq.n	1a001866 <xQueueGenericSend+0x52>
1a00182a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00182e:	f383 8811 	msr	BASEPRI, r3
1a001832:	f3bf 8f6f 	isb	sy
1a001836:	f3bf 8f4f 	dsb	sy
1a00183a:	e7fe      	b.n	1a00183a <xQueueGenericSend+0x26>
1a00183c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001840:	f383 8811 	msr	BASEPRI, r3
1a001844:	f3bf 8f6f 	isb	sy
1a001848:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a00184c:	e7fe      	b.n	1a00184c <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00184e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001850:	2a00      	cmp	r2, #0
1a001852:	d0e5      	beq.n	1a001820 <xQueueGenericSend+0xc>
1a001854:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001858:	f383 8811 	msr	BASEPRI, r3
1a00185c:	f3bf 8f6f 	isb	sy
1a001860:	f3bf 8f4f 	dsb	sy
1a001864:	e7fe      	b.n	1a001864 <xQueueGenericSend+0x50>
1a001866:	461e      	mov	r6, r3
1a001868:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00186a:	f7ff fdd9 	bl	1a001420 <xTaskGetSchedulerState>
1a00186e:	b950      	cbnz	r0, 1a001886 <xQueueGenericSend+0x72>
1a001870:	9b01      	ldr	r3, [sp, #4]
1a001872:	b153      	cbz	r3, 1a00188a <xQueueGenericSend+0x76>
1a001874:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001878:	f383 8811 	msr	BASEPRI, r3
1a00187c:	f3bf 8f6f 	isb	sy
1a001880:	f3bf 8f4f 	dsb	sy
1a001884:	e7fe      	b.n	1a001884 <xQueueGenericSend+0x70>
1a001886:	2500      	movs	r5, #0
1a001888:	e03b      	b.n	1a001902 <xQueueGenericSend+0xee>
1a00188a:	2500      	movs	r5, #0
1a00188c:	e039      	b.n	1a001902 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00188e:	4632      	mov	r2, r6
1a001890:	4639      	mov	r1, r7
1a001892:	4620      	mov	r0, r4
1a001894:	f7ff fec2 	bl	1a00161c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001898:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00189a:	b96b      	cbnz	r3, 1a0018b8 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a00189c:	b138      	cbz	r0, 1a0018ae <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a00189e:	4b3c      	ldr	r3, [pc, #240]	; (1a001990 <xQueueGenericSend+0x17c>)
1a0018a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018a4:	601a      	str	r2, [r3, #0]
1a0018a6:	f3bf 8f4f 	dsb	sy
1a0018aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0018ae:	f000 fa53 	bl	1a001d58 <vPortExitCritical>
				return pdPASS;
1a0018b2:	2001      	movs	r0, #1
}
1a0018b4:	b005      	add	sp, #20
1a0018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0018b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0018bc:	f7ff fd16 	bl	1a0012ec <xTaskRemoveFromEventList>
1a0018c0:	2800      	cmp	r0, #0
1a0018c2:	d0f4      	beq.n	1a0018ae <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a0018c4:	4b32      	ldr	r3, [pc, #200]	; (1a001990 <xQueueGenericSend+0x17c>)
1a0018c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018ca:	601a      	str	r2, [r3, #0]
1a0018cc:	f3bf 8f4f 	dsb	sy
1a0018d0:	f3bf 8f6f 	isb	sy
1a0018d4:	e7eb      	b.n	1a0018ae <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a0018d6:	f000 fa3f 	bl	1a001d58 <vPortExitCritical>
					return errQUEUE_FULL;
1a0018da:	2000      	movs	r0, #0
1a0018dc:	e7ea      	b.n	1a0018b4 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0018de:	a802      	add	r0, sp, #8
1a0018e0:	f7ff fd4a 	bl	1a001378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0018e4:	2501      	movs	r5, #1
1a0018e6:	e019      	b.n	1a00191c <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a0018e8:	2300      	movs	r3, #0
1a0018ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0018ee:	e021      	b.n	1a001934 <xQueueGenericSend+0x120>
1a0018f0:	2300      	movs	r3, #0
1a0018f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0018f6:	e023      	b.n	1a001940 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a0018f8:	4620      	mov	r0, r4
1a0018fa:	f7ff fedc 	bl	1a0016b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0018fe:	f7ff fbb7 	bl	1a001070 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001902:	f000 fa07 	bl	1a001d14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00190a:	429a      	cmp	r2, r3
1a00190c:	d3bf      	bcc.n	1a00188e <xQueueGenericSend+0x7a>
1a00190e:	2e02      	cmp	r6, #2
1a001910:	d0bd      	beq.n	1a00188e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001912:	9b01      	ldr	r3, [sp, #4]
1a001914:	2b00      	cmp	r3, #0
1a001916:	d0de      	beq.n	1a0018d6 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a001918:	2d00      	cmp	r5, #0
1a00191a:	d0e0      	beq.n	1a0018de <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a00191c:	f000 fa1c 	bl	1a001d58 <vPortExitCritical>
		vTaskSuspendAll();
1a001920:	f7ff fb0c 	bl	1a000f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001924:	f000 f9f6 	bl	1a001d14 <vPortEnterCritical>
1a001928:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00192c:	b25b      	sxtb	r3, r3
1a00192e:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001932:	d0d9      	beq.n	1a0018e8 <xQueueGenericSend+0xd4>
1a001934:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001938:	b25b      	sxtb	r3, r3
1a00193a:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00193e:	d0d7      	beq.n	1a0018f0 <xQueueGenericSend+0xdc>
1a001940:	f000 fa0a 	bl	1a001d58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001944:	a901      	add	r1, sp, #4
1a001946:	a802      	add	r0, sp, #8
1a001948:	f7ff fd22 	bl	1a001390 <xTaskCheckForTimeOut>
1a00194c:	b9c8      	cbnz	r0, 1a001982 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00194e:	4620      	mov	r0, r4
1a001950:	f7ff fe48 	bl	1a0015e4 <prvIsQueueFull>
1a001954:	2800      	cmp	r0, #0
1a001956:	d0cf      	beq.n	1a0018f8 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001958:	9901      	ldr	r1, [sp, #4]
1a00195a:	f104 0010 	add.w	r0, r4, #16
1a00195e:	f7ff fc91 	bl	1a001284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001962:	4620      	mov	r0, r4
1a001964:	f7ff fea7 	bl	1a0016b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001968:	f7ff fb82 	bl	1a001070 <xTaskResumeAll>
1a00196c:	2800      	cmp	r0, #0
1a00196e:	d1c8      	bne.n	1a001902 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a001970:	4b07      	ldr	r3, [pc, #28]	; (1a001990 <xQueueGenericSend+0x17c>)
1a001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001976:	601a      	str	r2, [r3, #0]
1a001978:	f3bf 8f4f 	dsb	sy
1a00197c:	f3bf 8f6f 	isb	sy
1a001980:	e7bf      	b.n	1a001902 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a001982:	4620      	mov	r0, r4
1a001984:	f7ff fe97 	bl	1a0016b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001988:	f7ff fb72 	bl	1a001070 <xTaskResumeAll>
			return errQUEUE_FULL;
1a00198c:	2000      	movs	r0, #0
1a00198e:	e791      	b.n	1a0018b4 <xQueueGenericSend+0xa0>
1a001990:	e000ed04 	.word	0xe000ed04

1a001994 <xQueueGenericSendFromISR>:
{
1a001994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001998:	b178      	cbz	r0, 1a0019ba <xQueueGenericSendFromISR+0x26>
1a00199a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00199c:	b1b1      	cbz	r1, 1a0019cc <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00199e:	2b02      	cmp	r3, #2
1a0019a0:	d120      	bne.n	1a0019e4 <xQueueGenericSendFromISR+0x50>
1a0019a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0019a4:	2801      	cmp	r0, #1
1a0019a6:	d01d      	beq.n	1a0019e4 <xQueueGenericSendFromISR+0x50>
1a0019a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ac:	f383 8811 	msr	BASEPRI, r3
1a0019b0:	f3bf 8f6f 	isb	sy
1a0019b4:	f3bf 8f4f 	dsb	sy
1a0019b8:	e7fe      	b.n	1a0019b8 <xQueueGenericSendFromISR+0x24>
1a0019ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019be:	f383 8811 	msr	BASEPRI, r3
1a0019c2:	f3bf 8f6f 	isb	sy
1a0019c6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0019ca:	e7fe      	b.n	1a0019ca <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0019cc:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0019ce:	2800      	cmp	r0, #0
1a0019d0:	d0e5      	beq.n	1a00199e <xQueueGenericSendFromISR+0xa>
1a0019d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019d6:	f383 8811 	msr	BASEPRI, r3
1a0019da:	f3bf 8f6f 	isb	sy
1a0019de:	f3bf 8f4f 	dsb	sy
1a0019e2:	e7fe      	b.n	1a0019e2 <xQueueGenericSendFromISR+0x4e>
1a0019e4:	461f      	mov	r7, r3
1a0019e6:	4690      	mov	r8, r2
1a0019e8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0019ea:	f000 fabd 	bl	1a001f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0019ee:	f3ef 8611 	mrs	r6, BASEPRI
1a0019f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019f6:	f383 8811 	msr	BASEPRI, r3
1a0019fa:	f3bf 8f6f 	isb	sy
1a0019fe:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001a02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001a04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001a06:	429a      	cmp	r2, r3
1a001a08:	d306      	bcc.n	1a001a18 <xQueueGenericSendFromISR+0x84>
1a001a0a:	2f02      	cmp	r7, #2
1a001a0c:	d004      	beq.n	1a001a18 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a001a0e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001a10:	f386 8811 	msr	BASEPRI, r6
}
1a001a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a001a18:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001a1c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001a1e:	463a      	mov	r2, r7
1a001a20:	4649      	mov	r1, r9
1a001a22:	4620      	mov	r0, r4
1a001a24:	f7ff fdfa 	bl	1a00161c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001a28:	f1b5 3fff 	cmp.w	r5, #4294967295
1a001a2c:	d005      	beq.n	1a001a3a <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001a2e:	1c6b      	adds	r3, r5, #1
1a001a30:	b25b      	sxtb	r3, r3
1a001a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001a36:	2001      	movs	r0, #1
1a001a38:	e7ea      	b.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a3c:	b90b      	cbnz	r3, 1a001a42 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a001a3e:	2001      	movs	r0, #1
1a001a40:	e7e6      	b.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001a42:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a46:	f7ff fc51 	bl	1a0012ec <xTaskRemoveFromEventList>
1a001a4a:	b130      	cbz	r0, 1a001a5a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a001a4c:	f1b8 0f00 	cmp.w	r8, #0
1a001a50:	d005      	beq.n	1a001a5e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001a52:	2001      	movs	r0, #1
1a001a54:	f8c8 0000 	str.w	r0, [r8]
1a001a58:	e7da      	b.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a001a5a:	2001      	movs	r0, #1
1a001a5c:	e7d8      	b.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
1a001a5e:	2001      	movs	r0, #1
1a001a60:	e7d6      	b.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
1a001a62:	Address 0x1a001a62 is out of bounds.


1a001a64 <xQueueReceive>:
{
1a001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a66:	b085      	sub	sp, #20
1a001a68:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001a6a:	b180      	cbz	r0, 1a001a8e <xQueueReceive+0x2a>
1a001a6c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001a6e:	b1b9      	cbz	r1, 1a001aa0 <xQueueReceive+0x3c>
1a001a70:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001a72:	f7ff fcd5 	bl	1a001420 <xTaskGetSchedulerState>
1a001a76:	b9f8      	cbnz	r0, 1a001ab8 <xQueueReceive+0x54>
1a001a78:	9b01      	ldr	r3, [sp, #4]
1a001a7a:	b1fb      	cbz	r3, 1a001abc <xQueueReceive+0x58>
	__asm volatile
1a001a7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a80:	f383 8811 	msr	BASEPRI, r3
1a001a84:	f3bf 8f6f 	isb	sy
1a001a88:	f3bf 8f4f 	dsb	sy
1a001a8c:	e7fe      	b.n	1a001a8c <xQueueReceive+0x28>
1a001a8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a92:	f383 8811 	msr	BASEPRI, r3
1a001a96:	f3bf 8f6f 	isb	sy
1a001a9a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a001a9e:	e7fe      	b.n	1a001a9e <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001aa0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001aa2:	2b00      	cmp	r3, #0
1a001aa4:	d0e4      	beq.n	1a001a70 <xQueueReceive+0xc>
1a001aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aaa:	f383 8811 	msr	BASEPRI, r3
1a001aae:	f3bf 8f6f 	isb	sy
1a001ab2:	f3bf 8f4f 	dsb	sy
1a001ab6:	e7fe      	b.n	1a001ab6 <xQueueReceive+0x52>
1a001ab8:	2600      	movs	r6, #0
1a001aba:	e03e      	b.n	1a001b3a <xQueueReceive+0xd6>
1a001abc:	2600      	movs	r6, #0
1a001abe:	e03c      	b.n	1a001b3a <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001ac0:	4639      	mov	r1, r7
1a001ac2:	4620      	mov	r0, r4
1a001ac4:	f7ff fde5 	bl	1a001692 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001ac8:	3d01      	subs	r5, #1
1a001aca:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001acc:	6923      	ldr	r3, [r4, #16]
1a001ace:	b923      	cbnz	r3, 1a001ada <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a001ad0:	f000 f942 	bl	1a001d58 <vPortExitCritical>
				return pdPASS;
1a001ad4:	2001      	movs	r0, #1
}
1a001ad6:	b005      	add	sp, #20
1a001ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001ada:	f104 0010 	add.w	r0, r4, #16
1a001ade:	f7ff fc05 	bl	1a0012ec <xTaskRemoveFromEventList>
1a001ae2:	2800      	cmp	r0, #0
1a001ae4:	d0f4      	beq.n	1a001ad0 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a001ae6:	4b35      	ldr	r3, [pc, #212]	; (1a001bbc <xQueueReceive+0x158>)
1a001ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001aec:	601a      	str	r2, [r3, #0]
1a001aee:	f3bf 8f4f 	dsb	sy
1a001af2:	f3bf 8f6f 	isb	sy
1a001af6:	e7eb      	b.n	1a001ad0 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a001af8:	f000 f92e 	bl	1a001d58 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001afc:	2000      	movs	r0, #0
1a001afe:	e7ea      	b.n	1a001ad6 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001b00:	a802      	add	r0, sp, #8
1a001b02:	f7ff fc39 	bl	1a001378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001b06:	2601      	movs	r6, #1
1a001b08:	e021      	b.n	1a001b4e <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a001b0a:	2300      	movs	r3, #0
1a001b0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001b10:	e029      	b.n	1a001b66 <xQueueReceive+0x102>
1a001b12:	2300      	movs	r3, #0
1a001b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001b18:	e02b      	b.n	1a001b72 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a001b1a:	4620      	mov	r0, r4
1a001b1c:	f7ff fdcb 	bl	1a0016b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001b20:	f7ff faa6 	bl	1a001070 <xTaskResumeAll>
1a001b24:	e009      	b.n	1a001b3a <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a001b26:	4620      	mov	r0, r4
1a001b28:	f7ff fdc5 	bl	1a0016b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001b2c:	f7ff faa0 	bl	1a001070 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b30:	4620      	mov	r0, r4
1a001b32:	f7ff fd66 	bl	1a001602 <prvIsQueueEmpty>
1a001b36:	2800      	cmp	r0, #0
1a001b38:	d13d      	bne.n	1a001bb6 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001b3a:	f000 f8eb 	bl	1a001d14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001b3e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001b40:	2d00      	cmp	r5, #0
1a001b42:	d1bd      	bne.n	1a001ac0 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001b44:	9b01      	ldr	r3, [sp, #4]
1a001b46:	2b00      	cmp	r3, #0
1a001b48:	d0d6      	beq.n	1a001af8 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001b4a:	2e00      	cmp	r6, #0
1a001b4c:	d0d8      	beq.n	1a001b00 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a001b4e:	f000 f903 	bl	1a001d58 <vPortExitCritical>
		vTaskSuspendAll();
1a001b52:	f7ff f9f3 	bl	1a000f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001b56:	f000 f8dd 	bl	1a001d14 <vPortEnterCritical>
1a001b5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001b5e:	b25b      	sxtb	r3, r3
1a001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001b64:	d0d1      	beq.n	1a001b0a <xQueueReceive+0xa6>
1a001b66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001b6a:	b25b      	sxtb	r3, r3
1a001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001b70:	d0cf      	beq.n	1a001b12 <xQueueReceive+0xae>
1a001b72:	f000 f8f1 	bl	1a001d58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001b76:	a901      	add	r1, sp, #4
1a001b78:	a802      	add	r0, sp, #8
1a001b7a:	f7ff fc09 	bl	1a001390 <xTaskCheckForTimeOut>
1a001b7e:	2800      	cmp	r0, #0
1a001b80:	d1d1      	bne.n	1a001b26 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b82:	4620      	mov	r0, r4
1a001b84:	f7ff fd3d 	bl	1a001602 <prvIsQueueEmpty>
1a001b88:	2800      	cmp	r0, #0
1a001b8a:	d0c6      	beq.n	1a001b1a <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001b8c:	9901      	ldr	r1, [sp, #4]
1a001b8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b92:	f7ff fb77 	bl	1a001284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001b96:	4620      	mov	r0, r4
1a001b98:	f7ff fd8d 	bl	1a0016b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001b9c:	f7ff fa68 	bl	1a001070 <xTaskResumeAll>
1a001ba0:	2800      	cmp	r0, #0
1a001ba2:	d1ca      	bne.n	1a001b3a <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001ba4:	4b05      	ldr	r3, [pc, #20]	; (1a001bbc <xQueueReceive+0x158>)
1a001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001baa:	601a      	str	r2, [r3, #0]
1a001bac:	f3bf 8f4f 	dsb	sy
1a001bb0:	f3bf 8f6f 	isb	sy
1a001bb4:	e7c1      	b.n	1a001b3a <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a001bb6:	2000      	movs	r0, #0
1a001bb8:	e78d      	b.n	1a001ad6 <xQueueReceive+0x72>
1a001bba:	bf00      	nop
1a001bbc:	e000ed04 	.word	0xe000ed04

1a001bc0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001bc0:	2300      	movs	r3, #0
1a001bc2:	2b07      	cmp	r3, #7
1a001bc4:	d80c      	bhi.n	1a001be0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001bc6:	4a07      	ldr	r2, [pc, #28]	; (1a001be4 <vQueueAddToRegistry+0x24>)
1a001bc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001bcc:	b10a      	cbz	r2, 1a001bd2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001bce:	3301      	adds	r3, #1
1a001bd0:	e7f7      	b.n	1a001bc2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001bd2:	4a04      	ldr	r2, [pc, #16]	; (1a001be4 <vQueueAddToRegistry+0x24>)
1a001bd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001bd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001bdc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001bde:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001be0:	4770      	bx	lr
1a001be2:	bf00      	nop
1a001be4:	100022d4 	.word	0x100022d4

1a001be8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001be8:	b570      	push	{r4, r5, r6, lr}
1a001bea:	4604      	mov	r4, r0
1a001bec:	460d      	mov	r5, r1
1a001bee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001bf0:	f000 f890 	bl	1a001d14 <vPortEnterCritical>
1a001bf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001bf8:	b25b      	sxtb	r3, r3
1a001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001bfe:	d00d      	beq.n	1a001c1c <vQueueWaitForMessageRestricted+0x34>
1a001c00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001c04:	b25b      	sxtb	r3, r3
1a001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001c0a:	d00b      	beq.n	1a001c24 <vQueueWaitForMessageRestricted+0x3c>
1a001c0c:	f000 f8a4 	bl	1a001d58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001c12:	b15b      	cbz	r3, 1a001c2c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001c14:	4620      	mov	r0, r4
1a001c16:	f7ff fd4e 	bl	1a0016b6 <prvUnlockQueue>
	}
1a001c1a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001c1c:	2300      	movs	r3, #0
1a001c1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001c22:	e7ed      	b.n	1a001c00 <vQueueWaitForMessageRestricted+0x18>
1a001c24:	2300      	movs	r3, #0
1a001c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c2a:	e7ef      	b.n	1a001c0c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001c2c:	4632      	mov	r2, r6
1a001c2e:	4629      	mov	r1, r5
1a001c30:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001c34:	f7ff fb3e 	bl	1a0012b4 <vTaskPlaceOnEventListRestricted>
1a001c38:	e7ec      	b.n	1a001c14 <vQueueWaitForMessageRestricted+0x2c>
1a001c3a:	Address 0x1a001c3a is out of bounds.


1a001c3c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001c3c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001c3e:	2300      	movs	r3, #0
1a001c40:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001c42:	4b0d      	ldr	r3, [pc, #52]	; (1a001c78 <prvTaskExitError+0x3c>)
1a001c44:	681b      	ldr	r3, [r3, #0]
1a001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001c4a:	d008      	beq.n	1a001c5e <prvTaskExitError+0x22>
1a001c4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c50:	f383 8811 	msr	BASEPRI, r3
1a001c54:	f3bf 8f6f 	isb	sy
1a001c58:	f3bf 8f4f 	dsb	sy
1a001c5c:	e7fe      	b.n	1a001c5c <prvTaskExitError+0x20>
1a001c5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c62:	f383 8811 	msr	BASEPRI, r3
1a001c66:	f3bf 8f6f 	isb	sy
1a001c6a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001c6e:	9b01      	ldr	r3, [sp, #4]
1a001c70:	2b00      	cmp	r3, #0
1a001c72:	d0fc      	beq.n	1a001c6e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001c74:	b002      	add	sp, #8
1a001c76:	4770      	bx	lr
1a001c78:	10000000 	.word	0x10000000

1a001c7c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001c7c:	4808      	ldr	r0, [pc, #32]	; (1a001ca0 <prvPortStartFirstTask+0x24>)
1a001c7e:	6800      	ldr	r0, [r0, #0]
1a001c80:	6800      	ldr	r0, [r0, #0]
1a001c82:	f380 8808 	msr	MSP, r0
1a001c86:	f04f 0000 	mov.w	r0, #0
1a001c8a:	f380 8814 	msr	CONTROL, r0
1a001c8e:	b662      	cpsie	i
1a001c90:	b661      	cpsie	f
1a001c92:	f3bf 8f4f 	dsb	sy
1a001c96:	f3bf 8f6f 	isb	sy
1a001c9a:	df00      	svc	0
1a001c9c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a001c9e:	0000      	.short	0x0000
1a001ca0:	e000ed08 	.word	0xe000ed08

1a001ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001cb4 <vPortEnableVFP+0x10>
1a001ca8:	6801      	ldr	r1, [r0, #0]
1a001caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001cae:	6001      	str	r1, [r0, #0]
1a001cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a001cb2:	0000      	.short	0x0000
1a001cb4:	e000ed88 	.word	0xe000ed88

1a001cb8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001cbc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001cc0:	f021 0101 	bic.w	r1, r1, #1
1a001cc4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001cc8:	4b05      	ldr	r3, [pc, #20]	; (1a001ce0 <pxPortInitialiseStack+0x28>)
1a001cca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001cce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001cd2:	f06f 0302 	mvn.w	r3, #2
1a001cd6:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001cda:	3844      	subs	r0, #68	; 0x44
1a001cdc:	4770      	bx	lr
1a001cde:	bf00      	nop
1a001ce0:	1a001c3d 	.word	0x1a001c3d
1a001ce4:	ffffffff 	.word	0xffffffff
1a001ce8:	ffffffff 	.word	0xffffffff
1a001cec:	ffffffff 	.word	0xffffffff

1a001cf0 <SVC_Handler>:
	__asm volatile (
1a001cf0:	4b07      	ldr	r3, [pc, #28]	; (1a001d10 <pxCurrentTCBConst2>)
1a001cf2:	6819      	ldr	r1, [r3, #0]
1a001cf4:	6808      	ldr	r0, [r1, #0]
1a001cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001cfa:	f380 8809 	msr	PSP, r0
1a001cfe:	f3bf 8f6f 	isb	sy
1a001d02:	f04f 0000 	mov.w	r0, #0
1a001d06:	f380 8811 	msr	BASEPRI, r0
1a001d0a:	4770      	bx	lr
1a001d0c:	f3af 8000 	nop.w

1a001d10 <pxCurrentTCBConst2>:
1a001d10:	100020f0 	.word	0x100020f0

1a001d14 <vPortEnterCritical>:
1a001d14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d18:	f383 8811 	msr	BASEPRI, r3
1a001d1c:	f3bf 8f6f 	isb	sy
1a001d20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001d24:	4a0a      	ldr	r2, [pc, #40]	; (1a001d50 <vPortEnterCritical+0x3c>)
1a001d26:	6813      	ldr	r3, [r2, #0]
1a001d28:	3301      	adds	r3, #1
1a001d2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001d2c:	2b01      	cmp	r3, #1
1a001d2e:	d000      	beq.n	1a001d32 <vPortEnterCritical+0x1e>
}
1a001d30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001d32:	4b08      	ldr	r3, [pc, #32]	; (1a001d54 <vPortEnterCritical+0x40>)
1a001d34:	681b      	ldr	r3, [r3, #0]
1a001d36:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001d3a:	d0f9      	beq.n	1a001d30 <vPortEnterCritical+0x1c>
1a001d3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d40:	f383 8811 	msr	BASEPRI, r3
1a001d44:	f3bf 8f6f 	isb	sy
1a001d48:	f3bf 8f4f 	dsb	sy
1a001d4c:	e7fe      	b.n	1a001d4c <vPortEnterCritical+0x38>
1a001d4e:	bf00      	nop
1a001d50:	10000000 	.word	0x10000000
1a001d54:	e000ed04 	.word	0xe000ed04

1a001d58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001d58:	4b09      	ldr	r3, [pc, #36]	; (1a001d80 <vPortExitCritical+0x28>)
1a001d5a:	681b      	ldr	r3, [r3, #0]
1a001d5c:	b943      	cbnz	r3, 1a001d70 <vPortExitCritical+0x18>
1a001d5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d62:	f383 8811 	msr	BASEPRI, r3
1a001d66:	f3bf 8f6f 	isb	sy
1a001d6a:	f3bf 8f4f 	dsb	sy
1a001d6e:	e7fe      	b.n	1a001d6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001d70:	3b01      	subs	r3, #1
1a001d72:	4a03      	ldr	r2, [pc, #12]	; (1a001d80 <vPortExitCritical+0x28>)
1a001d74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001d76:	b90b      	cbnz	r3, 1a001d7c <vPortExitCritical+0x24>
	__asm volatile
1a001d78:	f383 8811 	msr	BASEPRI, r3
}
1a001d7c:	4770      	bx	lr
1a001d7e:	bf00      	nop
1a001d80:	10000000 	.word	0x10000000
1a001d84:	ffffffff 	.word	0xffffffff
1a001d88:	ffffffff 	.word	0xffffffff
1a001d8c:	ffffffff 	.word	0xffffffff

1a001d90 <PendSV_Handler>:
	__asm volatile
1a001d90:	f3ef 8009 	mrs	r0, PSP
1a001d94:	f3bf 8f6f 	isb	sy
1a001d98:	4b15      	ldr	r3, [pc, #84]	; (1a001df0 <pxCurrentTCBConst>)
1a001d9a:	681a      	ldr	r2, [r3, #0]
1a001d9c:	f01e 0f10 	tst.w	lr, #16
1a001da0:	bf08      	it	eq
1a001da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001daa:	6010      	str	r0, [r2, #0]
1a001dac:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001db0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001db4:	f380 8811 	msr	BASEPRI, r0
1a001db8:	f3bf 8f4f 	dsb	sy
1a001dbc:	f3bf 8f6f 	isb	sy
1a001dc0:	f7ff f9fa 	bl	1a0011b8 <vTaskSwitchContext>
1a001dc4:	f04f 0000 	mov.w	r0, #0
1a001dc8:	f380 8811 	msr	BASEPRI, r0
1a001dcc:	bc09      	pop	{r0, r3}
1a001dce:	6819      	ldr	r1, [r3, #0]
1a001dd0:	6808      	ldr	r0, [r1, #0]
1a001dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001dd6:	f01e 0f10 	tst.w	lr, #16
1a001dda:	bf08      	it	eq
1a001ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001de0:	f380 8809 	msr	PSP, r0
1a001de4:	f3bf 8f6f 	isb	sy
1a001de8:	4770      	bx	lr
1a001dea:	bf00      	nop
1a001dec:	f3af 8000 	nop.w

1a001df0 <pxCurrentTCBConst>:
1a001df0:	100020f0 	.word	0x100020f0

1a001df4 <SysTick_Handler>:
{
1a001df4:	b508      	push	{r3, lr}
	__asm volatile
1a001df6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dfa:	f383 8811 	msr	BASEPRI, r3
1a001dfe:	f3bf 8f6f 	isb	sy
1a001e02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001e06:	f7ff f8a7 	bl	1a000f58 <xTaskIncrementTick>
1a001e0a:	b118      	cbz	r0, 1a001e14 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001e0c:	4b03      	ldr	r3, [pc, #12]	; (1a001e1c <SysTick_Handler+0x28>)
1a001e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e12:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001e14:	2300      	movs	r3, #0
1a001e16:	f383 8811 	msr	BASEPRI, r3
}
1a001e1a:	bd08      	pop	{r3, pc}
1a001e1c:	e000ed04 	.word	0xe000ed04

1a001e20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001e20:	4a08      	ldr	r2, [pc, #32]	; (1a001e44 <vPortSetupTimerInterrupt+0x24>)
1a001e22:	2300      	movs	r3, #0
1a001e24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001e26:	4908      	ldr	r1, [pc, #32]	; (1a001e48 <vPortSetupTimerInterrupt+0x28>)
1a001e28:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001e2a:	4b08      	ldr	r3, [pc, #32]	; (1a001e4c <vPortSetupTimerInterrupt+0x2c>)
1a001e2c:	681b      	ldr	r3, [r3, #0]
1a001e2e:	4908      	ldr	r1, [pc, #32]	; (1a001e50 <vPortSetupTimerInterrupt+0x30>)
1a001e30:	fba1 1303 	umull	r1, r3, r1, r3
1a001e34:	099b      	lsrs	r3, r3, #6
1a001e36:	3b01      	subs	r3, #1
1a001e38:	4906      	ldr	r1, [pc, #24]	; (1a001e54 <vPortSetupTimerInterrupt+0x34>)
1a001e3a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a001e3c:	2307      	movs	r3, #7
1a001e3e:	6013      	str	r3, [r2, #0]
}
1a001e40:	4770      	bx	lr
1a001e42:	bf00      	nop
1a001e44:	e000e010 	.word	0xe000e010
1a001e48:	e000e018 	.word	0xe000e018
1a001e4c:	10002314 	.word	0x10002314
1a001e50:	10624dd3 	.word	0x10624dd3
1a001e54:	e000e014 	.word	0xe000e014

1a001e58 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001e58:	4b3a      	ldr	r3, [pc, #232]	; (1a001f44 <xPortStartScheduler+0xec>)
1a001e5a:	681a      	ldr	r2, [r3, #0]
1a001e5c:	4b3a      	ldr	r3, [pc, #232]	; (1a001f48 <xPortStartScheduler+0xf0>)
1a001e5e:	429a      	cmp	r2, r3
1a001e60:	d029      	beq.n	1a001eb6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001e62:	4b38      	ldr	r3, [pc, #224]	; (1a001f44 <xPortStartScheduler+0xec>)
1a001e64:	681a      	ldr	r2, [r3, #0]
1a001e66:	4b39      	ldr	r3, [pc, #228]	; (1a001f4c <xPortStartScheduler+0xf4>)
1a001e68:	429a      	cmp	r2, r3
1a001e6a:	d02d      	beq.n	1a001ec8 <xPortStartScheduler+0x70>
{
1a001e6c:	b510      	push	{r4, lr}
1a001e6e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001e70:	4b37      	ldr	r3, [pc, #220]	; (1a001f50 <xPortStartScheduler+0xf8>)
1a001e72:	781a      	ldrb	r2, [r3, #0]
1a001e74:	b2d2      	uxtb	r2, r2
1a001e76:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001e78:	22ff      	movs	r2, #255	; 0xff
1a001e7a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a001e7c:	781b      	ldrb	r3, [r3, #0]
1a001e7e:	b2db      	uxtb	r3, r3
1a001e80:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001e84:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e88:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a001e8c:	4a31      	ldr	r2, [pc, #196]	; (1a001f54 <xPortStartScheduler+0xfc>)
1a001e8e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001e90:	4b31      	ldr	r3, [pc, #196]	; (1a001f58 <xPortStartScheduler+0x100>)
1a001e92:	2207      	movs	r2, #7
1a001e94:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001e96:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e9a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001e9e:	d01c      	beq.n	1a001eda <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a001ea0:	4a2d      	ldr	r2, [pc, #180]	; (1a001f58 <xPortStartScheduler+0x100>)
1a001ea2:	6813      	ldr	r3, [r2, #0]
1a001ea4:	3b01      	subs	r3, #1
1a001ea6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001ea8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001eac:	005b      	lsls	r3, r3, #1
1a001eae:	b2db      	uxtb	r3, r3
1a001eb0:	f88d 3003 	strb.w	r3, [sp, #3]
1a001eb4:	e7ef      	b.n	1a001e96 <xPortStartScheduler+0x3e>
	__asm volatile
1a001eb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eba:	f383 8811 	msr	BASEPRI, r3
1a001ebe:	f3bf 8f6f 	isb	sy
1a001ec2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001ec6:	e7fe      	b.n	1a001ec6 <xPortStartScheduler+0x6e>
1a001ec8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ecc:	f383 8811 	msr	BASEPRI, r3
1a001ed0:	f3bf 8f6f 	isb	sy
1a001ed4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001ed8:	e7fe      	b.n	1a001ed8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a001eda:	4b1f      	ldr	r3, [pc, #124]	; (1a001f58 <xPortStartScheduler+0x100>)
1a001edc:	681b      	ldr	r3, [r3, #0]
1a001ede:	2b04      	cmp	r3, #4
1a001ee0:	d008      	beq.n	1a001ef4 <xPortStartScheduler+0x9c>
1a001ee2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ee6:	f383 8811 	msr	BASEPRI, r3
1a001eea:	f3bf 8f6f 	isb	sy
1a001eee:	f3bf 8f4f 	dsb	sy
1a001ef2:	e7fe      	b.n	1a001ef2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a001ef4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a001ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001efa:	4a17      	ldr	r2, [pc, #92]	; (1a001f58 <xPortStartScheduler+0x100>)
1a001efc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a001efe:	9b01      	ldr	r3, [sp, #4]
1a001f00:	b2db      	uxtb	r3, r3
1a001f02:	4a13      	ldr	r2, [pc, #76]	; (1a001f50 <xPortStartScheduler+0xf8>)
1a001f04:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a001f06:	4b15      	ldr	r3, [pc, #84]	; (1a001f5c <xPortStartScheduler+0x104>)
1a001f08:	681a      	ldr	r2, [r3, #0]
1a001f0a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001f0e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a001f10:	681a      	ldr	r2, [r3, #0]
1a001f12:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a001f16:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a001f18:	f7ff ff82 	bl	1a001e20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a001f1c:	2400      	movs	r4, #0
1a001f1e:	4b10      	ldr	r3, [pc, #64]	; (1a001f60 <xPortStartScheduler+0x108>)
1a001f20:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a001f22:	f7ff febf 	bl	1a001ca4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a001f26:	4a0f      	ldr	r2, [pc, #60]	; (1a001f64 <xPortStartScheduler+0x10c>)
1a001f28:	6813      	ldr	r3, [r2, #0]
1a001f2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001f2e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a001f30:	f7ff fea4 	bl	1a001c7c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a001f34:	f7ff f940 	bl	1a0011b8 <vTaskSwitchContext>
	prvTaskExitError();
1a001f38:	f7ff fe80 	bl	1a001c3c <prvTaskExitError>
}
1a001f3c:	4620      	mov	r0, r4
1a001f3e:	b002      	add	sp, #8
1a001f40:	bd10      	pop	{r4, pc}
1a001f42:	bf00      	nop
1a001f44:	e000ed00 	.word	0xe000ed00
1a001f48:	410fc271 	.word	0x410fc271
1a001f4c:	410fc270 	.word	0x410fc270
1a001f50:	e000e400 	.word	0xe000e400
1a001f54:	1000221c 	.word	0x1000221c
1a001f58:	10002220 	.word	0x10002220
1a001f5c:	e000ed20 	.word	0xe000ed20
1a001f60:	10000000 	.word	0x10000000
1a001f64:	e000ef34 	.word	0xe000ef34

1a001f68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a001f68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a001f6c:	2b0f      	cmp	r3, #15
1a001f6e:	d90f      	bls.n	1a001f90 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a001f70:	4a10      	ldr	r2, [pc, #64]	; (1a001fb4 <vPortValidateInterruptPriority+0x4c>)
1a001f72:	5c9b      	ldrb	r3, [r3, r2]
1a001f74:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a001f76:	4a10      	ldr	r2, [pc, #64]	; (1a001fb8 <vPortValidateInterruptPriority+0x50>)
1a001f78:	7812      	ldrb	r2, [r2, #0]
1a001f7a:	429a      	cmp	r2, r3
1a001f7c:	d908      	bls.n	1a001f90 <vPortValidateInterruptPriority+0x28>
1a001f7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f82:	f383 8811 	msr	BASEPRI, r3
1a001f86:	f3bf 8f6f 	isb	sy
1a001f8a:	f3bf 8f4f 	dsb	sy
1a001f8e:	e7fe      	b.n	1a001f8e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a001f90:	4b0a      	ldr	r3, [pc, #40]	; (1a001fbc <vPortValidateInterruptPriority+0x54>)
1a001f92:	681b      	ldr	r3, [r3, #0]
1a001f94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001f98:	4a09      	ldr	r2, [pc, #36]	; (1a001fc0 <vPortValidateInterruptPriority+0x58>)
1a001f9a:	6812      	ldr	r2, [r2, #0]
1a001f9c:	4293      	cmp	r3, r2
1a001f9e:	d908      	bls.n	1a001fb2 <vPortValidateInterruptPriority+0x4a>
1a001fa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fa4:	f383 8811 	msr	BASEPRI, r3
1a001fa8:	f3bf 8f6f 	isb	sy
1a001fac:	f3bf 8f4f 	dsb	sy
1a001fb0:	e7fe      	b.n	1a001fb0 <vPortValidateInterruptPriority+0x48>
	}
1a001fb2:	4770      	bx	lr
1a001fb4:	e000e3f0 	.word	0xe000e3f0
1a001fb8:	1000221c 	.word	0x1000221c
1a001fbc:	e000ed0c 	.word	0xe000ed0c
1a001fc0:	10002220 	.word	0x10002220

1a001fc4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a001fc4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001fc6:	4b05      	ldr	r3, [pc, #20]	; (1a001fdc <DAC_IRQHandler+0x18>)
1a001fc8:	2201      	movs	r2, #1
1a001fca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a001fce:	4b04      	ldr	r3, [pc, #16]	; (1a001fe0 <DAC_IRQHandler+0x1c>)
1a001fd0:	681b      	ldr	r3, [r3, #0]
1a001fd2:	b113      	cbz	r3, 1a001fda <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a001fd4:	4b02      	ldr	r3, [pc, #8]	; (1a001fe0 <DAC_IRQHandler+0x1c>)
1a001fd6:	681b      	ldr	r3, [r3, #0]
1a001fd8:	4798      	blx	r3
   }
}
1a001fda:	bd08      	pop	{r3, pc}
1a001fdc:	e000e100 	.word	0xe000e100
1a001fe0:	10002224 	.word	0x10002224

1a001fe4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001fe4:	2300      	movs	r3, #0
1a001fe6:	2b1c      	cmp	r3, #28
1a001fe8:	d812      	bhi.n	1a002010 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a001fea:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001fec:	4a09      	ldr	r2, [pc, #36]	; (1a002014 <Board_SetupMuxing+0x30>)
1a001fee:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001ff2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001ff6:	784a      	ldrb	r2, [r1, #1]
1a001ff8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001ffa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001ffe:	4906      	ldr	r1, [pc, #24]	; (1a002018 <Board_SetupMuxing+0x34>)
1a002000:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002004:	3301      	adds	r3, #1
1a002006:	2b1c      	cmp	r3, #28
1a002008:	d9f0      	bls.n	1a001fec <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00200a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00200e:	4770      	bx	lr
1a002010:	4770      	bx	lr
1a002012:	bf00      	nop
1a002014:	1a004fd0 	.word	0x1a004fd0
1a002018:	40086000 	.word	0x40086000

1a00201c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00201c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00201e:	4a17      	ldr	r2, [pc, #92]	; (1a00207c <Board_SetupClocking+0x60>)
1a002020:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002028:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00202c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002030:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002038:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00203c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002040:	2201      	movs	r2, #1
1a002042:	490f      	ldr	r1, [pc, #60]	; (1a002080 <Board_SetupClocking+0x64>)
1a002044:	2006      	movs	r0, #6
1a002046:	f000 fb47 	bl	1a0026d8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00204a:	2400      	movs	r4, #0
1a00204c:	b14c      	cbz	r4, 1a002062 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00204e:	4b0b      	ldr	r3, [pc, #44]	; (1a00207c <Board_SetupClocking+0x60>)
1a002050:	685a      	ldr	r2, [r3, #4]
1a002052:	f022 020c 	bic.w	r2, r2, #12
1a002056:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002058:	685a      	ldr	r2, [r3, #4]
1a00205a:	f042 0203 	orr.w	r2, r2, #3
1a00205e:	605a      	str	r2, [r3, #4]
}
1a002060:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002062:	4808      	ldr	r0, [pc, #32]	; (1a002084 <Board_SetupClocking+0x68>)
1a002064:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002068:	2301      	movs	r3, #1
1a00206a:	788a      	ldrb	r2, [r1, #2]
1a00206c:	7849      	ldrb	r1, [r1, #1]
1a00206e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002072:	f000 fe09 	bl	1a002c88 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002076:	3401      	adds	r4, #1
1a002078:	e7e8      	b.n	1a00204c <Board_SetupClocking+0x30>
1a00207a:	bf00      	nop
1a00207c:	40043000 	.word	0x40043000
1a002080:	0c28cb00 	.word	0x0c28cb00
1a002084:	1a004fcc 	.word	0x1a004fcc

1a002088 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002088:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00208a:	f7ff ffab 	bl	1a001fe4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00208e:	f7ff ffc5 	bl	1a00201c <Board_SetupClocking>
}
1a002092:	bd08      	pop	{r3, pc}

1a002094 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002094:	2200      	movs	r2, #0
1a002096:	2a05      	cmp	r2, #5
1a002098:	d819      	bhi.n	1a0020ce <Board_LED_Init+0x3a>
{
1a00209a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00209c:	490c      	ldr	r1, [pc, #48]	; (1a0020d0 <Board_LED_Init+0x3c>)
1a00209e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0020a2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0020a6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0020a8:	4b0a      	ldr	r3, [pc, #40]	; (1a0020d4 <Board_LED_Init+0x40>)
1a0020aa:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0020ae:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0020b2:	2001      	movs	r0, #1
1a0020b4:	40a0      	lsls	r0, r4
1a0020b6:	4301      	orrs	r1, r0
1a0020b8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0020bc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0020c0:	2100      	movs	r1, #0
1a0020c2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0020c4:	3201      	adds	r2, #1
1a0020c6:	2a05      	cmp	r2, #5
1a0020c8:	d9e8      	bls.n	1a00209c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0020ca:	bc70      	pop	{r4, r5, r6}
1a0020cc:	4770      	bx	lr
1a0020ce:	4770      	bx	lr
1a0020d0:	1a005050 	.word	0x1a005050
1a0020d4:	400f4000 	.word	0x400f4000

1a0020d8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0020d8:	2300      	movs	r3, #0
1a0020da:	2b03      	cmp	r3, #3
1a0020dc:	d816      	bhi.n	1a00210c <Board_TEC_Init+0x34>
{
1a0020de:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0020e0:	490b      	ldr	r1, [pc, #44]	; (1a002110 <Board_TEC_Init+0x38>)
1a0020e2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0020e6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0020ea:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0020ec:	4c09      	ldr	r4, [pc, #36]	; (1a002114 <Board_TEC_Init+0x3c>)
1a0020ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0020f2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0020f6:	2001      	movs	r0, #1
1a0020f8:	40a8      	lsls	r0, r5
1a0020fa:	ea21 0100 	bic.w	r1, r1, r0
1a0020fe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002102:	3301      	adds	r3, #1
1a002104:	2b03      	cmp	r3, #3
1a002106:	d9eb      	bls.n	1a0020e0 <Board_TEC_Init+0x8>
   }
}
1a002108:	bc30      	pop	{r4, r5}
1a00210a:	4770      	bx	lr
1a00210c:	4770      	bx	lr
1a00210e:	bf00      	nop
1a002110:	1a005048 	.word	0x1a005048
1a002114:	400f4000 	.word	0x400f4000

1a002118 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002118:	2300      	movs	r3, #0
1a00211a:	2b08      	cmp	r3, #8
1a00211c:	d816      	bhi.n	1a00214c <Board_GPIO_Init+0x34>
{
1a00211e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002120:	490b      	ldr	r1, [pc, #44]	; (1a002150 <Board_GPIO_Init+0x38>)
1a002122:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002126:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00212a:	784d      	ldrb	r5, [r1, #1]
1a00212c:	4c09      	ldr	r4, [pc, #36]	; (1a002154 <Board_GPIO_Init+0x3c>)
1a00212e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002132:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002136:	2001      	movs	r0, #1
1a002138:	40a8      	lsls	r0, r5
1a00213a:	ea21 0100 	bic.w	r1, r1, r0
1a00213e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002142:	3301      	adds	r3, #1
1a002144:	2b08      	cmp	r3, #8
1a002146:	d9eb      	bls.n	1a002120 <Board_GPIO_Init+0x8>
   }
}
1a002148:	bc30      	pop	{r4, r5}
1a00214a:	4770      	bx	lr
1a00214c:	4770      	bx	lr
1a00214e:	bf00      	nop
1a002150:	1a00505c 	.word	0x1a00505c
1a002154:	400f4000 	.word	0x400f4000

1a002158 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002158:	b510      	push	{r4, lr}
1a00215a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00215c:	4c08      	ldr	r4, [pc, #32]	; (1a002180 <Board_ADC_Init+0x28>)
1a00215e:	4669      	mov	r1, sp
1a002160:	4620      	mov	r0, r4
1a002162:	f000 fa79 	bl	1a002658 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002166:	4a07      	ldr	r2, [pc, #28]	; (1a002184 <Board_ADC_Init+0x2c>)
1a002168:	4669      	mov	r1, sp
1a00216a:	4620      	mov	r0, r4
1a00216c:	f000 fa94 	bl	1a002698 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002170:	2200      	movs	r2, #0
1a002172:	4669      	mov	r1, sp
1a002174:	4620      	mov	r0, r4
1a002176:	f000 faa8 	bl	1a0026ca <Chip_ADC_SetResolution>
}
1a00217a:	b002      	add	sp, #8
1a00217c:	bd10      	pop	{r4, pc}
1a00217e:	bf00      	nop
1a002180:	400e3000 	.word	0x400e3000
1a002184:	00061a80 	.word	0x00061a80

1a002188 <Board_SPI_Init>:
{
1a002188:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00218a:	4c0b      	ldr	r4, [pc, #44]	; (1a0021b8 <Board_SPI_Init+0x30>)
1a00218c:	4620      	mov	r0, r4
1a00218e:	f000 f965 	bl	1a00245c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002192:	6863      	ldr	r3, [r4, #4]
1a002194:	f023 0304 	bic.w	r3, r3, #4
1a002198:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00219a:	6823      	ldr	r3, [r4, #0]
1a00219c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0021a0:	f043 0307 	orr.w	r3, r3, #7
1a0021a4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0021a6:	4905      	ldr	r1, [pc, #20]	; (1a0021bc <Board_SPI_Init+0x34>)
1a0021a8:	4620      	mov	r0, r4
1a0021aa:	f000 f938 	bl	1a00241e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0021ae:	6863      	ldr	r3, [r4, #4]
1a0021b0:	f043 0302 	orr.w	r3, r3, #2
1a0021b4:	6063      	str	r3, [r4, #4]
}
1a0021b6:	bd10      	pop	{r4, pc}
1a0021b8:	400c5000 	.word	0x400c5000
1a0021bc:	000186a0 	.word	0x000186a0

1a0021c0 <Board_I2C_Init>:
{
1a0021c0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0021c2:	2000      	movs	r0, #0
1a0021c4:	f000 f976 	bl	1a0024b4 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0021c8:	4b04      	ldr	r3, [pc, #16]	; (1a0021dc <Board_I2C_Init+0x1c>)
1a0021ca:	f640 0208 	movw	r2, #2056	; 0x808
1a0021ce:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0021d2:	4903      	ldr	r1, [pc, #12]	; (1a0021e0 <Board_I2C_Init+0x20>)
1a0021d4:	2000      	movs	r0, #0
1a0021d6:	f000 f97f 	bl	1a0024d8 <Chip_I2C_SetClockRate>
}
1a0021da:	bd08      	pop	{r3, pc}
1a0021dc:	40086000 	.word	0x40086000
1a0021e0:	000f4240 	.word	0x000f4240

1a0021e4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0021e4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0021e6:	4c07      	ldr	r4, [pc, #28]	; (1a002204 <Board_Debug_Init+0x20>)
1a0021e8:	4620      	mov	r0, r4
1a0021ea:	f000 fe13 	bl	1a002e14 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0021ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0021f2:	4620      	mov	r0, r4
1a0021f4:	f000 fe58 	bl	1a002ea8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0021f8:	2303      	movs	r3, #3
1a0021fa:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0021fc:	2301      	movs	r3, #1
1a0021fe:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002200:	bd10      	pop	{r4, pc}
1a002202:	bf00      	nop
1a002204:	400c1000 	.word	0x400c1000

1a002208 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002208:	4b03      	ldr	r3, [pc, #12]	; (1a002218 <Board_UARTPutChar+0x10>)
1a00220a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00220c:	f013 0f20 	tst.w	r3, #32
1a002210:	d0fa      	beq.n	1a002208 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002212:	4b01      	ldr	r3, [pc, #4]	; (1a002218 <Board_UARTPutChar+0x10>)
1a002214:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002216:	4770      	bx	lr
1a002218:	400c1000 	.word	0x400c1000

1a00221c <Board_UARTGetChar>:
	return pUART->LSR;
1a00221c:	4b05      	ldr	r3, [pc, #20]	; (1a002234 <Board_UARTGetChar+0x18>)
1a00221e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002220:	f013 0f01 	tst.w	r3, #1
1a002224:	d003      	beq.n	1a00222e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002226:	4b03      	ldr	r3, [pc, #12]	; (1a002234 <Board_UARTGetChar+0x18>)
1a002228:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00222a:	b2c0      	uxtb	r0, r0
1a00222c:	4770      	bx	lr
   }
   return EOF;
1a00222e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a002232:	4770      	bx	lr
1a002234:	400c1000 	.word	0x400c1000

1a002238 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002238:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00223a:	f7ff ffd3 	bl	1a0021e4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00223e:	4809      	ldr	r0, [pc, #36]	; (1a002264 <Board_Init+0x2c>)
1a002240:	f000 f966 	bl	1a002510 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002244:	f7ff ff68 	bl	1a002118 <Board_GPIO_Init>
   Board_ADC_Init();
1a002248:	f7ff ff86 	bl	1a002158 <Board_ADC_Init>
   Board_SPI_Init();
1a00224c:	f7ff ff9c 	bl	1a002188 <Board_SPI_Init>
   Board_I2C_Init();
1a002250:	f7ff ffb6 	bl	1a0021c0 <Board_I2C_Init>

   Board_LED_Init();
1a002254:	f7ff ff1e 	bl	1a002094 <Board_LED_Init>
   Board_TEC_Init();
1a002258:	f7ff ff3e 	bl	1a0020d8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00225c:	f000 fae8 	bl	1a002830 <SystemCoreClockUpdate>
}
1a002260:	bd08      	pop	{r3, pc}
1a002262:	bf00      	nop
1a002264:	400f4000 	.word	0x400f4000

1a002268 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002268:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00226a:	b2c0      	uxtb	r0, r0
1a00226c:	f7ff ffcc 	bl	1a002208 <Board_UARTPutChar>
}
1a002270:	bd08      	pop	{r3, pc}

1a002272 <__stdio_getchar>:

int __stdio_getchar()
{
1a002272:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002274:	f7ff ffd2 	bl	1a00221c <Board_UARTGetChar>
}
1a002278:	bd08      	pop	{r3, pc}

1a00227a <__stdio_init>:

void __stdio_init()
{
1a00227a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00227c:	f7ff ffb2 	bl	1a0021e4 <Board_Debug_Init>
1a002280:	bd08      	pop	{r3, pc}

1a002282 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a002282:	680b      	ldr	r3, [r1, #0]
1a002284:	b133      	cbz	r3, 1a002294 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a002286:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a002288:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a00228a:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a00228c:	684b      	ldr	r3, [r1, #4]
1a00228e:	3302      	adds	r3, #2
1a002290:	604b      	str	r3, [r1, #4]
}
1a002292:	4770      	bx	lr
1a002294:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002298:	6083      	str	r3, [r0, #8]
1a00229a:	e7f7      	b.n	1a00228c <SSP_Write2BFifo+0xa>

1a00229c <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a00229c:	680b      	ldr	r3, [r1, #0]
1a00229e:	b133      	cbz	r3, 1a0022ae <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0022a0:	684a      	ldr	r2, [r1, #4]
1a0022a2:	5c9b      	ldrb	r3, [r3, r2]
1a0022a4:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a0022a6:	684b      	ldr	r3, [r1, #4]
1a0022a8:	3301      	adds	r3, #1
1a0022aa:	604b      	str	r3, [r1, #4]
}
1a0022ac:	4770      	bx	lr
1a0022ae:	23ff      	movs	r3, #255	; 0xff
1a0022b0:	6083      	str	r3, [r0, #8]
1a0022b2:	e7f8      	b.n	1a0022a6 <SSP_Write1BFifo+0xa>

1a0022b4 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0022b4:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0022b6:	f013 0f04 	tst.w	r3, #4
1a0022ba:	d01b      	beq.n	1a0022f4 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0022bc:	68ca      	ldr	r2, [r1, #12]
1a0022be:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0022c0:	429a      	cmp	r2, r3
1a0022c2:	d216      	bcs.n	1a0022f2 <SSP_Read2BFifo+0x3e>
{
1a0022c4:	b410      	push	{r4}
1a0022c6:	e00a      	b.n	1a0022de <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a0022c8:	68cb      	ldr	r3, [r1, #12]
1a0022ca:	3302      	adds	r3, #2
1a0022cc:	60cb      	str	r3, [r1, #12]
1a0022ce:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0022d0:	f013 0f04 	tst.w	r3, #4
1a0022d4:	d00a      	beq.n	1a0022ec <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0022d6:	68ca      	ldr	r2, [r1, #12]
1a0022d8:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0022da:	429a      	cmp	r2, r3
1a0022dc:	d206      	bcs.n	1a0022ec <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0022de:	6883      	ldr	r3, [r0, #8]
1a0022e0:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a0022e2:	688c      	ldr	r4, [r1, #8]
1a0022e4:	2c00      	cmp	r4, #0
1a0022e6:	d0ef      	beq.n	1a0022c8 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0022e8:	52a3      	strh	r3, [r4, r2]
1a0022ea:	e7ed      	b.n	1a0022c8 <SSP_Read2BFifo+0x14>
	}
}
1a0022ec:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0022f0:	4770      	bx	lr
1a0022f2:	4770      	bx	lr
1a0022f4:	4770      	bx	lr

1a0022f6 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0022f6:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0022f8:	f013 0f04 	tst.w	r3, #4
1a0022fc:	d01a      	beq.n	1a002334 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0022fe:	68cb      	ldr	r3, [r1, #12]
1a002300:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002302:	4293      	cmp	r3, r2
1a002304:	d215      	bcs.n	1a002332 <SSP_Read1BFifo+0x3c>
{
1a002306:	b410      	push	{r4}
1a002308:	e00a      	b.n	1a002320 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a00230a:	68cb      	ldr	r3, [r1, #12]
1a00230c:	3301      	adds	r3, #1
1a00230e:	60cb      	str	r3, [r1, #12]
1a002310:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002312:	f013 0f04 	tst.w	r3, #4
1a002316:	d009      	beq.n	1a00232c <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002318:	68cb      	ldr	r3, [r1, #12]
1a00231a:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00231c:	4293      	cmp	r3, r2
1a00231e:	d205      	bcs.n	1a00232c <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002320:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a002322:	688a      	ldr	r2, [r1, #8]
1a002324:	2a00      	cmp	r2, #0
1a002326:	d0f0      	beq.n	1a00230a <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a002328:	54d4      	strb	r4, [r2, r3]
1a00232a:	e7ee      	b.n	1a00230a <SSP_Read1BFifo+0x14>
	}
}
1a00232c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002330:	4770      	bx	lr
1a002332:	4770      	bx	lr
1a002334:	4770      	bx	lr
1a002336:	Address 0x1a002336 is out of bounds.


1a002338 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002338:	4b03      	ldr	r3, [pc, #12]	; (1a002348 <Chip_SSP_GetClockIndex+0x10>)
1a00233a:	4298      	cmp	r0, r3
1a00233c:	d001      	beq.n	1a002342 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00233e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002340:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002342:	20a5      	movs	r0, #165	; 0xa5
1a002344:	4770      	bx	lr
1a002346:	bf00      	nop
1a002348:	400c5000 	.word	0x400c5000

1a00234c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00234c:	4b04      	ldr	r3, [pc, #16]	; (1a002360 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00234e:	4298      	cmp	r0, r3
1a002350:	d002      	beq.n	1a002358 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002352:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002356:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002358:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00235c:	4770      	bx	lr
1a00235e:	bf00      	nop
1a002360:	400c5000 	.word	0x400c5000

1a002364 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002364:	6803      	ldr	r3, [r0, #0]
1a002366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00236a:	0209      	lsls	r1, r1, #8
1a00236c:	b289      	uxth	r1, r1
1a00236e:	4319      	orrs	r1, r3
1a002370:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002372:	6102      	str	r2, [r0, #16]
}
1a002374:	4770      	bx	lr

1a002376 <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a002376:	b538      	push	{r3, r4, r5, lr}
1a002378:	4604      	mov	r4, r0
1a00237a:	460d      	mov	r5, r1
	return (pSSP->SR & Stat) ? SET : RESET;
1a00237c:	68e3      	ldr	r3, [r4, #12]
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a00237e:	f013 0f04 	tst.w	r3, #4
1a002382:	d001      	beq.n	1a002388 <Chip_SSP_RWFrames_Blocking+0x12>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002384:	68a3      	ldr	r3, [r4, #8]
1a002386:	e7f9      	b.n	1a00237c <Chip_SSP_RWFrames_Blocking+0x6>
	pSSP->ICR = IntClear;
1a002388:	2303      	movs	r3, #3
1a00238a:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a00238c:	6823      	ldr	r3, [r4, #0]
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a00238e:	f013 0f08 	tst.w	r3, #8
1a002392:	d108      	bne.n	1a0023a6 <Chip_SSP_RWFrames_Blocking+0x30>
1a002394:	e022      	b.n	1a0023dc <Chip_SSP_RWFrames_Blocking+0x66>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a002396:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a002398:	f013 0f01 	tst.w	r3, #1
1a00239c:	d139      	bne.n	1a002412 <Chip_SSP_RWFrames_Blocking+0x9c>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a00239e:	4629      	mov	r1, r5
1a0023a0:	4620      	mov	r0, r4
1a0023a2:	f7ff ff87 	bl	1a0022b4 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0023a6:	68ea      	ldr	r2, [r5, #12]
1a0023a8:	692b      	ldr	r3, [r5, #16]
1a0023aa:	429a      	cmp	r2, r3
1a0023ac:	d302      	bcc.n	1a0023b4 <Chip_SSP_RWFrames_Blocking+0x3e>
1a0023ae:	686a      	ldr	r2, [r5, #4]
1a0023b0:	4293      	cmp	r3, r2
1a0023b2:	d926      	bls.n	1a002402 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0023b4:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0023b6:	f012 0f02 	tst.w	r2, #2
1a0023ba:	d0ec      	beq.n	1a002396 <Chip_SSP_RWFrames_Blocking+0x20>
1a0023bc:	686a      	ldr	r2, [r5, #4]
1a0023be:	429a      	cmp	r2, r3
1a0023c0:	d2e9      	bcs.n	1a002396 <Chip_SSP_RWFrames_Blocking+0x20>
				SSP_Write2BFifo(pSSP, xf_setup);
1a0023c2:	4629      	mov	r1, r5
1a0023c4:	4620      	mov	r0, r4
1a0023c6:	f7ff ff5c 	bl	1a002282 <SSP_Write2BFifo>
1a0023ca:	e7e4      	b.n	1a002396 <Chip_SSP_RWFrames_Blocking+0x20>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0023cc:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0023ce:	f013 0f01 	tst.w	r3, #1
1a0023d2:	d120      	bne.n	1a002416 <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a0023d4:	4629      	mov	r1, r5
1a0023d6:	4620      	mov	r0, r4
1a0023d8:	f7ff ff8d 	bl	1a0022f6 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0023dc:	68ea      	ldr	r2, [r5, #12]
1a0023de:	692b      	ldr	r3, [r5, #16]
1a0023e0:	429a      	cmp	r2, r3
1a0023e2:	d302      	bcc.n	1a0023ea <Chip_SSP_RWFrames_Blocking+0x74>
1a0023e4:	686a      	ldr	r2, [r5, #4]
1a0023e6:	4293      	cmp	r3, r2
1a0023e8:	d90b      	bls.n	1a002402 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0023ea:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0023ec:	f012 0f02 	tst.w	r2, #2
1a0023f0:	d0ec      	beq.n	1a0023cc <Chip_SSP_RWFrames_Blocking+0x56>
1a0023f2:	686a      	ldr	r2, [r5, #4]
1a0023f4:	429a      	cmp	r2, r3
1a0023f6:	d2e9      	bcs.n	1a0023cc <Chip_SSP_RWFrames_Blocking+0x56>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0023f8:	4629      	mov	r1, r5
1a0023fa:	4620      	mov	r0, r4
1a0023fc:	f7ff ff4e 	bl	1a00229c <SSP_Write1BFifo>
1a002400:	e7e4      	b.n	1a0023cc <Chip_SSP_RWFrames_Blocking+0x56>
		}
	}
	if (xf_setup->tx_data) {
1a002402:	682b      	ldr	r3, [r5, #0]
1a002404:	b10b      	cbz	r3, 1a00240a <Chip_SSP_RWFrames_Blocking+0x94>
		return xf_setup->tx_cnt;
1a002406:	6868      	ldr	r0, [r5, #4]
1a002408:	e004      	b.n	1a002414 <Chip_SSP_RWFrames_Blocking+0x9e>
	}
	else if (xf_setup->rx_data) {
1a00240a:	68ab      	ldr	r3, [r5, #8]
1a00240c:	b12b      	cbz	r3, 1a00241a <Chip_SSP_RWFrames_Blocking+0xa4>
		return xf_setup->rx_cnt;
1a00240e:	68e8      	ldr	r0, [r5, #12]
1a002410:	e000      	b.n	1a002414 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
1a002412:	2000      	movs	r0, #0
	}

	return 0;
}
1a002414:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a002416:	2000      	movs	r0, #0
1a002418:	e7fc      	b.n	1a002414 <Chip_SSP_RWFrames_Blocking+0x9e>
	return 0;
1a00241a:	2000      	movs	r0, #0
1a00241c:	e7fa      	b.n	1a002414 <Chip_SSP_RWFrames_Blocking+0x9e>

1a00241e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00241e:	b570      	push	{r4, r5, r6, lr}
1a002420:	4606      	mov	r6, r0
1a002422:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002424:	f7ff ff92 	bl	1a00234c <Chip_SSP_GetPeriphClockIndex>
1a002428:	f000 fcb8 	bl	1a002d9c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00242c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00242e:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a002432:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002434:	e000      	b.n	1a002438 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002436:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002438:	42ab      	cmp	r3, r5
1a00243a:	d90b      	bls.n	1a002454 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00243c:	1c4c      	adds	r4, r1, #1
1a00243e:	fb02 f304 	mul.w	r3, r2, r4
1a002442:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002446:	429d      	cmp	r5, r3
1a002448:	d2f6      	bcs.n	1a002438 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00244a:	2cff      	cmp	r4, #255	; 0xff
1a00244c:	d9f3      	bls.n	1a002436 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00244e:	3202      	adds	r2, #2
				cr0_div = 0;
1a002450:	2100      	movs	r1, #0
1a002452:	e7f1      	b.n	1a002438 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002454:	4630      	mov	r0, r6
1a002456:	f7ff ff85 	bl	1a002364 <Chip_SSP_SetClockRate>
}
1a00245a:	bd70      	pop	{r4, r5, r6, pc}

1a00245c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00245c:	b510      	push	{r4, lr}
1a00245e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002460:	f7ff ff6a 	bl	1a002338 <Chip_SSP_GetClockIndex>
1a002464:	f000 fc74 	bl	1a002d50 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002468:	4620      	mov	r0, r4
1a00246a:	f7ff ff6f 	bl	1a00234c <Chip_SSP_GetPeriphClockIndex>
1a00246e:	f000 fc6f 	bl	1a002d50 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002472:	6863      	ldr	r3, [r4, #4]
1a002474:	f023 0304 	bic.w	r3, r3, #4
1a002478:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00247a:	6823      	ldr	r3, [r4, #0]
1a00247c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002480:	f043 0307 	orr.w	r3, r3, #7
1a002484:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002486:	4902      	ldr	r1, [pc, #8]	; (1a002490 <Chip_SSP_Init+0x34>)
1a002488:	4620      	mov	r0, r4
1a00248a:	f7ff ffc8 	bl	1a00241e <Chip_SSP_SetBitRate>
}
1a00248e:	bd10      	pop	{r4, pc}
1a002490:	000186a0 	.word	0x000186a0

1a002494 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002494:	2901      	cmp	r1, #1
1a002496:	d109      	bne.n	1a0024ac <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002498:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00249c:	0082      	lsls	r2, r0, #2
1a00249e:	4b04      	ldr	r3, [pc, #16]	; (1a0024b0 <Chip_I2C_EventHandler+0x1c>)
1a0024a0:	4413      	add	r3, r2
1a0024a2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0024a4:	7d13      	ldrb	r3, [r2, #20]
1a0024a6:	b2db      	uxtb	r3, r3
1a0024a8:	2b04      	cmp	r3, #4
1a0024aa:	d0fb      	beq.n	1a0024a4 <Chip_I2C_EventHandler+0x10>
}
1a0024ac:	4770      	bx	lr
1a0024ae:	bf00      	nop
1a0024b0:	10000004 	.word	0x10000004

1a0024b4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0024b4:	b570      	push	{r4, r5, r6, lr}
1a0024b6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0024b8:	4e06      	ldr	r6, [pc, #24]	; (1a0024d4 <Chip_I2C_Init+0x20>)
1a0024ba:	00c4      	lsls	r4, r0, #3
1a0024bc:	1a22      	subs	r2, r4, r0
1a0024be:	0093      	lsls	r3, r2, #2
1a0024c0:	4433      	add	r3, r6
1a0024c2:	8898      	ldrh	r0, [r3, #4]
1a0024c4:	f000 fc44 	bl	1a002d50 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0024c8:	1b64      	subs	r4, r4, r5
1a0024ca:	00a3      	lsls	r3, r4, #2
1a0024cc:	58f3      	ldr	r3, [r6, r3]
1a0024ce:	226c      	movs	r2, #108	; 0x6c
1a0024d0:	619a      	str	r2, [r3, #24]
}
1a0024d2:	bd70      	pop	{r4, r5, r6, pc}
1a0024d4:	10000004 	.word	0x10000004

1a0024d8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0024d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0024dc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0024de:	4e0b      	ldr	r6, [pc, #44]	; (1a00250c <Chip_I2C_SetClockRate+0x34>)
1a0024e0:	00c5      	lsls	r5, r0, #3
1a0024e2:	1a2b      	subs	r3, r5, r0
1a0024e4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0024e8:	eb06 0308 	add.w	r3, r6, r8
1a0024ec:	8898      	ldrh	r0, [r3, #4]
1a0024ee:	f000 fc55 	bl	1a002d9c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0024f2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0024f6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0024fa:	0842      	lsrs	r2, r0, #1
1a0024fc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0024fe:	f856 3008 	ldr.w	r3, [r6, r8]
1a002502:	691a      	ldr	r2, [r3, #16]
1a002504:	1a80      	subs	r0, r0, r2
1a002506:	6158      	str	r0, [r3, #20]
}
1a002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00250c:	10000004 	.word	0x10000004

1a002510 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002510:	4770      	bx	lr

1a002512 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a002512:	6883      	ldr	r3, [r0, #8]
1a002514:	f043 0302 	orr.w	r3, r3, #2
1a002518:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a00251a:	6883      	ldr	r3, [r0, #8]
1a00251c:	f013 0f02 	tst.w	r3, #2
1a002520:	d0fb      	beq.n	1a00251a <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a002522:	6883      	ldr	r3, [r0, #8]
1a002524:	f003 0311 	and.w	r3, r3, #17
1a002528:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a00252a:	6883      	ldr	r3, [r0, #8]
1a00252c:	f013 0f02 	tst.w	r3, #2
1a002530:	d1fb      	bne.n	1a00252a <Chip_RTC_ResetClockTickCounter+0x18>
}
1a002532:	4770      	bx	lr

1a002534 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002534:	2901      	cmp	r1, #1
1a002536:	d004      	beq.n	1a002542 <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a002538:	6883      	ldr	r3, [r0, #8]
1a00253a:	f003 0312 	and.w	r3, r3, #18
1a00253e:	6083      	str	r3, [r0, #8]
	}
}
1a002540:	4770      	bx	lr
		pRTC->CCR |= RTC_CCR_CLKEN;
1a002542:	6883      	ldr	r3, [r0, #8]
1a002544:	f043 0301 	orr.w	r3, r3, #1
1a002548:	6083      	str	r3, [r0, #8]
1a00254a:	4770      	bx	lr

1a00254c <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a00254c:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a00254e:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a002550:	f015 0f01 	tst.w	r5, #1
1a002554:	d002      	beq.n	1a00255c <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a002556:	f005 0312 	and.w	r3, r5, #18
1a00255a:	6083      	str	r3, [r0, #8]
{
1a00255c:	2300      	movs	r3, #0
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a00255e:	2b07      	cmp	r3, #7
1a002560:	d808      	bhi.n	1a002574 <Chip_RTC_SetFullTime+0x28>
		pRTC->TIME[i] = pFullTime->time[i];
1a002562:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a002566:	f103 0208 	add.w	r2, r3, #8
1a00256a:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a00256e:	3301      	adds	r3, #1
1a002570:	b2db      	uxtb	r3, r3
1a002572:	e7f4      	b.n	1a00255e <Chip_RTC_SetFullTime+0x12>
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a002574:	6085      	str	r5, [r0, #8]
}
1a002576:	bc30      	pop	{r4, r5}
1a002578:	4770      	bx	lr

1a00257a <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a00257a:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a00257c:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a00257e:	6a03      	ldr	r3, [r0, #32]
1a002580:	42a3      	cmp	r3, r4
1a002582:	d00d      	beq.n	1a0025a0 <Chip_RTC_GetFullTime+0x26>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a002584:	6a04      	ldr	r4, [r0, #32]
1a002586:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a002588:	2301      	movs	r3, #1
1a00258a:	2b07      	cmp	r3, #7
1a00258c:	d8f7      	bhi.n	1a00257e <Chip_RTC_GetFullTime+0x4>
			pFullTime->time[i] = pRTC->TIME[i];
1a00258e:	f103 0208 	add.w	r2, r3, #8
1a002592:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a00259a:	3301      	adds	r3, #1
1a00259c:	b2db      	uxtb	r3, r3
1a00259e:	e7f4      	b.n	1a00258a <Chip_RTC_GetFullTime+0x10>
		}
	}
}
1a0025a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025a4:	4770      	bx	lr

1a0025a6 <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0025a6:	2901      	cmp	r1, #1
1a0025a8:	d004      	beq.n	1a0025b4 <Chip_RTC_CalibCounterCmd+0xe>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a0025aa:	6883      	ldr	r3, [r0, #8]
1a0025ac:	f043 0310 	orr.w	r3, r3, #16
1a0025b0:	6083      	str	r3, [r0, #8]
	}
}
1a0025b2:	4770      	bx	lr
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a0025b4:	6883      	ldr	r3, [r0, #8]
1a0025b6:	f003 0303 	and.w	r3, r3, #3
1a0025ba:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a0025bc:	6883      	ldr	r3, [r0, #8]
1a0025be:	f013 0f10 	tst.w	r3, #16
1a0025c2:	d1f7      	bne.n	1a0025b4 <Chip_RTC_CalibCounterCmd+0xe>
1a0025c4:	4770      	bx	lr
1a0025c6:	Address 0x1a0025c6 is out of bounds.


1a0025c8 <Chip_RTC_Init>:
{
1a0025c8:	b510      	push	{r4, lr}
1a0025ca:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a0025cc:	f000 fbda 	bl	1a002d84 <Chip_Clock_RTCEnable>
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a0025d0:	4b0e      	ldr	r3, [pc, #56]	; (1a00260c <Chip_RTC_Init+0x44>)
1a0025d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a0025d6:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a0025d8:	4b0c      	ldr	r3, [pc, #48]	; (1a00260c <Chip_RTC_Init+0x44>)
1a0025da:	681b      	ldr	r3, [r3, #0]
1a0025dc:	2b00      	cmp	r3, #0
1a0025de:	d1fb      	bne.n	1a0025d8 <Chip_RTC_Init+0x10>
	Chip_RTC_Enable(pRTC, DISABLE);
1a0025e0:	2100      	movs	r1, #0
1a0025e2:	4620      	mov	r0, r4
1a0025e4:	f7ff ffa6 	bl	1a002534 <Chip_RTC_Enable>
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a0025e8:	2100      	movs	r1, #0
1a0025ea:	4620      	mov	r0, r4
1a0025ec:	f7ff ffdb 	bl	1a0025a6 <Chip_RTC_CalibCounterCmd>
	Chip_RTC_ResetClockTickCounter(pRTC);
1a0025f0:	4620      	mov	r0, r4
1a0025f2:	f7ff ff8e 	bl	1a002512 <Chip_RTC_ResetClockTickCounter>
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a0025f6:	2303      	movs	r3, #3
1a0025f8:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a0025fa:	6823      	ldr	r3, [r4, #0]
1a0025fc:	2b00      	cmp	r3, #0
1a0025fe:	d1fc      	bne.n	1a0025fa <Chip_RTC_Init+0x32>
	pRTC->CIIR = 0x00;
1a002600:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a002602:	22ff      	movs	r2, #255	; 0xff
1a002604:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a002606:	6423      	str	r3, [r4, #64]	; 0x40
}
1a002608:	bd10      	pop	{r4, pc}
1a00260a:	bf00      	nop
1a00260c:	40040000 	.word	0x40040000

1a002610 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002610:	4b03      	ldr	r3, [pc, #12]	; (1a002620 <Chip_ADC_GetClockIndex+0x10>)
1a002612:	4298      	cmp	r0, r3
1a002614:	d001      	beq.n	1a00261a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002616:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002618:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00261a:	2004      	movs	r0, #4
1a00261c:	4770      	bx	lr
1a00261e:	bf00      	nop
1a002620:	400e4000 	.word	0x400e4000

1a002624 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002624:	b570      	push	{r4, r5, r6, lr}
1a002626:	460d      	mov	r5, r1
1a002628:	4614      	mov	r4, r2
1a00262a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00262c:	f7ff fff0 	bl	1a002610 <Chip_ADC_GetClockIndex>
1a002630:	f000 fbb4 	bl	1a002d9c <Chip_Clock_GetRate>
	if (burstMode) {
1a002634:	b155      	cbz	r5, 1a00264c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002636:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00263a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00263e:	0064      	lsls	r4, r4, #1
1a002640:	fbb0 f0f4 	udiv	r0, r0, r4
1a002644:	b2c0      	uxtb	r0, r0
1a002646:	3801      	subs	r0, #1
	return div;
}
1a002648:	b2c0      	uxtb	r0, r0
1a00264a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00264c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002650:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002654:	e7f1      	b.n	1a00263a <getClkDiv+0x16>
1a002656:	Address 0x1a002656 is out of bounds.


1a002658 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002658:	b538      	push	{r3, r4, r5, lr}
1a00265a:	4605      	mov	r5, r0
1a00265c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00265e:	f7ff ffd7 	bl	1a002610 <Chip_ADC_GetClockIndex>
1a002662:	2301      	movs	r3, #1
1a002664:	461a      	mov	r2, r3
1a002666:	4619      	mov	r1, r3
1a002668:	f000 fb54 	bl	1a002d14 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00266c:	2100      	movs	r1, #0
1a00266e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002670:	4a08      	ldr	r2, [pc, #32]	; (1a002694 <Chip_ADC_Init+0x3c>)
1a002672:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002674:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002676:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002678:	230b      	movs	r3, #11
1a00267a:	4628      	mov	r0, r5
1a00267c:	f7ff ffd2 	bl	1a002624 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002680:	0200      	lsls	r0, r0, #8
1a002682:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002686:	7920      	ldrb	r0, [r4, #4]
1a002688:	0440      	lsls	r0, r0, #17
1a00268a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00268e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002690:	6028      	str	r0, [r5, #0]
}
1a002692:	bd38      	pop	{r3, r4, r5, pc}
1a002694:	00061a80 	.word	0x00061a80

1a002698 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002698:	b570      	push	{r4, r5, r6, lr}
1a00269a:	4605      	mov	r5, r0
1a00269c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00269e:	6804      	ldr	r4, [r0, #0]
1a0026a0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0026a4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0026a8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0026aa:	790b      	ldrb	r3, [r1, #4]
1a0026ac:	f1c3 030b 	rsb	r3, r3, #11
1a0026b0:	b2db      	uxtb	r3, r3
1a0026b2:	7949      	ldrb	r1, [r1, #5]
1a0026b4:	f7ff ffb6 	bl	1a002624 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0026b8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0026bc:	7933      	ldrb	r3, [r6, #4]
1a0026be:	045b      	lsls	r3, r3, #17
1a0026c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0026c4:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0026c6:	602b      	str	r3, [r5, #0]
}
1a0026c8:	bd70      	pop	{r4, r5, r6, pc}

1a0026ca <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0026ca:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0026cc:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0026ce:	680a      	ldr	r2, [r1, #0]
1a0026d0:	f7ff ffe2 	bl	1a002698 <Chip_ADC_SetSampleRate>
}
1a0026d4:	bd08      	pop	{r3, pc}
1a0026d6:	Address 0x1a0026d6 is out of bounds.


1a0026d8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0026d8:	b570      	push	{r4, r5, r6, lr}
1a0026da:	b08a      	sub	sp, #40	; 0x28
1a0026dc:	4605      	mov	r5, r0
1a0026de:	460e      	mov	r6, r1
1a0026e0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0026e2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0026e6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0026e8:	2806      	cmp	r0, #6
1a0026ea:	d018      	beq.n	1a00271e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0026ec:	2300      	movs	r3, #0
1a0026ee:	2201      	movs	r2, #1
1a0026f0:	4629      	mov	r1, r5
1a0026f2:	2004      	movs	r0, #4
1a0026f4:	f000 fac8 	bl	1a002c88 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0026f8:	4a4a      	ldr	r2, [pc, #296]	; (1a002824 <Chip_SetupCoreClock+0x14c>)
1a0026fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0026fc:	f043 0301 	orr.w	r3, r3, #1
1a002700:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002702:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002706:	a901      	add	r1, sp, #4
1a002708:	4630      	mov	r0, r6
1a00270a:	f000 fa35 	bl	1a002b78 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00270e:	4b46      	ldr	r3, [pc, #280]	; (1a002828 <Chip_SetupCoreClock+0x150>)
1a002710:	429e      	cmp	r6, r3
1a002712:	d916      	bls.n	1a002742 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002714:	9b01      	ldr	r3, [sp, #4]
1a002716:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00271a:	d003      	beq.n	1a002724 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00271c:	e7fe      	b.n	1a00271c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00271e:	f000 f98d 	bl	1a002a3c <Chip_Clock_EnableCrystal>
1a002722:	e7e3      	b.n	1a0026ec <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002724:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002728:	d005      	beq.n	1a002736 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00272a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00272e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002730:	2500      	movs	r5, #0
			direct = 1;
1a002732:	2601      	movs	r6, #1
1a002734:	e007      	b.n	1a002746 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002736:	9b04      	ldr	r3, [sp, #16]
1a002738:	3301      	adds	r3, #1
1a00273a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00273c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00273e:	2600      	movs	r6, #0
1a002740:	e001      	b.n	1a002746 <Chip_SetupCoreClock+0x6e>
1a002742:	2500      	movs	r5, #0
1a002744:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002746:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00274a:	9b01      	ldr	r3, [sp, #4]
1a00274c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002750:	9a05      	ldr	r2, [sp, #20]
1a002752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002756:	9a03      	ldr	r2, [sp, #12]
1a002758:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00275c:	9a04      	ldr	r2, [sp, #16]
1a00275e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002766:	4a2f      	ldr	r2, [pc, #188]	; (1a002824 <Chip_SetupCoreClock+0x14c>)
1a002768:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00276a:	4b2e      	ldr	r3, [pc, #184]	; (1a002824 <Chip_SetupCoreClock+0x14c>)
1a00276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00276e:	f013 0f01 	tst.w	r3, #1
1a002772:	d0fa      	beq.n	1a00276a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002774:	2300      	movs	r3, #0
1a002776:	2201      	movs	r2, #1
1a002778:	2109      	movs	r1, #9
1a00277a:	2004      	movs	r0, #4
1a00277c:	f000 fa84 	bl	1a002c88 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002780:	b306      	cbz	r6, 1a0027c4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002782:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002786:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002788:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00278a:	1e5a      	subs	r2, r3, #1
1a00278c:	9209      	str	r2, [sp, #36]	; 0x24
1a00278e:	2b00      	cmp	r3, #0
1a002790:	d1fa      	bne.n	1a002788 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002792:	9b01      	ldr	r3, [sp, #4]
1a002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002798:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00279a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00279e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0027a2:	9a05      	ldr	r2, [sp, #20]
1a0027a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0027a8:	9a03      	ldr	r2, [sp, #12]
1a0027aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0027ae:	9a04      	ldr	r2, [sp, #16]
1a0027b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0027b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0027b8:	4a1a      	ldr	r2, [pc, #104]	; (1a002824 <Chip_SetupCoreClock+0x14c>)
1a0027ba:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0027bc:	2c00      	cmp	r4, #0
1a0027be:	d12e      	bne.n	1a00281e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0027c0:	b00a      	add	sp, #40	; 0x28
1a0027c2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0027c4:	2d00      	cmp	r5, #0
1a0027c6:	d0f9      	beq.n	1a0027bc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0027c8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0027cc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0027ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0027d0:	1e5a      	subs	r2, r3, #1
1a0027d2:	9209      	str	r2, [sp, #36]	; 0x24
1a0027d4:	2b00      	cmp	r3, #0
1a0027d6:	d1fa      	bne.n	1a0027ce <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0027d8:	9b04      	ldr	r3, [sp, #16]
1a0027da:	1e5a      	subs	r2, r3, #1
1a0027dc:	9204      	str	r2, [sp, #16]
1a0027de:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0027e2:	9b01      	ldr	r3, [sp, #4]
1a0027e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0027e8:	9905      	ldr	r1, [sp, #20]
1a0027ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0027ee:	9903      	ldr	r1, [sp, #12]
1a0027f0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0027f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0027f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0027fc:	4a09      	ldr	r2, [pc, #36]	; (1a002824 <Chip_SetupCoreClock+0x14c>)
1a0027fe:	6453      	str	r3, [r2, #68]	; 0x44
1a002800:	e7dc      	b.n	1a0027bc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002802:	480a      	ldr	r0, [pc, #40]	; (1a00282c <Chip_SetupCoreClock+0x154>)
1a002804:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002808:	78cb      	ldrb	r3, [r1, #3]
1a00280a:	788a      	ldrb	r2, [r1, #2]
1a00280c:	7849      	ldrb	r1, [r1, #1]
1a00280e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002812:	f000 fa39 	bl	1a002c88 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002816:	3401      	adds	r4, #1
1a002818:	2c11      	cmp	r4, #17
1a00281a:	d9f2      	bls.n	1a002802 <Chip_SetupCoreClock+0x12a>
1a00281c:	e7d0      	b.n	1a0027c0 <Chip_SetupCoreClock+0xe8>
1a00281e:	2400      	movs	r4, #0
1a002820:	e7fa      	b.n	1a002818 <Chip_SetupCoreClock+0x140>
1a002822:	bf00      	nop
1a002824:	40050000 	.word	0x40050000
1a002828:	068e7780 	.word	0x068e7780
1a00282c:	1a005074 	.word	0x1a005074

1a002830 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002830:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002832:	2069      	movs	r0, #105	; 0x69
1a002834:	f000 fab2 	bl	1a002d9c <Chip_Clock_GetRate>
1a002838:	4b01      	ldr	r3, [pc, #4]	; (1a002840 <SystemCoreClockUpdate+0x10>)
1a00283a:	6018      	str	r0, [r3, #0]
}
1a00283c:	bd08      	pop	{r3, pc}
1a00283e:	bf00      	nop
1a002840:	10002314 	.word	0x10002314

1a002844 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002844:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002846:	680b      	ldr	r3, [r1, #0]
1a002848:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00284c:	d002      	beq.n	1a002854 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00284e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002852:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002854:	4607      	mov	r7, r0
1a002856:	2501      	movs	r5, #1
1a002858:	e03a      	b.n	1a0028d0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00285a:	694b      	ldr	r3, [r1, #20]
1a00285c:	fb03 f302 	mul.w	r3, r3, r2
1a002860:	fbb3 f3f5 	udiv	r3, r3, r5
1a002864:	e01c      	b.n	1a0028a0 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002866:	461c      	mov	r4, r3
	if (val < 0)
1a002868:	ebb0 0c04 	subs.w	ip, r0, r4
1a00286c:	d427      	bmi.n	1a0028be <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00286e:	4567      	cmp	r7, ip
1a002870:	d906      	bls.n	1a002880 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002872:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002874:	1c77      	adds	r7, r6, #1
1a002876:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002878:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00287a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00287c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00287e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002880:	3201      	adds	r2, #1
1a002882:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002886:	dc1d      	bgt.n	1a0028c4 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a002888:	680c      	ldr	r4, [r1, #0]
1a00288a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00288e:	d0e4      	beq.n	1a00285a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002890:	1c73      	adds	r3, r6, #1
1a002892:	fa02 fc03 	lsl.w	ip, r2, r3
1a002896:	694b      	ldr	r3, [r1, #20]
1a002898:	fb03 f30c 	mul.w	r3, r3, ip
1a00289c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0028a0:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0028dc <pll_calc_divs+0x98>
1a0028a4:	4563      	cmp	r3, ip
1a0028a6:	d9eb      	bls.n	1a002880 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0028a8:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0028e0 <pll_calc_divs+0x9c>
1a0028ac:	4563      	cmp	r3, ip
1a0028ae:	d809      	bhi.n	1a0028c4 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0028b0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0028b4:	d1d7      	bne.n	1a002866 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0028b6:	1c74      	adds	r4, r6, #1
1a0028b8:	fa23 f404 	lsr.w	r4, r3, r4
1a0028bc:	e7d4      	b.n	1a002868 <pll_calc_divs+0x24>
		return -val;
1a0028be:	f1cc 0c00 	rsb	ip, ip, #0
1a0028c2:	e7d4      	b.n	1a00286e <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0028c4:	3601      	adds	r6, #1
1a0028c6:	2e03      	cmp	r6, #3
1a0028c8:	dc01      	bgt.n	1a0028ce <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0028ca:	2201      	movs	r2, #1
1a0028cc:	e7d9      	b.n	1a002882 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0028ce:	3501      	adds	r5, #1
1a0028d0:	2d04      	cmp	r5, #4
1a0028d2:	dc01      	bgt.n	1a0028d8 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0028d4:	2600      	movs	r6, #0
1a0028d6:	e7f6      	b.n	1a0028c6 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0028d8:	bcf0      	pop	{r4, r5, r6, r7}
1a0028da:	4770      	bx	lr
1a0028dc:	094c5eff 	.word	0x094c5eff
1a0028e0:	1312d000 	.word	0x1312d000

1a0028e4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0028e6:	b099      	sub	sp, #100	; 0x64
1a0028e8:	4605      	mov	r5, r0
1a0028ea:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0028ec:	225c      	movs	r2, #92	; 0x5c
1a0028ee:	2100      	movs	r1, #0
1a0028f0:	a801      	add	r0, sp, #4
1a0028f2:	f001 fcf6 	bl	1a0042e2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0028f6:	2380      	movs	r3, #128	; 0x80
1a0028f8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0028fa:	6963      	ldr	r3, [r4, #20]
1a0028fc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0028fe:	7923      	ldrb	r3, [r4, #4]
1a002900:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002904:	4669      	mov	r1, sp
1a002906:	4628      	mov	r0, r5
1a002908:	f7ff ff9c 	bl	1a002844 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00290c:	9b06      	ldr	r3, [sp, #24]
1a00290e:	42ab      	cmp	r3, r5
1a002910:	d027      	beq.n	1a002962 <pll_get_frac+0x7e>
	if (val < 0)
1a002912:	1aeb      	subs	r3, r5, r3
1a002914:	d42e      	bmi.n	1a002974 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002916:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002918:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00291a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00291e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002920:	6963      	ldr	r3, [r4, #20]
1a002922:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002924:	7923      	ldrb	r3, [r4, #4]
1a002926:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00292a:	a910      	add	r1, sp, #64	; 0x40
1a00292c:	4628      	mov	r0, r5
1a00292e:	f7ff ff89 	bl	1a002844 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002932:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002934:	42ab      	cmp	r3, r5
1a002936:	d01f      	beq.n	1a002978 <pll_get_frac+0x94>
	if (val < 0)
1a002938:	1aeb      	subs	r3, r5, r3
1a00293a:	d425      	bmi.n	1a002988 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00293c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00293e:	4b2b      	ldr	r3, [pc, #172]	; (1a0029ec <pll_get_frac+0x108>)
1a002940:	429d      	cmp	r5, r3
1a002942:	d923      	bls.n	1a00298c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002946:	1aed      	subs	r5, r5, r3
1a002948:	d433      	bmi.n	1a0029b2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00294a:	42ae      	cmp	r6, r5
1a00294c:	dc3b      	bgt.n	1a0029c6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00294e:	42be      	cmp	r6, r7
1a002950:	dc31      	bgt.n	1a0029b6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002952:	466d      	mov	r5, sp
1a002954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002958:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00295c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002960:	e006      	b.n	1a002970 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002962:	466d      	mov	r5, sp
1a002964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002968:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00296c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002970:	b019      	add	sp, #100	; 0x64
1a002972:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002974:	425b      	negs	r3, r3
1a002976:	e7ce      	b.n	1a002916 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002978:	ad10      	add	r5, sp, #64	; 0x40
1a00297a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00297c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00297e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002986:	e7f3      	b.n	1a002970 <pll_get_frac+0x8c>
		return -val;
1a002988:	425b      	negs	r3, r3
1a00298a:	e7d7      	b.n	1a00293c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00298c:	2340      	movs	r3, #64	; 0x40
1a00298e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002990:	6963      	ldr	r3, [r4, #20]
1a002992:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002994:	a908      	add	r1, sp, #32
1a002996:	4628      	mov	r0, r5
1a002998:	f7ff ff54 	bl	1a002844 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00299c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00299e:	42ab      	cmp	r3, r5
1a0029a0:	d1d0      	bne.n	1a002944 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0029a2:	ad08      	add	r5, sp, #32
1a0029a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0029b0:	e7de      	b.n	1a002970 <pll_get_frac+0x8c>
		return -val;
1a0029b2:	426d      	negs	r5, r5
1a0029b4:	e7c9      	b.n	1a00294a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0029b6:	ad10      	add	r5, sp, #64	; 0x40
1a0029b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029c4:	e7d4      	b.n	1a002970 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0029c6:	42af      	cmp	r7, r5
1a0029c8:	db07      	blt.n	1a0029da <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0029ca:	ad08      	add	r5, sp, #32
1a0029cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029d8:	e7ca      	b.n	1a002970 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0029da:	ad10      	add	r5, sp, #64	; 0x40
1a0029dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029e8:	e7c2      	b.n	1a002970 <pll_get_frac+0x8c>
1a0029ea:	bf00      	nop
1a0029ec:	068e7780 	.word	0x068e7780

1a0029f0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0029f0:	b430      	push	{r4, r5}
1a0029f2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0029f4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0029f6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0029f8:	e000      	b.n	1a0029fc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0029fa:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0029fc:	281c      	cmp	r0, #28
1a0029fe:	d118      	bne.n	1a002a32 <Chip_Clock_FindBaseClock+0x42>
1a002a00:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a04:	0051      	lsls	r1, r2, #1
1a002a06:	4a0c      	ldr	r2, [pc, #48]	; (1a002a38 <Chip_Clock_FindBaseClock+0x48>)
1a002a08:	440a      	add	r2, r1
1a002a0a:	7914      	ldrb	r4, [r2, #4]
1a002a0c:	4284      	cmp	r4, r0
1a002a0e:	d010      	beq.n	1a002a32 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002a10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002a14:	004a      	lsls	r2, r1, #1
1a002a16:	4908      	ldr	r1, [pc, #32]	; (1a002a38 <Chip_Clock_FindBaseClock+0x48>)
1a002a18:	5a8a      	ldrh	r2, [r1, r2]
1a002a1a:	42aa      	cmp	r2, r5
1a002a1c:	d8ed      	bhi.n	1a0029fa <Chip_Clock_FindBaseClock+0xa>
1a002a1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a22:	0051      	lsls	r1, r2, #1
1a002a24:	4a04      	ldr	r2, [pc, #16]	; (1a002a38 <Chip_Clock_FindBaseClock+0x48>)
1a002a26:	440a      	add	r2, r1
1a002a28:	8852      	ldrh	r2, [r2, #2]
1a002a2a:	42aa      	cmp	r2, r5
1a002a2c:	d3e5      	bcc.n	1a0029fa <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002a2e:	4620      	mov	r0, r4
1a002a30:	e7e4      	b.n	1a0029fc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002a32:	bc30      	pop	{r4, r5}
1a002a34:	4770      	bx	lr
1a002a36:	bf00      	nop
1a002a38:	1a0050c8 	.word	0x1a0050c8

1a002a3c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002a3c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002a42:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002a44:	4a0d      	ldr	r2, [pc, #52]	; (1a002a7c <Chip_Clock_EnableCrystal+0x40>)
1a002a46:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002a48:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002a4c:	6992      	ldr	r2, [r2, #24]
1a002a4e:	428a      	cmp	r2, r1
1a002a50:	d001      	beq.n	1a002a56 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a52:	4a0a      	ldr	r2, [pc, #40]	; (1a002a7c <Chip_Clock_EnableCrystal+0x40>)
1a002a54:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002a56:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002a5a:	4a09      	ldr	r2, [pc, #36]	; (1a002a80 <Chip_Clock_EnableCrystal+0x44>)
1a002a5c:	6811      	ldr	r1, [r2, #0]
1a002a5e:	4a09      	ldr	r2, [pc, #36]	; (1a002a84 <Chip_Clock_EnableCrystal+0x48>)
1a002a60:	4291      	cmp	r1, r2
1a002a62:	d901      	bls.n	1a002a68 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002a64:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a68:	4a04      	ldr	r2, [pc, #16]	; (1a002a7c <Chip_Clock_EnableCrystal+0x40>)
1a002a6a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002a6c:	9b01      	ldr	r3, [sp, #4]
1a002a6e:	1e5a      	subs	r2, r3, #1
1a002a70:	9201      	str	r2, [sp, #4]
1a002a72:	2b00      	cmp	r3, #0
1a002a74:	d1fa      	bne.n	1a002a6c <Chip_Clock_EnableCrystal+0x30>
}
1a002a76:	b002      	add	sp, #8
1a002a78:	4770      	bx	lr
1a002a7a:	bf00      	nop
1a002a7c:	40050000 	.word	0x40050000
1a002a80:	1a005070 	.word	0x1a005070
1a002a84:	01312cff 	.word	0x01312cff

1a002a88 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002a88:	3012      	adds	r0, #18
1a002a8a:	4b05      	ldr	r3, [pc, #20]	; (1a002aa0 <Chip_Clock_GetDividerSource+0x18>)
1a002a8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002a90:	f010 0f01 	tst.w	r0, #1
1a002a94:	d102      	bne.n	1a002a9c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002a96:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002a9a:	4770      	bx	lr
		return CLKINPUT_PD;
1a002a9c:	2011      	movs	r0, #17
}
1a002a9e:	4770      	bx	lr
1a002aa0:	40050000 	.word	0x40050000

1a002aa4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002aa4:	f100 0212 	add.w	r2, r0, #18
1a002aa8:	4b03      	ldr	r3, [pc, #12]	; (1a002ab8 <Chip_Clock_GetDividerDivisor+0x14>)
1a002aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002aae:	4b03      	ldr	r3, [pc, #12]	; (1a002abc <Chip_Clock_GetDividerDivisor+0x18>)
1a002ab0:	5c18      	ldrb	r0, [r3, r0]
}
1a002ab2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002ab6:	4770      	bx	lr
1a002ab8:	40050000 	.word	0x40050000
1a002abc:	1a0050c0 	.word	0x1a0050c0

1a002ac0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002ac0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002ac2:	2810      	cmp	r0, #16
1a002ac4:	d80a      	bhi.n	1a002adc <Chip_Clock_GetClockInputHz+0x1c>
1a002ac6:	e8df f000 	tbb	[pc, r0]
1a002aca:	0b44      	.short	0x0b44
1a002acc:	0921180d 	.word	0x0921180d
1a002ad0:	2d2a2724 	.word	0x2d2a2724
1a002ad4:	34300909 	.word	0x34300909
1a002ad8:	3c38      	.short	0x3c38
1a002ada:	40          	.byte	0x40
1a002adb:	00          	.byte	0x00
	uint32_t rate = 0;
1a002adc:	2000      	movs	r0, #0
1a002ade:	e03a      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002ae0:	481e      	ldr	r0, [pc, #120]	; (1a002b5c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002ae2:	e038      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002ae4:	4b1e      	ldr	r3, [pc, #120]	; (1a002b60 <Chip_Clock_GetClockInputHz+0xa0>)
1a002ae6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002aea:	f003 0307 	and.w	r3, r3, #7
1a002aee:	2b04      	cmp	r3, #4
1a002af0:	d001      	beq.n	1a002af6 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002af2:	481c      	ldr	r0, [pc, #112]	; (1a002b64 <Chip_Clock_GetClockInputHz+0xa4>)
1a002af4:	e02f      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002af6:	2000      	movs	r0, #0
1a002af8:	e02d      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002afa:	4b19      	ldr	r3, [pc, #100]	; (1a002b60 <Chip_Clock_GetClockInputHz+0xa0>)
1a002afc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b00:	f003 0307 	and.w	r3, r3, #7
1a002b04:	2b04      	cmp	r3, #4
1a002b06:	d027      	beq.n	1a002b58 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002b08:	4816      	ldr	r0, [pc, #88]	; (1a002b64 <Chip_Clock_GetClockInputHz+0xa4>)
1a002b0a:	e024      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002b0c:	4b16      	ldr	r3, [pc, #88]	; (1a002b68 <Chip_Clock_GetClockInputHz+0xa8>)
1a002b0e:	6818      	ldr	r0, [r3, #0]
		break;
1a002b10:	e021      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002b12:	4b16      	ldr	r3, [pc, #88]	; (1a002b6c <Chip_Clock_GetClockInputHz+0xac>)
1a002b14:	6818      	ldr	r0, [r3, #0]
		break;
1a002b16:	e01e      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002b18:	4b15      	ldr	r3, [pc, #84]	; (1a002b70 <Chip_Clock_GetClockInputHz+0xb0>)
1a002b1a:	6818      	ldr	r0, [r3, #0]
		break;
1a002b1c:	e01b      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002b1e:	4b14      	ldr	r3, [pc, #80]	; (1a002b70 <Chip_Clock_GetClockInputHz+0xb0>)
1a002b20:	6858      	ldr	r0, [r3, #4]
		break;
1a002b22:	e018      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002b24:	f000 f868 	bl	1a002bf8 <Chip_Clock_GetMainPLLHz>
		break;
1a002b28:	e015      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002b2a:	2100      	movs	r1, #0
1a002b2c:	f000 f89a 	bl	1a002c64 <Chip_Clock_GetDivRate>
		break;
1a002b30:	e011      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002b32:	2101      	movs	r1, #1
1a002b34:	f000 f896 	bl	1a002c64 <Chip_Clock_GetDivRate>
		break;
1a002b38:	e00d      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002b3a:	2102      	movs	r1, #2
1a002b3c:	f000 f892 	bl	1a002c64 <Chip_Clock_GetDivRate>
		break;
1a002b40:	e009      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002b42:	2103      	movs	r1, #3
1a002b44:	f000 f88e 	bl	1a002c64 <Chip_Clock_GetDivRate>
		break;
1a002b48:	e005      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002b4a:	2104      	movs	r1, #4
1a002b4c:	f000 f88a 	bl	1a002c64 <Chip_Clock_GetDivRate>
		break;
1a002b50:	e001      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002b52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002b56:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002b58:	4806      	ldr	r0, [pc, #24]	; (1a002b74 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002b5a:	e7fc      	b.n	1a002b56 <Chip_Clock_GetClockInputHz+0x96>
1a002b5c:	00b71b00 	.word	0x00b71b00
1a002b60:	40043000 	.word	0x40043000
1a002b64:	017d7840 	.word	0x017d7840
1a002b68:	1a005044 	.word	0x1a005044
1a002b6c:	1a005070 	.word	0x1a005070
1a002b70:	10002228 	.word	0x10002228
1a002b74:	02faf080 	.word	0x02faf080

1a002b78 <Chip_Clock_CalcMainPLLValue>:
{
1a002b78:	b538      	push	{r3, r4, r5, lr}
1a002b7a:	4605      	mov	r5, r0
1a002b7c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002b7e:	7908      	ldrb	r0, [r1, #4]
1a002b80:	f7ff ff9e 	bl	1a002ac0 <Chip_Clock_GetClockInputHz>
1a002b84:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002b86:	4b19      	ldr	r3, [pc, #100]	; (1a002bec <Chip_Clock_CalcMainPLLValue+0x74>)
1a002b88:	442b      	add	r3, r5
1a002b8a:	4a19      	ldr	r2, [pc, #100]	; (1a002bf0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002b8c:	4293      	cmp	r3, r2
1a002b8e:	d821      	bhi.n	1a002bd4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002b90:	b318      	cbz	r0, 1a002bda <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002b92:	2380      	movs	r3, #128	; 0x80
1a002b94:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002b96:	2300      	movs	r3, #0
1a002b98:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002b9a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002b9c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002ba0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002ba2:	4a14      	ldr	r2, [pc, #80]	; (1a002bf4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002ba4:	4295      	cmp	r5, r2
1a002ba6:	d903      	bls.n	1a002bb0 <Chip_Clock_CalcMainPLLValue+0x38>
1a002ba8:	fb03 f000 	mul.w	r0, r3, r0
1a002bac:	42a8      	cmp	r0, r5
1a002bae:	d007      	beq.n	1a002bc0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002bb0:	4621      	mov	r1, r4
1a002bb2:	4628      	mov	r0, r5
1a002bb4:	f7ff fe96 	bl	1a0028e4 <pll_get_frac>
		if (!ppll->nsel) {
1a002bb8:	68a3      	ldr	r3, [r4, #8]
1a002bba:	b18b      	cbz	r3, 1a002be0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002bbc:	3b01      	subs	r3, #1
1a002bbe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002bc0:	6923      	ldr	r3, [r4, #16]
1a002bc2:	b183      	cbz	r3, 1a002be6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002bc4:	68e2      	ldr	r2, [r4, #12]
1a002bc6:	b10a      	cbz	r2, 1a002bcc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002bc8:	3a01      	subs	r2, #1
1a002bca:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002bcc:	3b01      	subs	r3, #1
1a002bce:	6123      	str	r3, [r4, #16]
	return 0;
1a002bd0:	2000      	movs	r0, #0
}
1a002bd2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002bd4:	f04f 30ff 	mov.w	r0, #4294967295
1a002bd8:	e7fb      	b.n	1a002bd2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002bda:	f04f 30ff 	mov.w	r0, #4294967295
1a002bde:	e7f8      	b.n	1a002bd2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002be0:	f04f 30ff 	mov.w	r0, #4294967295
1a002be4:	e7f5      	b.n	1a002bd2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002be6:	f04f 30ff 	mov.w	r0, #4294967295
1a002bea:	e7f2      	b.n	1a002bd2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002bec:	ff6b3a10 	.word	0xff6b3a10
1a002bf0:	0b940510 	.word	0x0b940510
1a002bf4:	094c5eff 	.word	0x094c5eff

1a002bf8 <Chip_Clock_GetMainPLLHz>:
{
1a002bf8:	b530      	push	{r4, r5, lr}
1a002bfa:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002bfc:	4d17      	ldr	r5, [pc, #92]	; (1a002c5c <Chip_Clock_GetMainPLLHz+0x64>)
1a002bfe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002c00:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002c04:	f7ff ff5c 	bl	1a002ac0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002c08:	4b15      	ldr	r3, [pc, #84]	; (1a002c60 <Chip_Clock_GetMainPLLHz+0x68>)
1a002c0a:	681b      	ldr	r3, [r3, #0]
1a002c0c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002c0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002c10:	f013 0f01 	tst.w	r3, #1
1a002c14:	d020      	beq.n	1a002c58 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a002c16:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002c1a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002c1e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002c22:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002c26:	3301      	adds	r3, #1
	n = nsel + 1;
1a002c28:	3201      	adds	r2, #1
	p = ptab[psel];
1a002c2a:	f10d 0c08 	add.w	ip, sp, #8
1a002c2e:	4461      	add	r1, ip
1a002c30:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002c34:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002c38:	d108      	bne.n	1a002c4c <Chip_Clock_GetMainPLLHz+0x54>
1a002c3a:	b93d      	cbnz	r5, 1a002c4c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002c3c:	0049      	lsls	r1, r1, #1
1a002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
1a002c42:	fbb0 f0f2 	udiv	r0, r0, r2
1a002c46:	fb00 f003 	mul.w	r0, r0, r3
1a002c4a:	e003      	b.n	1a002c54 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002c4c:	fbb0 f0f2 	udiv	r0, r0, r2
1a002c50:	fb03 f000 	mul.w	r0, r3, r0
}
1a002c54:	b003      	add	sp, #12
1a002c56:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002c58:	2000      	movs	r0, #0
1a002c5a:	e7fb      	b.n	1a002c54 <Chip_Clock_GetMainPLLHz+0x5c>
1a002c5c:	40050000 	.word	0x40050000
1a002c60:	1a0050bc 	.word	0x1a0050bc

1a002c64 <Chip_Clock_GetDivRate>:
{
1a002c64:	b538      	push	{r3, r4, r5, lr}
1a002c66:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002c68:	4608      	mov	r0, r1
1a002c6a:	f7ff ff0d 	bl	1a002a88 <Chip_Clock_GetDividerSource>
1a002c6e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002c70:	4620      	mov	r0, r4
1a002c72:	f7ff ff17 	bl	1a002aa4 <Chip_Clock_GetDividerDivisor>
1a002c76:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002c78:	4628      	mov	r0, r5
1a002c7a:	f7ff ff21 	bl	1a002ac0 <Chip_Clock_GetClockInputHz>
1a002c7e:	3401      	adds	r4, #1
}
1a002c80:	fbb0 f0f4 	udiv	r0, r0, r4
1a002c84:	bd38      	pop	{r3, r4, r5, pc}
1a002c86:	Address 0x1a002c86 is out of bounds.


1a002c88 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002c88:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002c8a:	f100 0416 	add.w	r4, r0, #22
1a002c8e:	00a4      	lsls	r4, r4, #2
1a002c90:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002c94:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002c98:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002c9a:	281b      	cmp	r0, #27
1a002c9c:	d813      	bhi.n	1a002cc6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002c9e:	2911      	cmp	r1, #17
1a002ca0:	d01a      	beq.n	1a002cd8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002ca2:	4d0e      	ldr	r5, [pc, #56]	; (1a002cdc <Chip_Clock_SetBaseClock+0x54>)
1a002ca4:	4025      	ands	r5, r4

			if (autoblocken) {
1a002ca6:	b10a      	cbz	r2, 1a002cac <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002ca8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002cac:	b10b      	cbz	r3, 1a002cb2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002cae:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002cb2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002cb6:	3016      	adds	r0, #22
1a002cb8:	0080      	lsls	r0, r0, #2
1a002cba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002cbe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002cc2:	6045      	str	r5, [r0, #4]
1a002cc4:	e008      	b.n	1a002cd8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002cc6:	f044 0401 	orr.w	r4, r4, #1
1a002cca:	3016      	adds	r0, #22
1a002ccc:	0080      	lsls	r0, r0, #2
1a002cce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002cd2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002cd6:	6044      	str	r4, [r0, #4]
	}
}
1a002cd8:	bc30      	pop	{r4, r5}
1a002cda:	4770      	bx	lr
1a002cdc:	e0fff7fe 	.word	0xe0fff7fe

1a002ce0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002ce0:	281b      	cmp	r0, #27
1a002ce2:	d80c      	bhi.n	1a002cfe <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ce4:	3016      	adds	r0, #22
1a002ce6:	0080      	lsls	r0, r0, #2
1a002ce8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002cec:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002cf0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002cf2:	f010 0f01 	tst.w	r0, #1
1a002cf6:	d104      	bne.n	1a002d02 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002cf8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002cfc:	4770      	bx	lr
		return CLKINPUT_PD;
1a002cfe:	2011      	movs	r0, #17
1a002d00:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d02:	2011      	movs	r0, #17
}
1a002d04:	4770      	bx	lr

1a002d06 <Chip_Clock_GetBaseClocktHz>:
{
1a002d06:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002d08:	f7ff ffea 	bl	1a002ce0 <Chip_Clock_GetBaseClock>
1a002d0c:	f7ff fed8 	bl	1a002ac0 <Chip_Clock_GetClockInputHz>
}
1a002d10:	bd08      	pop	{r3, pc}
1a002d12:	Address 0x1a002d12 is out of bounds.


1a002d14 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002d14:	b971      	cbnz	r1, 1a002d34 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002d16:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002d18:	b10a      	cbz	r2, 1a002d1e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002d1a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002d1e:	2b02      	cmp	r3, #2
1a002d20:	d00a      	beq.n	1a002d38 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002d22:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d26:	d30a      	bcc.n	1a002d3e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002d28:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d2c:	4b06      	ldr	r3, [pc, #24]	; (1a002d48 <Chip_Clock_EnableOpts+0x34>)
1a002d2e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002d32:	4770      	bx	lr
		reg |= (1 << 1);
1a002d34:	2103      	movs	r1, #3
1a002d36:	e7ef      	b.n	1a002d18 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002d38:	f041 0120 	orr.w	r1, r1, #32
1a002d3c:	e7f1      	b.n	1a002d22 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002d3e:	3020      	adds	r0, #32
1a002d40:	4b02      	ldr	r3, [pc, #8]	; (1a002d4c <Chip_Clock_EnableOpts+0x38>)
1a002d42:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002d46:	4770      	bx	lr
1a002d48:	40052000 	.word	0x40052000
1a002d4c:	40051000 	.word	0x40051000

1a002d50 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002d50:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d54:	d309      	bcc.n	1a002d6a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002d56:	4a09      	ldr	r2, [pc, #36]	; (1a002d7c <Chip_Clock_Enable+0x2c>)
1a002d58:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d5c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d60:	f043 0301 	orr.w	r3, r3, #1
1a002d64:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002d68:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002d6a:	4a05      	ldr	r2, [pc, #20]	; (1a002d80 <Chip_Clock_Enable+0x30>)
1a002d6c:	3020      	adds	r0, #32
1a002d6e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d72:	f043 0301 	orr.w	r3, r3, #1
1a002d76:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002d7a:	4770      	bx	lr
1a002d7c:	40052000 	.word	0x40052000
1a002d80:	40051000 	.word	0x40051000

1a002d84 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a002d84:	4b04      	ldr	r3, [pc, #16]	; (1a002d98 <Chip_Clock_RTCEnable+0x14>)
1a002d86:	685a      	ldr	r2, [r3, #4]
1a002d88:	f022 020c 	bic.w	r2, r2, #12
1a002d8c:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a002d8e:	685a      	ldr	r2, [r3, #4]
1a002d90:	f042 0203 	orr.w	r2, r2, #3
1a002d94:	605a      	str	r2, [r3, #4]
}
1a002d96:	4770      	bx	lr
1a002d98:	40043000 	.word	0x40043000

1a002d9c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002d9c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002d9e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002da2:	d309      	bcc.n	1a002db8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002da4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002da8:	4a0d      	ldr	r2, [pc, #52]	; (1a002de0 <Chip_Clock_GetRate+0x44>)
1a002daa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002dae:	f014 0f01 	tst.w	r4, #1
1a002db2:	d107      	bne.n	1a002dc4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002db4:	2000      	movs	r0, #0
	}

	return rate;
}
1a002db6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002db8:	f100 0320 	add.w	r3, r0, #32
1a002dbc:	4a09      	ldr	r2, [pc, #36]	; (1a002de4 <Chip_Clock_GetRate+0x48>)
1a002dbe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002dc2:	e7f4      	b.n	1a002dae <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002dc4:	f7ff fe14 	bl	1a0029f0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002dc8:	f7ff ff9d 	bl	1a002d06 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002dcc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002dd0:	d103      	bne.n	1a002dda <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002dd2:	2301      	movs	r3, #1
		rate = rate / div;
1a002dd4:	fbb0 f0f3 	udiv	r0, r0, r3
1a002dd8:	e7ed      	b.n	1a002db6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002dda:	2302      	movs	r3, #2
1a002ddc:	e7fa      	b.n	1a002dd4 <Chip_Clock_GetRate+0x38>
1a002dde:	bf00      	nop
1a002de0:	40052000 	.word	0x40052000
1a002de4:	40051000 	.word	0x40051000

1a002de8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002de8:	4b09      	ldr	r3, [pc, #36]	; (1a002e10 <Chip_UART_GetIndex+0x28>)
1a002dea:	4298      	cmp	r0, r3
1a002dec:	d009      	beq.n	1a002e02 <Chip_UART_GetIndex+0x1a>
1a002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002df2:	4298      	cmp	r0, r3
1a002df4:	d007      	beq.n	1a002e06 <Chip_UART_GetIndex+0x1e>
1a002df6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002dfa:	4298      	cmp	r0, r3
1a002dfc:	d005      	beq.n	1a002e0a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002dfe:	2000      	movs	r0, #0
1a002e00:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002e02:	2002      	movs	r0, #2
1a002e04:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002e06:	2003      	movs	r0, #3
1a002e08:	4770      	bx	lr
			return 1;
1a002e0a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002e0c:	4770      	bx	lr
1a002e0e:	bf00      	nop
1a002e10:	400c1000 	.word	0x400c1000

1a002e14 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002e14:	b530      	push	{r4, r5, lr}
1a002e16:	b083      	sub	sp, #12
1a002e18:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002e1a:	f7ff ffe5 	bl	1a002de8 <Chip_UART_GetIndex>
1a002e1e:	2301      	movs	r3, #1
1a002e20:	461a      	mov	r2, r3
1a002e22:	4619      	mov	r1, r3
1a002e24:	4d0e      	ldr	r5, [pc, #56]	; (1a002e60 <Chip_UART_Init+0x4c>)
1a002e26:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002e2a:	f7ff ff73 	bl	1a002d14 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002e2e:	2307      	movs	r3, #7
1a002e30:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002e32:	2300      	movs	r3, #0
1a002e34:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002e36:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002e38:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002e3a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002e3c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002e3e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002e40:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002e42:	4b08      	ldr	r3, [pc, #32]	; (1a002e64 <Chip_UART_Init+0x50>)
1a002e44:	429c      	cmp	r4, r3
1a002e46:	d006      	beq.n	1a002e56 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002e48:	2303      	movs	r3, #3
1a002e4a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002e4c:	2310      	movs	r3, #16
1a002e4e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002e50:	9b01      	ldr	r3, [sp, #4]
}
1a002e52:	b003      	add	sp, #12
1a002e54:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002e56:	2300      	movs	r3, #0
1a002e58:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002e5a:	69a3      	ldr	r3, [r4, #24]
1a002e5c:	9301      	str	r3, [sp, #4]
1a002e5e:	e7f3      	b.n	1a002e48 <Chip_UART_Init+0x34>
1a002e60:	1a00513c 	.word	0x1a00513c
1a002e64:	40082000 	.word	0x40082000

1a002e68 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002e68:	b538      	push	{r3, r4, r5, lr}
1a002e6a:	4605      	mov	r5, r0
1a002e6c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002e6e:	f7ff ffbb 	bl	1a002de8 <Chip_UART_GetIndex>
1a002e72:	4b0c      	ldr	r3, [pc, #48]	; (1a002ea4 <Chip_UART_SetBaud+0x3c>)
1a002e74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002e78:	f7ff ff90 	bl	1a002d9c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002e7c:	0123      	lsls	r3, r4, #4
1a002e7e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a002e82:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002e84:	68ea      	ldr	r2, [r5, #12]
1a002e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002e8a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002e8c:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002e8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a002e92:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002e94:	68ea      	ldr	r2, [r5, #12]
1a002e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002e9a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002e9c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002ea0:	0900      	lsrs	r0, r0, #4
1a002ea2:	bd38      	pop	{r3, r4, r5, pc}
1a002ea4:	1a005134 	.word	0x1a005134

1a002ea8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002eac:	b083      	sub	sp, #12
1a002eae:	9001      	str	r0, [sp, #4]
1a002eb0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002eb2:	f7ff ff99 	bl	1a002de8 <Chip_UART_GetIndex>
1a002eb6:	4b32      	ldr	r3, [pc, #200]	; (1a002f80 <Chip_UART_SetBaudFDR+0xd8>)
1a002eb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002ebc:	f7ff ff6e 	bl	1a002d9c <Chip_Clock_GetRate>
1a002ec0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002ec2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002ec6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002ec8:	f04f 0b00 	mov.w	fp, #0
1a002ecc:	46a2      	mov	sl, r4
1a002ece:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a002ed0:	e02a      	b.n	1a002f28 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002ed2:	4242      	negs	r2, r0
				div ++;
1a002ed4:	1c4b      	adds	r3, r1, #1
1a002ed6:	e017      	b.n	1a002f08 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002ed8:	b30a      	cbz	r2, 1a002f1e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002eda:	4617      	mov	r7, r2
			sd = d;
1a002edc:	46ab      	mov	fp, r5
			sm = m;
1a002ede:	46a2      	mov	sl, r4
			sdiv = div;
1a002ee0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002ee2:	3501      	adds	r5, #1
1a002ee4:	42ac      	cmp	r4, r5
1a002ee6:	d91e      	bls.n	1a002f26 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002ee8:	0933      	lsrs	r3, r6, #4
1a002eea:	0730      	lsls	r0, r6, #28
1a002eec:	fba4 0100 	umull	r0, r1, r4, r0
1a002ef0:	fb04 1103 	mla	r1, r4, r3, r1
1a002ef4:	1962      	adds	r2, r4, r5
1a002ef6:	fb08 f202 	mul.w	r2, r8, r2
1a002efa:	2300      	movs	r3, #0
1a002efc:	f000 fe84 	bl	1a003c08 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002f00:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002f02:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002f04:	2800      	cmp	r0, #0
1a002f06:	dbe4      	blt.n	1a002ed2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002f08:	4297      	cmp	r7, r2
1a002f0a:	d3ea      	bcc.n	1a002ee2 <Chip_UART_SetBaudFDR+0x3a>
1a002f0c:	2b00      	cmp	r3, #0
1a002f0e:	d0e8      	beq.n	1a002ee2 <Chip_UART_SetBaudFDR+0x3a>
1a002f10:	0c19      	lsrs	r1, r3, #16
1a002f12:	d1e6      	bne.n	1a002ee2 <Chip_UART_SetBaudFDR+0x3a>
1a002f14:	2b02      	cmp	r3, #2
1a002f16:	d8df      	bhi.n	1a002ed8 <Chip_UART_SetBaudFDR+0x30>
1a002f18:	2d00      	cmp	r5, #0
1a002f1a:	d0dd      	beq.n	1a002ed8 <Chip_UART_SetBaudFDR+0x30>
1a002f1c:	e7e1      	b.n	1a002ee2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002f1e:	4617      	mov	r7, r2
			sd = d;
1a002f20:	46ab      	mov	fp, r5
			sm = m;
1a002f22:	46a2      	mov	sl, r4
			sdiv = div;
1a002f24:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002f26:	3401      	adds	r4, #1
1a002f28:	b11f      	cbz	r7, 1a002f32 <Chip_UART_SetBaudFDR+0x8a>
1a002f2a:	2c0f      	cmp	r4, #15
1a002f2c:	d801      	bhi.n	1a002f32 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002f2e:	2500      	movs	r5, #0
1a002f30:	e7d8      	b.n	1a002ee4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002f32:	f1b9 0f00 	cmp.w	r9, #0
1a002f36:	d01e      	beq.n	1a002f76 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002f38:	9a01      	ldr	r2, [sp, #4]
1a002f3a:	4611      	mov	r1, r2
1a002f3c:	68d3      	ldr	r3, [r2, #12]
1a002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002f42:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a002f44:	fa5f f389 	uxtb.w	r3, r9
1a002f48:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002f4a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002f4e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002f50:	68d3      	ldr	r3, [r2, #12]
1a002f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002f56:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002f58:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002f5c:	b2db      	uxtb	r3, r3
1a002f5e:	f00b 020f 	and.w	r2, fp, #15
1a002f62:	4313      	orrs	r3, r2
1a002f64:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002f66:	0933      	lsrs	r3, r6, #4
1a002f68:	fb0a f303 	mul.w	r3, sl, r3
1a002f6c:	44da      	add	sl, fp
1a002f6e:	fb09 f90a 	mul.w	r9, r9, sl
1a002f72:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002f76:	4648      	mov	r0, r9
1a002f78:	b003      	add	sp, #12
1a002f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f7e:	bf00      	nop
1a002f80:	1a005134 	.word	0x1a005134

1a002f84 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002f84:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002f86:	4a0b      	ldr	r2, [pc, #44]	; (1a002fb4 <SystemInit+0x30>)
1a002f88:	4b0b      	ldr	r3, [pc, #44]	; (1a002fb8 <SystemInit+0x34>)
1a002f8a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002f8c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002f90:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002f92:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002f96:	2b20      	cmp	r3, #32
1a002f98:	d004      	beq.n	1a002fa4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002f9a:	f7ff f875 	bl	1a002088 <Board_SystemInit>
   Board_Init();
1a002f9e:	f7ff f94b 	bl	1a002238 <Board_Init>
}
1a002fa2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002fa4:	4a04      	ldr	r2, [pc, #16]	; (1a002fb8 <SystemInit+0x34>)
1a002fa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002faa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002fae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002fb2:	e7f2      	b.n	1a002f9a <SystemInit+0x16>
1a002fb4:	1a000000 	.word	0x1a000000
1a002fb8:	e000ed00 	.word	0xe000ed00

1a002fbc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002fbc:	4b04      	ldr	r3, [pc, #16]	; (1a002fd0 <cyclesCounterInit+0x14>)
1a002fbe:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002fc0:	4a04      	ldr	r2, [pc, #16]	; (1a002fd4 <cyclesCounterInit+0x18>)
1a002fc2:	6813      	ldr	r3, [r2, #0]
1a002fc4:	f043 0301 	orr.w	r3, r3, #1
1a002fc8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002fca:	2001      	movs	r0, #1
1a002fcc:	4770      	bx	lr
1a002fce:	bf00      	nop
1a002fd0:	1000003c 	.word	0x1000003c
1a002fd4:	e0001000 	.word	0xe0001000

1a002fd8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002fd8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002fda:	4d0b      	ldr	r5, [pc, #44]	; (1a003008 <gpioObtainPinInit+0x30>)
1a002fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002fe0:	182c      	adds	r4, r5, r0
1a002fe2:	5628      	ldrsb	r0, [r5, r0]
1a002fe4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002fe6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002fea:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002fec:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002ff0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002ff2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002ff6:	9b02      	ldr	r3, [sp, #8]
1a002ff8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002ffa:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002ffe:	9b03      	ldr	r3, [sp, #12]
1a003000:	701a      	strb	r2, [r3, #0]
}
1a003002:	bc30      	pop	{r4, r5}
1a003004:	4770      	bx	lr
1a003006:	bf00      	nop
1a003008:	1a005144 	.word	0x1a005144

1a00300c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00300c:	f110 0f02 	cmn.w	r0, #2
1a003010:	f000 80c7 	beq.w	1a0031a2 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003014:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003018:	f000 80c5 	beq.w	1a0031a6 <gpioInit+0x19a>
{
1a00301c:	b570      	push	{r4, r5, r6, lr}
1a00301e:	b084      	sub	sp, #16
1a003020:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003022:	2300      	movs	r3, #0
1a003024:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003028:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00302c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003030:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003034:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003038:	f10d 030b 	add.w	r3, sp, #11
1a00303c:	9301      	str	r3, [sp, #4]
1a00303e:	ab03      	add	r3, sp, #12
1a003040:	9300      	str	r3, [sp, #0]
1a003042:	f10d 030d 	add.w	r3, sp, #13
1a003046:	f10d 020e 	add.w	r2, sp, #14
1a00304a:	f10d 010f 	add.w	r1, sp, #15
1a00304e:	f7ff ffc3 	bl	1a002fd8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003052:	2c05      	cmp	r4, #5
1a003054:	f200 80a9 	bhi.w	1a0031aa <gpioInit+0x19e>
1a003058:	e8df f004 	tbb	[pc, r4]
1a00305c:	45278109 	.word	0x45278109
1a003060:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003062:	4853      	ldr	r0, [pc, #332]	; (1a0031b0 <gpioInit+0x1a4>)
1a003064:	f7ff fa54 	bl	1a002510 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003068:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00306a:	b004      	add	sp, #16
1a00306c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00306e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003072:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003076:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00307a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00307e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003082:	494c      	ldr	r1, [pc, #304]	; (1a0031b4 <gpioInit+0x1a8>)
1a003084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003088:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00308c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003090:	2001      	movs	r0, #1
1a003092:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003096:	4c46      	ldr	r4, [pc, #280]	; (1a0031b0 <gpioInit+0x1a4>)
1a003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00309c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0030a0:	ea22 0201 	bic.w	r2, r2, r1
1a0030a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0030a8:	e7df      	b.n	1a00306a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0030aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0030ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0030b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0030b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0030ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0030be:	493d      	ldr	r1, [pc, #244]	; (1a0031b4 <gpioInit+0x1a8>)
1a0030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0030c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0030c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0030cc:	2001      	movs	r0, #1
1a0030ce:	fa00 f102 	lsl.w	r1, r0, r2
1a0030d2:	4c37      	ldr	r4, [pc, #220]	; (1a0031b0 <gpioInit+0x1a4>)
1a0030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0030d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0030dc:	ea22 0201 	bic.w	r2, r2, r1
1a0030e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0030e4:	e7c1      	b.n	1a00306a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0030e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0030ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0030ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0030f2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0030f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0030fa:	492e      	ldr	r1, [pc, #184]	; (1a0031b4 <gpioInit+0x1a8>)
1a0030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003100:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003104:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003108:	2001      	movs	r0, #1
1a00310a:	fa00 f102 	lsl.w	r1, r0, r2
1a00310e:	4c28      	ldr	r4, [pc, #160]	; (1a0031b0 <gpioInit+0x1a4>)
1a003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003114:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003118:	ea22 0201 	bic.w	r2, r2, r1
1a00311c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003120:	e7a3      	b.n	1a00306a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003122:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003126:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00312a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00312e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003132:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003136:	491f      	ldr	r1, [pc, #124]	; (1a0031b4 <gpioInit+0x1a8>)
1a003138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00313c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003140:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003144:	2001      	movs	r0, #1
1a003146:	fa00 f102 	lsl.w	r1, r0, r2
1a00314a:	4c19      	ldr	r4, [pc, #100]	; (1a0031b0 <gpioInit+0x1a4>)
1a00314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003150:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003154:	ea22 0201 	bic.w	r2, r2, r1
1a003158:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00315c:	e785      	b.n	1a00306a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00315e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003162:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003166:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00316a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00316e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003172:	4910      	ldr	r1, [pc, #64]	; (1a0031b4 <gpioInit+0x1a8>)
1a003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003178:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00317c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003180:	2001      	movs	r0, #1
1a003182:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003186:	4b0a      	ldr	r3, [pc, #40]	; (1a0031b0 <gpioInit+0x1a4>)
1a003188:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00318c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003190:	4331      	orrs	r1, r6
1a003192:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003196:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003198:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00319c:	2100      	movs	r1, #0
1a00319e:	5499      	strb	r1, [r3, r2]
1a0031a0:	e763      	b.n	1a00306a <gpioInit+0x5e>
	  return FALSE;
1a0031a2:	2000      	movs	r0, #0
1a0031a4:	4770      	bx	lr
	  return FALSE;
1a0031a6:	2000      	movs	r0, #0
}
1a0031a8:	4770      	bx	lr
      ret_val = 0;
1a0031aa:	2000      	movs	r0, #0
1a0031ac:	e75d      	b.n	1a00306a <gpioInit+0x5e>
1a0031ae:	bf00      	nop
1a0031b0:	400f4000 	.word	0x400f4000
1a0031b4:	40086000 	.word	0x40086000

1a0031b8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0031b8:	f110 0f02 	cmn.w	r0, #2
1a0031bc:	d02d      	beq.n	1a00321a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0031be:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0031c2:	d02c      	beq.n	1a00321e <gpioWrite+0x66>
{
1a0031c4:	b510      	push	{r4, lr}
1a0031c6:	b084      	sub	sp, #16
1a0031c8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0031ca:	2300      	movs	r3, #0
1a0031cc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0031d0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0031d4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0031d8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0031dc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0031e0:	f10d 030b 	add.w	r3, sp, #11
1a0031e4:	9301      	str	r3, [sp, #4]
1a0031e6:	ab03      	add	r3, sp, #12
1a0031e8:	9300      	str	r3, [sp, #0]
1a0031ea:	f10d 030d 	add.w	r3, sp, #13
1a0031ee:	f10d 020e 	add.w	r2, sp, #14
1a0031f2:	f10d 010f 	add.w	r1, sp, #15
1a0031f6:	f7ff feef 	bl	1a002fd8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0031fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0031fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003202:	1c21      	adds	r1, r4, #0
1a003204:	bf18      	it	ne
1a003206:	2101      	movne	r1, #1
1a003208:	015b      	lsls	r3, r3, #5
1a00320a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00320e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003212:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003214:	2001      	movs	r0, #1
}
1a003216:	b004      	add	sp, #16
1a003218:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00321a:	2000      	movs	r0, #0
1a00321c:	4770      	bx	lr
	  return FALSE;
1a00321e:	2000      	movs	r0, #0
}
1a003220:	4770      	bx	lr
1a003222:	Address 0x1a003222 is out of bounds.


1a003224 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a003224:	b108      	cbz	r0, 1a00322a <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a003226:	2000      	movs	r0, #0
   }

   return retVal;
}
1a003228:	4770      	bx	lr
{
1a00322a:	b570      	push	{r4, r5, r6, lr}
1a00322c:	4c0e      	ldr	r4, [pc, #56]	; (1a003268 <spiInit+0x44>)
1a00322e:	2600      	movs	r6, #0
1a003230:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a003234:	23c5      	movs	r3, #197	; 0xc5
1a003236:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a00323a:	2305      	movs	r3, #5
1a00323c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a003240:	4d0a      	ldr	r5, [pc, #40]	; (1a00326c <spiInit+0x48>)
1a003242:	4628      	mov	r0, r5
1a003244:	f7ff f90a 	bl	1a00245c <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003248:	686b      	ldr	r3, [r5, #4]
1a00324a:	f043 0302 	orr.w	r3, r3, #2
1a00324e:	606b      	str	r3, [r5, #4]
1a003250:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a003254:	4906      	ldr	r1, [pc, #24]	; (1a003270 <spiInit+0x4c>)
1a003256:	f242 020c 	movw	r2, #8204	; 0x200c
1a00325a:	588b      	ldr	r3, [r1, r2]
1a00325c:	f043 0301 	orr.w	r3, r3, #1
1a003260:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a003262:	2001      	movs	r0, #1
}
1a003264:	bd70      	pop	{r4, r5, r6, pc}
1a003266:	bf00      	nop
1a003268:	40086000 	.word	0x40086000
1a00326c:	400c5000 	.word	0x400c5000
1a003270:	400f4000 	.word	0x400f4000

1a003274 <spiRead>:


bool_t spiRead( spiMap_t spi, uint8_t* buffer, uint32_t bufferSize )
{
1a003274:	b500      	push	{lr}
1a003276:	b087      	sub	sp, #28

   bool_t retVal = TRUE;

   Chip_SSP_DATA_SETUP_T xferConfig;

   xferConfig.tx_data = NULL;
1a003278:	2300      	movs	r3, #0
1a00327a:	9301      	str	r3, [sp, #4]
   xferConfig.tx_cnt  = 0;
1a00327c:	9302      	str	r3, [sp, #8]
   xferConfig.rx_data = buffer;
1a00327e:	9103      	str	r1, [sp, #12]
   xferConfig.rx_cnt  = 0;
1a003280:	9304      	str	r3, [sp, #16]
   xferConfig.length  = bufferSize;
1a003282:	9205      	str	r2, [sp, #20]

   if( spi == SPI0 ) {
1a003284:	b118      	cbz	r0, 1a00328e <spiRead+0x1a>
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
   } else {
      retVal = FALSE;
1a003286:	2000      	movs	r0, #0
   }

   return retVal;
}
1a003288:	b007      	add	sp, #28
1a00328a:	f85d fb04 	ldr.w	pc, [sp], #4
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
1a00328e:	a901      	add	r1, sp, #4
1a003290:	4802      	ldr	r0, [pc, #8]	; (1a00329c <spiRead+0x28>)
1a003292:	f7ff f870 	bl	1a002376 <Chip_SSP_RWFrames_Blocking>
   bool_t retVal = TRUE;
1a003296:	2001      	movs	r0, #1
1a003298:	e7f6      	b.n	1a003288 <spiRead+0x14>
1a00329a:	bf00      	nop
1a00329c:	400c5000 	.word	0x400c5000

1a0032a0 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0032a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0032a4:	4680      	mov	r8, r0
1a0032a6:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0032a8:	4c19      	ldr	r4, [pc, #100]	; (1a003310 <uartInit+0x70>)
1a0032aa:	0045      	lsls	r5, r0, #1
1a0032ac:	182a      	adds	r2, r5, r0
1a0032ae:	0093      	lsls	r3, r2, #2
1a0032b0:	18e6      	adds	r6, r4, r3
1a0032b2:	58e7      	ldr	r7, [r4, r3]
1a0032b4:	4638      	mov	r0, r7
1a0032b6:	f7ff fdad 	bl	1a002e14 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0032ba:	4649      	mov	r1, r9
1a0032bc:	4638      	mov	r0, r7
1a0032be:	f7ff fdd3 	bl	1a002e68 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0032c2:	2307      	movs	r3, #7
1a0032c4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0032c6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0032c8:	2301      	movs	r3, #1
1a0032ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0032cc:	7930      	ldrb	r0, [r6, #4]
1a0032ce:	7973      	ldrb	r3, [r6, #5]
1a0032d0:	79b2      	ldrb	r2, [r6, #6]
1a0032d2:	f042 0218 	orr.w	r2, r2, #24
1a0032d6:	490f      	ldr	r1, [pc, #60]	; (1a003314 <uartInit+0x74>)
1a0032d8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0032e0:	79f0      	ldrb	r0, [r6, #7]
1a0032e2:	7a33      	ldrb	r3, [r6, #8]
1a0032e4:	7a72      	ldrb	r2, [r6, #9]
1a0032e6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0032ea:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0032f2:	f1b8 0f01 	cmp.w	r8, #1
1a0032f6:	d001      	beq.n	1a0032fc <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0032f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0032fc:	4a06      	ldr	r2, [pc, #24]	; (1a003318 <uartInit+0x78>)
1a0032fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003300:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003304:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003306:	221a      	movs	r2, #26
1a003308:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00330c:	e7f4      	b.n	1a0032f8 <uartInit+0x58>
1a00330e:	bf00      	nop
1a003310:	1a00522c 	.word	0x1a00522c
1a003314:	40086000 	.word	0x40086000
1a003318:	40081000 	.word	0x40081000

1a00331c <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a00331c:	b510      	push	{r4, lr}
1a00331e:	b088      	sub	sp, #32
1a003320:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a003322:	4669      	mov	r1, sp
1a003324:	4809      	ldr	r0, [pc, #36]	; (1a00334c <rtcRead+0x30>)
1a003326:	f7ff f928 	bl	1a00257a <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a00332a:	9b00      	ldr	r3, [sp, #0]
1a00332c:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a00332e:	9b01      	ldr	r3, [sp, #4]
1a003330:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a003332:	9b02      	ldr	r3, [sp, #8]
1a003334:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a003336:	9b04      	ldr	r3, [sp, #16]
1a003338:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a00333a:	9b03      	ldr	r3, [sp, #12]
1a00333c:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a00333e:	9b06      	ldr	r3, [sp, #24]
1a003340:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a003342:	9b07      	ldr	r3, [sp, #28]
1a003344:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a003346:	2001      	movs	r0, #1
1a003348:	b008      	add	sp, #32
1a00334a:	bd10      	pop	{r4, pc}
1a00334c:	40046000 	.word	0x40046000

1a003350 <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a003350:	b500      	push	{lr}
1a003352:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a003354:	79c3      	ldrb	r3, [r0, #7]
1a003356:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a003358:	7983      	ldrb	r3, [r0, #6]
1a00335a:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a00335c:	7943      	ldrb	r3, [r0, #5]
1a00335e:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFWEEK]  = rtc->wday;
1a003360:	7903      	ldrb	r3, [r0, #4]
1a003362:	9304      	str	r3, [sp, #16]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a003364:	78c3      	ldrb	r3, [r0, #3]
1a003366:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a003368:	7883      	ldrb	r3, [r0, #2]
1a00336a:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a00336c:	8803      	ldrh	r3, [r0, #0]
1a00336e:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a003370:	4669      	mov	r1, sp
1a003372:	4803      	ldr	r0, [pc, #12]	; (1a003380 <rtcWrite+0x30>)
1a003374:	f7ff f8ea 	bl	1a00254c <Chip_RTC_SetFullTime>

   return ret_val;
}
1a003378:	2001      	movs	r0, #1
1a00337a:	b009      	add	sp, #36	; 0x24
1a00337c:	f85d fb04 	ldr.w	pc, [sp], #4
1a003380:	40046000 	.word	0x40046000

1a003384 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003384:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003386:	4b04      	ldr	r3, [pc, #16]	; (1a003398 <USB0_IRQHandler+0x14>)
1a003388:	681b      	ldr	r3, [r3, #0]
1a00338a:	681b      	ldr	r3, [r3, #0]
1a00338c:	68db      	ldr	r3, [r3, #12]
1a00338e:	4a03      	ldr	r2, [pc, #12]	; (1a00339c <USB0_IRQHandler+0x18>)
1a003390:	6810      	ldr	r0, [r2, #0]
1a003392:	4798      	blx	r3
}
1a003394:	bd08      	pop	{r3, pc}
1a003396:	bf00      	nop
1a003398:	10002318 	.word	0x10002318
1a00339c:	10002230 	.word	0x10002230

1a0033a0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0033a0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0033a2:	f7ff fa45 	bl	1a002830 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0033a6:	4b18      	ldr	r3, [pc, #96]	; (1a003408 <boardInit+0x68>)
1a0033a8:	6818      	ldr	r0, [r3, #0]
1a0033aa:	f7ff fe07 	bl	1a002fbc <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0033ae:	2105      	movs	r1, #5
1a0033b0:	2000      	movs	r0, #0
1a0033b2:	f7ff fe2b 	bl	1a00300c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0033b6:	2100      	movs	r1, #0
1a0033b8:	2024      	movs	r0, #36	; 0x24
1a0033ba:	f7ff fe27 	bl	1a00300c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0033be:	2100      	movs	r1, #0
1a0033c0:	2025      	movs	r0, #37	; 0x25
1a0033c2:	f7ff fe23 	bl	1a00300c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0033c6:	2100      	movs	r1, #0
1a0033c8:	2026      	movs	r0, #38	; 0x26
1a0033ca:	f7ff fe1f 	bl	1a00300c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0033ce:	2100      	movs	r1, #0
1a0033d0:	2027      	movs	r0, #39	; 0x27
1a0033d2:	f7ff fe1b 	bl	1a00300c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0033d6:	2101      	movs	r1, #1
1a0033d8:	2028      	movs	r0, #40	; 0x28
1a0033da:	f7ff fe17 	bl	1a00300c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0033de:	2101      	movs	r1, #1
1a0033e0:	2029      	movs	r0, #41	; 0x29
1a0033e2:	f7ff fe13 	bl	1a00300c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0033e6:	2101      	movs	r1, #1
1a0033e8:	202a      	movs	r0, #42	; 0x2a
1a0033ea:	f7ff fe0f 	bl	1a00300c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0033ee:	2101      	movs	r1, #1
1a0033f0:	202b      	movs	r0, #43	; 0x2b
1a0033f2:	f7ff fe0b 	bl	1a00300c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0033f6:	2101      	movs	r1, #1
1a0033f8:	202c      	movs	r0, #44	; 0x2c
1a0033fa:	f7ff fe07 	bl	1a00300c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0033fe:	2101      	movs	r1, #1
1a003400:	202d      	movs	r0, #45	; 0x2d
1a003402:	f7ff fe03 	bl	1a00300c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003406:	bd08      	pop	{r3, pc}
1a003408:	10002314 	.word	0x10002314

1a00340c <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a00340c:	b508      	push	{r3, lr}
1a00340e:	460b      	mov	r3, r1
   *printer = uart;
1a003410:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003412:	4611      	mov	r1, r2
1a003414:	4618      	mov	r0, r3
1a003416:	f7ff ff43 	bl	1a0032a0 <uartInit>
}
1a00341a:	bd08      	pop	{r3, pc}

1a00341c <__aeabi_drsub>:
1a00341c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003420:	e002      	b.n	1a003428 <__adddf3>
1a003422:	bf00      	nop

1a003424 <__aeabi_dsub>:
1a003424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003428 <__adddf3>:
1a003428:	b530      	push	{r4, r5, lr}
1a00342a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00342e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a003432:	ea94 0f05 	teq	r4, r5
1a003436:	bf08      	it	eq
1a003438:	ea90 0f02 	teqeq	r0, r2
1a00343c:	bf1f      	itttt	ne
1a00343e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a003442:	ea55 0c02 	orrsne.w	ip, r5, r2
1a003446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00344a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00344e:	f000 80e2 	beq.w	1a003616 <__adddf3+0x1ee>
1a003452:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a003456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00345a:	bfb8      	it	lt
1a00345c:	426d      	neglt	r5, r5
1a00345e:	dd0c      	ble.n	1a00347a <__adddf3+0x52>
1a003460:	442c      	add	r4, r5
1a003462:	ea80 0202 	eor.w	r2, r0, r2
1a003466:	ea81 0303 	eor.w	r3, r1, r3
1a00346a:	ea82 0000 	eor.w	r0, r2, r0
1a00346e:	ea83 0101 	eor.w	r1, r3, r1
1a003472:	ea80 0202 	eor.w	r2, r0, r2
1a003476:	ea81 0303 	eor.w	r3, r1, r3
1a00347a:	2d36      	cmp	r5, #54	; 0x36
1a00347c:	bf88      	it	hi
1a00347e:	bd30      	pophi	{r4, r5, pc}
1a003480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003484:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00348c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a003490:	d002      	beq.n	1a003498 <__adddf3+0x70>
1a003492:	4240      	negs	r0, r0
1a003494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00349c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0034a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0034a4:	d002      	beq.n	1a0034ac <__adddf3+0x84>
1a0034a6:	4252      	negs	r2, r2
1a0034a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0034ac:	ea94 0f05 	teq	r4, r5
1a0034b0:	f000 80a7 	beq.w	1a003602 <__adddf3+0x1da>
1a0034b4:	f1a4 0401 	sub.w	r4, r4, #1
1a0034b8:	f1d5 0e20 	rsbs	lr, r5, #32
1a0034bc:	db0d      	blt.n	1a0034da <__adddf3+0xb2>
1a0034be:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0034c2:	fa22 f205 	lsr.w	r2, r2, r5
1a0034c6:	1880      	adds	r0, r0, r2
1a0034c8:	f141 0100 	adc.w	r1, r1, #0
1a0034cc:	fa03 f20e 	lsl.w	r2, r3, lr
1a0034d0:	1880      	adds	r0, r0, r2
1a0034d2:	fa43 f305 	asr.w	r3, r3, r5
1a0034d6:	4159      	adcs	r1, r3
1a0034d8:	e00e      	b.n	1a0034f8 <__adddf3+0xd0>
1a0034da:	f1a5 0520 	sub.w	r5, r5, #32
1a0034de:	f10e 0e20 	add.w	lr, lr, #32
1a0034e2:	2a01      	cmp	r2, #1
1a0034e4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0034e8:	bf28      	it	cs
1a0034ea:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0034ee:	fa43 f305 	asr.w	r3, r3, r5
1a0034f2:	18c0      	adds	r0, r0, r3
1a0034f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0034f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0034fc:	d507      	bpl.n	1a00350e <__adddf3+0xe6>
1a0034fe:	f04f 0e00 	mov.w	lr, #0
1a003502:	f1dc 0c00 	rsbs	ip, ip, #0
1a003506:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00350a:	eb6e 0101 	sbc.w	r1, lr, r1
1a00350e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a003512:	d31b      	bcc.n	1a00354c <__adddf3+0x124>
1a003514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a003518:	d30c      	bcc.n	1a003534 <__adddf3+0x10c>
1a00351a:	0849      	lsrs	r1, r1, #1
1a00351c:	ea5f 0030 	movs.w	r0, r0, rrx
1a003520:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a003524:	f104 0401 	add.w	r4, r4, #1
1a003528:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00352c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003530:	f080 809a 	bcs.w	1a003668 <__adddf3+0x240>
1a003534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a003538:	bf08      	it	eq
1a00353a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00353e:	f150 0000 	adcs.w	r0, r0, #0
1a003542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003546:	ea41 0105 	orr.w	r1, r1, r5
1a00354a:	bd30      	pop	{r4, r5, pc}
1a00354c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a003550:	4140      	adcs	r0, r0
1a003552:	eb41 0101 	adc.w	r1, r1, r1
1a003556:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00355a:	f1a4 0401 	sub.w	r4, r4, #1
1a00355e:	d1e9      	bne.n	1a003534 <__adddf3+0x10c>
1a003560:	f091 0f00 	teq	r1, #0
1a003564:	bf04      	itt	eq
1a003566:	4601      	moveq	r1, r0
1a003568:	2000      	moveq	r0, #0
1a00356a:	fab1 f381 	clz	r3, r1
1a00356e:	bf08      	it	eq
1a003570:	3320      	addeq	r3, #32
1a003572:	f1a3 030b 	sub.w	r3, r3, #11
1a003576:	f1b3 0220 	subs.w	r2, r3, #32
1a00357a:	da0c      	bge.n	1a003596 <__adddf3+0x16e>
1a00357c:	320c      	adds	r2, #12
1a00357e:	dd08      	ble.n	1a003592 <__adddf3+0x16a>
1a003580:	f102 0c14 	add.w	ip, r2, #20
1a003584:	f1c2 020c 	rsb	r2, r2, #12
1a003588:	fa01 f00c 	lsl.w	r0, r1, ip
1a00358c:	fa21 f102 	lsr.w	r1, r1, r2
1a003590:	e00c      	b.n	1a0035ac <__adddf3+0x184>
1a003592:	f102 0214 	add.w	r2, r2, #20
1a003596:	bfd8      	it	le
1a003598:	f1c2 0c20 	rsble	ip, r2, #32
1a00359c:	fa01 f102 	lsl.w	r1, r1, r2
1a0035a0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0035a4:	bfdc      	itt	le
1a0035a6:	ea41 010c 	orrle.w	r1, r1, ip
1a0035aa:	4090      	lslle	r0, r2
1a0035ac:	1ae4      	subs	r4, r4, r3
1a0035ae:	bfa2      	ittt	ge
1a0035b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0035b4:	4329      	orrge	r1, r5
1a0035b6:	bd30      	popge	{r4, r5, pc}
1a0035b8:	ea6f 0404 	mvn.w	r4, r4
1a0035bc:	3c1f      	subs	r4, #31
1a0035be:	da1c      	bge.n	1a0035fa <__adddf3+0x1d2>
1a0035c0:	340c      	adds	r4, #12
1a0035c2:	dc0e      	bgt.n	1a0035e2 <__adddf3+0x1ba>
1a0035c4:	f104 0414 	add.w	r4, r4, #20
1a0035c8:	f1c4 0220 	rsb	r2, r4, #32
1a0035cc:	fa20 f004 	lsr.w	r0, r0, r4
1a0035d0:	fa01 f302 	lsl.w	r3, r1, r2
1a0035d4:	ea40 0003 	orr.w	r0, r0, r3
1a0035d8:	fa21 f304 	lsr.w	r3, r1, r4
1a0035dc:	ea45 0103 	orr.w	r1, r5, r3
1a0035e0:	bd30      	pop	{r4, r5, pc}
1a0035e2:	f1c4 040c 	rsb	r4, r4, #12
1a0035e6:	f1c4 0220 	rsb	r2, r4, #32
1a0035ea:	fa20 f002 	lsr.w	r0, r0, r2
1a0035ee:	fa01 f304 	lsl.w	r3, r1, r4
1a0035f2:	ea40 0003 	orr.w	r0, r0, r3
1a0035f6:	4629      	mov	r1, r5
1a0035f8:	bd30      	pop	{r4, r5, pc}
1a0035fa:	fa21 f004 	lsr.w	r0, r1, r4
1a0035fe:	4629      	mov	r1, r5
1a003600:	bd30      	pop	{r4, r5, pc}
1a003602:	f094 0f00 	teq	r4, #0
1a003606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00360a:	bf06      	itte	eq
1a00360c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a003610:	3401      	addeq	r4, #1
1a003612:	3d01      	subne	r5, #1
1a003614:	e74e      	b.n	1a0034b4 <__adddf3+0x8c>
1a003616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00361a:	bf18      	it	ne
1a00361c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003620:	d029      	beq.n	1a003676 <__adddf3+0x24e>
1a003622:	ea94 0f05 	teq	r4, r5
1a003626:	bf08      	it	eq
1a003628:	ea90 0f02 	teqeq	r0, r2
1a00362c:	d005      	beq.n	1a00363a <__adddf3+0x212>
1a00362e:	ea54 0c00 	orrs.w	ip, r4, r0
1a003632:	bf04      	itt	eq
1a003634:	4619      	moveq	r1, r3
1a003636:	4610      	moveq	r0, r2
1a003638:	bd30      	pop	{r4, r5, pc}
1a00363a:	ea91 0f03 	teq	r1, r3
1a00363e:	bf1e      	ittt	ne
1a003640:	2100      	movne	r1, #0
1a003642:	2000      	movne	r0, #0
1a003644:	bd30      	popne	{r4, r5, pc}
1a003646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00364a:	d105      	bne.n	1a003658 <__adddf3+0x230>
1a00364c:	0040      	lsls	r0, r0, #1
1a00364e:	4149      	adcs	r1, r1
1a003650:	bf28      	it	cs
1a003652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a003656:	bd30      	pop	{r4, r5, pc}
1a003658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00365c:	bf3c      	itt	cc
1a00365e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a003662:	bd30      	popcc	{r4, r5, pc}
1a003664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00366c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003670:	f04f 0000 	mov.w	r0, #0
1a003674:	bd30      	pop	{r4, r5, pc}
1a003676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00367a:	bf1a      	itte	ne
1a00367c:	4619      	movne	r1, r3
1a00367e:	4610      	movne	r0, r2
1a003680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a003684:	bf1c      	itt	ne
1a003686:	460b      	movne	r3, r1
1a003688:	4602      	movne	r2, r0
1a00368a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00368e:	bf06      	itte	eq
1a003690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a003694:	ea91 0f03 	teqeq	r1, r3
1a003698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00369c:	bd30      	pop	{r4, r5, pc}
1a00369e:	bf00      	nop

1a0036a0 <__aeabi_ui2d>:
1a0036a0:	f090 0f00 	teq	r0, #0
1a0036a4:	bf04      	itt	eq
1a0036a6:	2100      	moveq	r1, #0
1a0036a8:	4770      	bxeq	lr
1a0036aa:	b530      	push	{r4, r5, lr}
1a0036ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0036b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0036b4:	f04f 0500 	mov.w	r5, #0
1a0036b8:	f04f 0100 	mov.w	r1, #0
1a0036bc:	e750      	b.n	1a003560 <__adddf3+0x138>
1a0036be:	bf00      	nop

1a0036c0 <__aeabi_i2d>:
1a0036c0:	f090 0f00 	teq	r0, #0
1a0036c4:	bf04      	itt	eq
1a0036c6:	2100      	moveq	r1, #0
1a0036c8:	4770      	bxeq	lr
1a0036ca:	b530      	push	{r4, r5, lr}
1a0036cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0036d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0036d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0036d8:	bf48      	it	mi
1a0036da:	4240      	negmi	r0, r0
1a0036dc:	f04f 0100 	mov.w	r1, #0
1a0036e0:	e73e      	b.n	1a003560 <__adddf3+0x138>
1a0036e2:	bf00      	nop

1a0036e4 <__aeabi_f2d>:
1a0036e4:	0042      	lsls	r2, r0, #1
1a0036e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0036ea:	ea4f 0131 	mov.w	r1, r1, rrx
1a0036ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0036f2:	bf1f      	itttt	ne
1a0036f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0036f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0036fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a003700:	4770      	bxne	lr
1a003702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a003706:	bf08      	it	eq
1a003708:	4770      	bxeq	lr
1a00370a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00370e:	bf04      	itt	eq
1a003710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a003714:	4770      	bxeq	lr
1a003716:	b530      	push	{r4, r5, lr}
1a003718:	f44f 7460 	mov.w	r4, #896	; 0x380
1a00371c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003724:	e71c      	b.n	1a003560 <__adddf3+0x138>
1a003726:	bf00      	nop

1a003728 <__aeabi_ul2d>:
1a003728:	ea50 0201 	orrs.w	r2, r0, r1
1a00372c:	bf08      	it	eq
1a00372e:	4770      	bxeq	lr
1a003730:	b530      	push	{r4, r5, lr}
1a003732:	f04f 0500 	mov.w	r5, #0
1a003736:	e00a      	b.n	1a00374e <__aeabi_l2d+0x16>

1a003738 <__aeabi_l2d>:
1a003738:	ea50 0201 	orrs.w	r2, r0, r1
1a00373c:	bf08      	it	eq
1a00373e:	4770      	bxeq	lr
1a003740:	b530      	push	{r4, r5, lr}
1a003742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a003746:	d502      	bpl.n	1a00374e <__aeabi_l2d+0x16>
1a003748:	4240      	negs	r0, r0
1a00374a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00374e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003752:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00375a:	f43f aed8 	beq.w	1a00350e <__adddf3+0xe6>
1a00375e:	f04f 0203 	mov.w	r2, #3
1a003762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003766:	bf18      	it	ne
1a003768:	3203      	addne	r2, #3
1a00376a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00376e:	bf18      	it	ne
1a003770:	3203      	addne	r2, #3
1a003772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a003776:	f1c2 0320 	rsb	r3, r2, #32
1a00377a:	fa00 fc03 	lsl.w	ip, r0, r3
1a00377e:	fa20 f002 	lsr.w	r0, r0, r2
1a003782:	fa01 fe03 	lsl.w	lr, r1, r3
1a003786:	ea40 000e 	orr.w	r0, r0, lr
1a00378a:	fa21 f102 	lsr.w	r1, r1, r2
1a00378e:	4414      	add	r4, r2
1a003790:	e6bd      	b.n	1a00350e <__adddf3+0xe6>
1a003792:	bf00      	nop

1a003794 <__aeabi_dmul>:
1a003794:	b570      	push	{r4, r5, r6, lr}
1a003796:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00379a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00379e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0037a2:	bf1d      	ittte	ne
1a0037a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0037a8:	ea94 0f0c 	teqne	r4, ip
1a0037ac:	ea95 0f0c 	teqne	r5, ip
1a0037b0:	f000 f8de 	bleq	1a003970 <__aeabi_dmul+0x1dc>
1a0037b4:	442c      	add	r4, r5
1a0037b6:	ea81 0603 	eor.w	r6, r1, r3
1a0037ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0037be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0037c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a0037c6:	bf18      	it	ne
1a0037c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0037cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0037d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0037d4:	d038      	beq.n	1a003848 <__aeabi_dmul+0xb4>
1a0037d6:	fba0 ce02 	umull	ip, lr, r0, r2
1a0037da:	f04f 0500 	mov.w	r5, #0
1a0037de:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0037e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0037e6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0037ea:	f04f 0600 	mov.w	r6, #0
1a0037ee:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0037f2:	f09c 0f00 	teq	ip, #0
1a0037f6:	bf18      	it	ne
1a0037f8:	f04e 0e01 	orrne.w	lr, lr, #1
1a0037fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a003800:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a003804:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a003808:	d204      	bcs.n	1a003814 <__aeabi_dmul+0x80>
1a00380a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00380e:	416d      	adcs	r5, r5
1a003810:	eb46 0606 	adc.w	r6, r6, r6
1a003814:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a003818:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a00381c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a003820:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a003824:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a003828:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00382c:	bf88      	it	hi
1a00382e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003832:	d81e      	bhi.n	1a003872 <__aeabi_dmul+0xde>
1a003834:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a003838:	bf08      	it	eq
1a00383a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00383e:	f150 0000 	adcs.w	r0, r0, #0
1a003842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003846:	bd70      	pop	{r4, r5, r6, pc}
1a003848:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a00384c:	ea46 0101 	orr.w	r1, r6, r1
1a003850:	ea40 0002 	orr.w	r0, r0, r2
1a003854:	ea81 0103 	eor.w	r1, r1, r3
1a003858:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00385c:	bfc2      	ittt	gt
1a00385e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003862:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003866:	bd70      	popgt	{r4, r5, r6, pc}
1a003868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00386c:	f04f 0e00 	mov.w	lr, #0
1a003870:	3c01      	subs	r4, #1
1a003872:	f300 80ab 	bgt.w	1a0039cc <__aeabi_dmul+0x238>
1a003876:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00387a:	bfde      	ittt	le
1a00387c:	2000      	movle	r0, #0
1a00387e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a003882:	bd70      	pople	{r4, r5, r6, pc}
1a003884:	f1c4 0400 	rsb	r4, r4, #0
1a003888:	3c20      	subs	r4, #32
1a00388a:	da35      	bge.n	1a0038f8 <__aeabi_dmul+0x164>
1a00388c:	340c      	adds	r4, #12
1a00388e:	dc1b      	bgt.n	1a0038c8 <__aeabi_dmul+0x134>
1a003890:	f104 0414 	add.w	r4, r4, #20
1a003894:	f1c4 0520 	rsb	r5, r4, #32
1a003898:	fa00 f305 	lsl.w	r3, r0, r5
1a00389c:	fa20 f004 	lsr.w	r0, r0, r4
1a0038a0:	fa01 f205 	lsl.w	r2, r1, r5
1a0038a4:	ea40 0002 	orr.w	r0, r0, r2
1a0038a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0038ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0038b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0038b4:	fa21 f604 	lsr.w	r6, r1, r4
1a0038b8:	eb42 0106 	adc.w	r1, r2, r6
1a0038bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0038c0:	bf08      	it	eq
1a0038c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0038c6:	bd70      	pop	{r4, r5, r6, pc}
1a0038c8:	f1c4 040c 	rsb	r4, r4, #12
1a0038cc:	f1c4 0520 	rsb	r5, r4, #32
1a0038d0:	fa00 f304 	lsl.w	r3, r0, r4
1a0038d4:	fa20 f005 	lsr.w	r0, r0, r5
1a0038d8:	fa01 f204 	lsl.w	r2, r1, r4
1a0038dc:	ea40 0002 	orr.w	r0, r0, r2
1a0038e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0038e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0038e8:	f141 0100 	adc.w	r1, r1, #0
1a0038ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0038f0:	bf08      	it	eq
1a0038f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0038f6:	bd70      	pop	{r4, r5, r6, pc}
1a0038f8:	f1c4 0520 	rsb	r5, r4, #32
1a0038fc:	fa00 f205 	lsl.w	r2, r0, r5
1a003900:	ea4e 0e02 	orr.w	lr, lr, r2
1a003904:	fa20 f304 	lsr.w	r3, r0, r4
1a003908:	fa01 f205 	lsl.w	r2, r1, r5
1a00390c:	ea43 0302 	orr.w	r3, r3, r2
1a003910:	fa21 f004 	lsr.w	r0, r1, r4
1a003914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003918:	fa21 f204 	lsr.w	r2, r1, r4
1a00391c:	ea20 0002 	bic.w	r0, r0, r2
1a003920:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003924:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003928:	bf08      	it	eq
1a00392a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00392e:	bd70      	pop	{r4, r5, r6, pc}
1a003930:	f094 0f00 	teq	r4, #0
1a003934:	d10f      	bne.n	1a003956 <__aeabi_dmul+0x1c2>
1a003936:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00393a:	0040      	lsls	r0, r0, #1
1a00393c:	eb41 0101 	adc.w	r1, r1, r1
1a003940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003944:	bf08      	it	eq
1a003946:	3c01      	subeq	r4, #1
1a003948:	d0f7      	beq.n	1a00393a <__aeabi_dmul+0x1a6>
1a00394a:	ea41 0106 	orr.w	r1, r1, r6
1a00394e:	f095 0f00 	teq	r5, #0
1a003952:	bf18      	it	ne
1a003954:	4770      	bxne	lr
1a003956:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00395a:	0052      	lsls	r2, r2, #1
1a00395c:	eb43 0303 	adc.w	r3, r3, r3
1a003960:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003964:	bf08      	it	eq
1a003966:	3d01      	subeq	r5, #1
1a003968:	d0f7      	beq.n	1a00395a <__aeabi_dmul+0x1c6>
1a00396a:	ea43 0306 	orr.w	r3, r3, r6
1a00396e:	4770      	bx	lr
1a003970:	ea94 0f0c 	teq	r4, ip
1a003974:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003978:	bf18      	it	ne
1a00397a:	ea95 0f0c 	teqne	r5, ip
1a00397e:	d00c      	beq.n	1a00399a <__aeabi_dmul+0x206>
1a003980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003984:	bf18      	it	ne
1a003986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00398a:	d1d1      	bne.n	1a003930 <__aeabi_dmul+0x19c>
1a00398c:	ea81 0103 	eor.w	r1, r1, r3
1a003990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003994:	f04f 0000 	mov.w	r0, #0
1a003998:	bd70      	pop	{r4, r5, r6, pc}
1a00399a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00399e:	bf06      	itte	eq
1a0039a0:	4610      	moveq	r0, r2
1a0039a2:	4619      	moveq	r1, r3
1a0039a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0039a8:	d019      	beq.n	1a0039de <__aeabi_dmul+0x24a>
1a0039aa:	ea94 0f0c 	teq	r4, ip
1a0039ae:	d102      	bne.n	1a0039b6 <__aeabi_dmul+0x222>
1a0039b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0039b4:	d113      	bne.n	1a0039de <__aeabi_dmul+0x24a>
1a0039b6:	ea95 0f0c 	teq	r5, ip
1a0039ba:	d105      	bne.n	1a0039c8 <__aeabi_dmul+0x234>
1a0039bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0039c0:	bf1c      	itt	ne
1a0039c2:	4610      	movne	r0, r2
1a0039c4:	4619      	movne	r1, r3
1a0039c6:	d10a      	bne.n	1a0039de <__aeabi_dmul+0x24a>
1a0039c8:	ea81 0103 	eor.w	r1, r1, r3
1a0039cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0039d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0039d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0039d8:	f04f 0000 	mov.w	r0, #0
1a0039dc:	bd70      	pop	{r4, r5, r6, pc}
1a0039de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0039e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0039e6:	bd70      	pop	{r4, r5, r6, pc}

1a0039e8 <__aeabi_ddiv>:
1a0039e8:	b570      	push	{r4, r5, r6, lr}
1a0039ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0039ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0039f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0039f6:	bf1d      	ittte	ne
1a0039f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0039fc:	ea94 0f0c 	teqne	r4, ip
1a003a00:	ea95 0f0c 	teqne	r5, ip
1a003a04:	f000 f8a7 	bleq	1a003b56 <__aeabi_ddiv+0x16e>
1a003a08:	eba4 0405 	sub.w	r4, r4, r5
1a003a0c:	ea81 0e03 	eor.w	lr, r1, r3
1a003a10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003a14:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003a18:	f000 8088 	beq.w	1a003b2c <__aeabi_ddiv+0x144>
1a003a1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003a20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003a24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a003a28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a003a2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003a30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003a34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a003a38:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a003a3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003a40:	429d      	cmp	r5, r3
1a003a42:	bf08      	it	eq
1a003a44:	4296      	cmpeq	r6, r2
1a003a46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a003a4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a003a4e:	d202      	bcs.n	1a003a56 <__aeabi_ddiv+0x6e>
1a003a50:	085b      	lsrs	r3, r3, #1
1a003a52:	ea4f 0232 	mov.w	r2, r2, rrx
1a003a56:	1ab6      	subs	r6, r6, r2
1a003a58:	eb65 0503 	sbc.w	r5, r5, r3
1a003a5c:	085b      	lsrs	r3, r3, #1
1a003a5e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003a62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a003a66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a003a6a:	ebb6 0e02 	subs.w	lr, r6, r2
1a003a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003a72:	bf22      	ittt	cs
1a003a74:	1ab6      	subcs	r6, r6, r2
1a003a76:	4675      	movcs	r5, lr
1a003a78:	ea40 000c 	orrcs.w	r0, r0, ip
1a003a7c:	085b      	lsrs	r3, r3, #1
1a003a7e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003a82:	ebb6 0e02 	subs.w	lr, r6, r2
1a003a86:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003a8a:	bf22      	ittt	cs
1a003a8c:	1ab6      	subcs	r6, r6, r2
1a003a8e:	4675      	movcs	r5, lr
1a003a90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003a94:	085b      	lsrs	r3, r3, #1
1a003a96:	ea4f 0232 	mov.w	r2, r2, rrx
1a003a9a:	ebb6 0e02 	subs.w	lr, r6, r2
1a003a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003aa2:	bf22      	ittt	cs
1a003aa4:	1ab6      	subcs	r6, r6, r2
1a003aa6:	4675      	movcs	r5, lr
1a003aa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003aac:	085b      	lsrs	r3, r3, #1
1a003aae:	ea4f 0232 	mov.w	r2, r2, rrx
1a003ab2:	ebb6 0e02 	subs.w	lr, r6, r2
1a003ab6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003aba:	bf22      	ittt	cs
1a003abc:	1ab6      	subcs	r6, r6, r2
1a003abe:	4675      	movcs	r5, lr
1a003ac0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a003ac4:	ea55 0e06 	orrs.w	lr, r5, r6
1a003ac8:	d018      	beq.n	1a003afc <__aeabi_ddiv+0x114>
1a003aca:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a003ace:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a003ad2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a003ad6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a003ada:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a003ade:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a003ae2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a003ae6:	d1c0      	bne.n	1a003a6a <__aeabi_ddiv+0x82>
1a003ae8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003aec:	d10b      	bne.n	1a003b06 <__aeabi_ddiv+0x11e>
1a003aee:	ea41 0100 	orr.w	r1, r1, r0
1a003af2:	f04f 0000 	mov.w	r0, #0
1a003af6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a003afa:	e7b6      	b.n	1a003a6a <__aeabi_ddiv+0x82>
1a003afc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003b00:	bf04      	itt	eq
1a003b02:	4301      	orreq	r1, r0
1a003b04:	2000      	moveq	r0, #0
1a003b06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003b0a:	bf88      	it	hi
1a003b0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003b10:	f63f aeaf 	bhi.w	1a003872 <__aeabi_dmul+0xde>
1a003b14:	ebb5 0c03 	subs.w	ip, r5, r3
1a003b18:	bf04      	itt	eq
1a003b1a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a003b1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003b22:	f150 0000 	adcs.w	r0, r0, #0
1a003b26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003b2a:	bd70      	pop	{r4, r5, r6, pc}
1a003b2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003b30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003b34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003b38:	bfc2      	ittt	gt
1a003b3a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003b3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003b42:	bd70      	popgt	{r4, r5, r6, pc}
1a003b44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003b48:	f04f 0e00 	mov.w	lr, #0
1a003b4c:	3c01      	subs	r4, #1
1a003b4e:	e690      	b.n	1a003872 <__aeabi_dmul+0xde>
1a003b50:	ea45 0e06 	orr.w	lr, r5, r6
1a003b54:	e68d      	b.n	1a003872 <__aeabi_dmul+0xde>
1a003b56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003b5a:	ea94 0f0c 	teq	r4, ip
1a003b5e:	bf08      	it	eq
1a003b60:	ea95 0f0c 	teqeq	r5, ip
1a003b64:	f43f af3b 	beq.w	1a0039de <__aeabi_dmul+0x24a>
1a003b68:	ea94 0f0c 	teq	r4, ip
1a003b6c:	d10a      	bne.n	1a003b84 <__aeabi_ddiv+0x19c>
1a003b6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003b72:	f47f af34 	bne.w	1a0039de <__aeabi_dmul+0x24a>
1a003b76:	ea95 0f0c 	teq	r5, ip
1a003b7a:	f47f af25 	bne.w	1a0039c8 <__aeabi_dmul+0x234>
1a003b7e:	4610      	mov	r0, r2
1a003b80:	4619      	mov	r1, r3
1a003b82:	e72c      	b.n	1a0039de <__aeabi_dmul+0x24a>
1a003b84:	ea95 0f0c 	teq	r5, ip
1a003b88:	d106      	bne.n	1a003b98 <__aeabi_ddiv+0x1b0>
1a003b8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003b8e:	f43f aefd 	beq.w	1a00398c <__aeabi_dmul+0x1f8>
1a003b92:	4610      	mov	r0, r2
1a003b94:	4619      	mov	r1, r3
1a003b96:	e722      	b.n	1a0039de <__aeabi_dmul+0x24a>
1a003b98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003b9c:	bf18      	it	ne
1a003b9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003ba2:	f47f aec5 	bne.w	1a003930 <__aeabi_dmul+0x19c>
1a003ba6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a003baa:	f47f af0d 	bne.w	1a0039c8 <__aeabi_dmul+0x234>
1a003bae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003bb2:	f47f aeeb 	bne.w	1a00398c <__aeabi_dmul+0x1f8>
1a003bb6:	e712      	b.n	1a0039de <__aeabi_dmul+0x24a>

1a003bb8 <__aeabi_d2iz>:
1a003bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a003bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a003bc0:	d215      	bcs.n	1a003bee <__aeabi_d2iz+0x36>
1a003bc2:	d511      	bpl.n	1a003be8 <__aeabi_d2iz+0x30>
1a003bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a003bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a003bcc:	d912      	bls.n	1a003bf4 <__aeabi_d2iz+0x3c>
1a003bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a003bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a003bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a003bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003bde:	fa23 f002 	lsr.w	r0, r3, r2
1a003be2:	bf18      	it	ne
1a003be4:	4240      	negne	r0, r0
1a003be6:	4770      	bx	lr
1a003be8:	f04f 0000 	mov.w	r0, #0
1a003bec:	4770      	bx	lr
1a003bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a003bf2:	d105      	bne.n	1a003c00 <__aeabi_d2iz+0x48>
1a003bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a003bf8:	bf08      	it	eq
1a003bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a003bfe:	4770      	bx	lr
1a003c00:	f04f 0000 	mov.w	r0, #0
1a003c04:	4770      	bx	lr
1a003c06:	bf00      	nop

1a003c08 <__aeabi_uldivmod>:
1a003c08:	b953      	cbnz	r3, 1a003c20 <__aeabi_uldivmod+0x18>
1a003c0a:	b94a      	cbnz	r2, 1a003c20 <__aeabi_uldivmod+0x18>
1a003c0c:	2900      	cmp	r1, #0
1a003c0e:	bf08      	it	eq
1a003c10:	2800      	cmpeq	r0, #0
1a003c12:	bf1c      	itt	ne
1a003c14:	f04f 31ff 	movne.w	r1, #4294967295
1a003c18:	f04f 30ff 	movne.w	r0, #4294967295
1a003c1c:	f000 b974 	b.w	1a003f08 <__aeabi_idiv0>
1a003c20:	f1ad 0c08 	sub.w	ip, sp, #8
1a003c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003c28:	f000 f806 	bl	1a003c38 <__udivmoddi4>
1a003c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003c34:	b004      	add	sp, #16
1a003c36:	4770      	bx	lr

1a003c38 <__udivmoddi4>:
1a003c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003c3c:	9e08      	ldr	r6, [sp, #32]
1a003c3e:	4604      	mov	r4, r0
1a003c40:	4688      	mov	r8, r1
1a003c42:	2b00      	cmp	r3, #0
1a003c44:	f040 8085 	bne.w	1a003d52 <__udivmoddi4+0x11a>
1a003c48:	428a      	cmp	r2, r1
1a003c4a:	4615      	mov	r5, r2
1a003c4c:	d948      	bls.n	1a003ce0 <__udivmoddi4+0xa8>
1a003c4e:	fab2 f282 	clz	r2, r2
1a003c52:	b14a      	cbz	r2, 1a003c68 <__udivmoddi4+0x30>
1a003c54:	f1c2 0720 	rsb	r7, r2, #32
1a003c58:	fa01 f302 	lsl.w	r3, r1, r2
1a003c5c:	fa20 f707 	lsr.w	r7, r0, r7
1a003c60:	4095      	lsls	r5, r2
1a003c62:	ea47 0803 	orr.w	r8, r7, r3
1a003c66:	4094      	lsls	r4, r2
1a003c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c6c:	0c23      	lsrs	r3, r4, #16
1a003c6e:	fbb8 f7fe 	udiv	r7, r8, lr
1a003c72:	fa1f fc85 	uxth.w	ip, r5
1a003c76:	fb0e 8817 	mls	r8, lr, r7, r8
1a003c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003c7e:	fb07 f10c 	mul.w	r1, r7, ip
1a003c82:	4299      	cmp	r1, r3
1a003c84:	d909      	bls.n	1a003c9a <__udivmoddi4+0x62>
1a003c86:	18eb      	adds	r3, r5, r3
1a003c88:	f107 30ff 	add.w	r0, r7, #4294967295
1a003c8c:	f080 80e3 	bcs.w	1a003e56 <__udivmoddi4+0x21e>
1a003c90:	4299      	cmp	r1, r3
1a003c92:	f240 80e0 	bls.w	1a003e56 <__udivmoddi4+0x21e>
1a003c96:	3f02      	subs	r7, #2
1a003c98:	442b      	add	r3, r5
1a003c9a:	1a5b      	subs	r3, r3, r1
1a003c9c:	b2a4      	uxth	r4, r4
1a003c9e:	fbb3 f0fe 	udiv	r0, r3, lr
1a003ca2:	fb0e 3310 	mls	r3, lr, r0, r3
1a003ca6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003caa:	fb00 fc0c 	mul.w	ip, r0, ip
1a003cae:	45a4      	cmp	ip, r4
1a003cb0:	d909      	bls.n	1a003cc6 <__udivmoddi4+0x8e>
1a003cb2:	192c      	adds	r4, r5, r4
1a003cb4:	f100 33ff 	add.w	r3, r0, #4294967295
1a003cb8:	f080 80cb 	bcs.w	1a003e52 <__udivmoddi4+0x21a>
1a003cbc:	45a4      	cmp	ip, r4
1a003cbe:	f240 80c8 	bls.w	1a003e52 <__udivmoddi4+0x21a>
1a003cc2:	3802      	subs	r0, #2
1a003cc4:	442c      	add	r4, r5
1a003cc6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003cca:	eba4 040c 	sub.w	r4, r4, ip
1a003cce:	2700      	movs	r7, #0
1a003cd0:	b11e      	cbz	r6, 1a003cda <__udivmoddi4+0xa2>
1a003cd2:	40d4      	lsrs	r4, r2
1a003cd4:	2300      	movs	r3, #0
1a003cd6:	e9c6 4300 	strd	r4, r3, [r6]
1a003cda:	4639      	mov	r1, r7
1a003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003ce0:	2a00      	cmp	r2, #0
1a003ce2:	d053      	beq.n	1a003d8c <__udivmoddi4+0x154>
1a003ce4:	fab2 f282 	clz	r2, r2
1a003ce8:	2a00      	cmp	r2, #0
1a003cea:	f040 80b6 	bne.w	1a003e5a <__udivmoddi4+0x222>
1a003cee:	1b49      	subs	r1, r1, r5
1a003cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003cf4:	fa1f f885 	uxth.w	r8, r5
1a003cf8:	2701      	movs	r7, #1
1a003cfa:	fbb1 fcfe 	udiv	ip, r1, lr
1a003cfe:	0c23      	lsrs	r3, r4, #16
1a003d00:	fb0e 111c 	mls	r1, lr, ip, r1
1a003d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003d08:	fb08 f10c 	mul.w	r1, r8, ip
1a003d0c:	4299      	cmp	r1, r3
1a003d0e:	d907      	bls.n	1a003d20 <__udivmoddi4+0xe8>
1a003d10:	18eb      	adds	r3, r5, r3
1a003d12:	f10c 30ff 	add.w	r0, ip, #4294967295
1a003d16:	d202      	bcs.n	1a003d1e <__udivmoddi4+0xe6>
1a003d18:	4299      	cmp	r1, r3
1a003d1a:	f200 80ec 	bhi.w	1a003ef6 <__udivmoddi4+0x2be>
1a003d1e:	4684      	mov	ip, r0
1a003d20:	1a59      	subs	r1, r3, r1
1a003d22:	b2a3      	uxth	r3, r4
1a003d24:	fbb1 f0fe 	udiv	r0, r1, lr
1a003d28:	fb0e 1410 	mls	r4, lr, r0, r1
1a003d2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003d30:	fb08 f800 	mul.w	r8, r8, r0
1a003d34:	45a0      	cmp	r8, r4
1a003d36:	d907      	bls.n	1a003d48 <__udivmoddi4+0x110>
1a003d38:	192c      	adds	r4, r5, r4
1a003d3a:	f100 33ff 	add.w	r3, r0, #4294967295
1a003d3e:	d202      	bcs.n	1a003d46 <__udivmoddi4+0x10e>
1a003d40:	45a0      	cmp	r8, r4
1a003d42:	f200 80dc 	bhi.w	1a003efe <__udivmoddi4+0x2c6>
1a003d46:	4618      	mov	r0, r3
1a003d48:	eba4 0408 	sub.w	r4, r4, r8
1a003d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003d50:	e7be      	b.n	1a003cd0 <__udivmoddi4+0x98>
1a003d52:	428b      	cmp	r3, r1
1a003d54:	d908      	bls.n	1a003d68 <__udivmoddi4+0x130>
1a003d56:	2e00      	cmp	r6, #0
1a003d58:	d078      	beq.n	1a003e4c <__udivmoddi4+0x214>
1a003d5a:	2700      	movs	r7, #0
1a003d5c:	e9c6 0100 	strd	r0, r1, [r6]
1a003d60:	4638      	mov	r0, r7
1a003d62:	4639      	mov	r1, r7
1a003d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d68:	fab3 f783 	clz	r7, r3
1a003d6c:	b97f      	cbnz	r7, 1a003d8e <__udivmoddi4+0x156>
1a003d6e:	428b      	cmp	r3, r1
1a003d70:	d302      	bcc.n	1a003d78 <__udivmoddi4+0x140>
1a003d72:	4282      	cmp	r2, r0
1a003d74:	f200 80bd 	bhi.w	1a003ef2 <__udivmoddi4+0x2ba>
1a003d78:	1a84      	subs	r4, r0, r2
1a003d7a:	eb61 0303 	sbc.w	r3, r1, r3
1a003d7e:	2001      	movs	r0, #1
1a003d80:	4698      	mov	r8, r3
1a003d82:	2e00      	cmp	r6, #0
1a003d84:	d0a9      	beq.n	1a003cda <__udivmoddi4+0xa2>
1a003d86:	e9c6 4800 	strd	r4, r8, [r6]
1a003d8a:	e7a6      	b.n	1a003cda <__udivmoddi4+0xa2>
1a003d8c:	deff      	udf	#255	; 0xff
1a003d8e:	f1c7 0520 	rsb	r5, r7, #32
1a003d92:	40bb      	lsls	r3, r7
1a003d94:	fa22 fc05 	lsr.w	ip, r2, r5
1a003d98:	ea4c 0c03 	orr.w	ip, ip, r3
1a003d9c:	fa01 f407 	lsl.w	r4, r1, r7
1a003da0:	fa20 f805 	lsr.w	r8, r0, r5
1a003da4:	fa21 f305 	lsr.w	r3, r1, r5
1a003da8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a003dac:	ea48 0404 	orr.w	r4, r8, r4
1a003db0:	fbb3 f9fe 	udiv	r9, r3, lr
1a003db4:	0c21      	lsrs	r1, r4, #16
1a003db6:	fb0e 3319 	mls	r3, lr, r9, r3
1a003dba:	fa1f f88c 	uxth.w	r8, ip
1a003dbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003dc2:	fb09 fa08 	mul.w	sl, r9, r8
1a003dc6:	459a      	cmp	sl, r3
1a003dc8:	fa02 f207 	lsl.w	r2, r2, r7
1a003dcc:	fa00 f107 	lsl.w	r1, r0, r7
1a003dd0:	d90b      	bls.n	1a003dea <__udivmoddi4+0x1b2>
1a003dd2:	eb1c 0303 	adds.w	r3, ip, r3
1a003dd6:	f109 30ff 	add.w	r0, r9, #4294967295
1a003dda:	f080 8088 	bcs.w	1a003eee <__udivmoddi4+0x2b6>
1a003dde:	459a      	cmp	sl, r3
1a003de0:	f240 8085 	bls.w	1a003eee <__udivmoddi4+0x2b6>
1a003de4:	f1a9 0902 	sub.w	r9, r9, #2
1a003de8:	4463      	add	r3, ip
1a003dea:	eba3 030a 	sub.w	r3, r3, sl
1a003dee:	b2a4      	uxth	r4, r4
1a003df0:	fbb3 f0fe 	udiv	r0, r3, lr
1a003df4:	fb0e 3310 	mls	r3, lr, r0, r3
1a003df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003dfc:	fb00 f808 	mul.w	r8, r0, r8
1a003e00:	45a0      	cmp	r8, r4
1a003e02:	d908      	bls.n	1a003e16 <__udivmoddi4+0x1de>
1a003e04:	eb1c 0404 	adds.w	r4, ip, r4
1a003e08:	f100 33ff 	add.w	r3, r0, #4294967295
1a003e0c:	d26b      	bcs.n	1a003ee6 <__udivmoddi4+0x2ae>
1a003e0e:	45a0      	cmp	r8, r4
1a003e10:	d969      	bls.n	1a003ee6 <__udivmoddi4+0x2ae>
1a003e12:	3802      	subs	r0, #2
1a003e14:	4464      	add	r4, ip
1a003e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003e1a:	eba4 0408 	sub.w	r4, r4, r8
1a003e1e:	fba0 8902 	umull	r8, r9, r0, r2
1a003e22:	454c      	cmp	r4, r9
1a003e24:	46c6      	mov	lr, r8
1a003e26:	464b      	mov	r3, r9
1a003e28:	d354      	bcc.n	1a003ed4 <__udivmoddi4+0x29c>
1a003e2a:	d051      	beq.n	1a003ed0 <__udivmoddi4+0x298>
1a003e2c:	2e00      	cmp	r6, #0
1a003e2e:	d069      	beq.n	1a003f04 <__udivmoddi4+0x2cc>
1a003e30:	ebb1 020e 	subs.w	r2, r1, lr
1a003e34:	eb64 0403 	sbc.w	r4, r4, r3
1a003e38:	fa04 f505 	lsl.w	r5, r4, r5
1a003e3c:	fa22 f307 	lsr.w	r3, r2, r7
1a003e40:	40fc      	lsrs	r4, r7
1a003e42:	431d      	orrs	r5, r3
1a003e44:	e9c6 5400 	strd	r5, r4, [r6]
1a003e48:	2700      	movs	r7, #0
1a003e4a:	e746      	b.n	1a003cda <__udivmoddi4+0xa2>
1a003e4c:	4637      	mov	r7, r6
1a003e4e:	4630      	mov	r0, r6
1a003e50:	e743      	b.n	1a003cda <__udivmoddi4+0xa2>
1a003e52:	4618      	mov	r0, r3
1a003e54:	e737      	b.n	1a003cc6 <__udivmoddi4+0x8e>
1a003e56:	4607      	mov	r7, r0
1a003e58:	e71f      	b.n	1a003c9a <__udivmoddi4+0x62>
1a003e5a:	f1c2 0320 	rsb	r3, r2, #32
1a003e5e:	fa20 f703 	lsr.w	r7, r0, r3
1a003e62:	4095      	lsls	r5, r2
1a003e64:	fa01 f002 	lsl.w	r0, r1, r2
1a003e68:	fa21 f303 	lsr.w	r3, r1, r3
1a003e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003e70:	4338      	orrs	r0, r7
1a003e72:	0c01      	lsrs	r1, r0, #16
1a003e74:	fbb3 f7fe 	udiv	r7, r3, lr
1a003e78:	fa1f f885 	uxth.w	r8, r5
1a003e7c:	fb0e 3317 	mls	r3, lr, r7, r3
1a003e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003e84:	fb07 f308 	mul.w	r3, r7, r8
1a003e88:	428b      	cmp	r3, r1
1a003e8a:	fa04 f402 	lsl.w	r4, r4, r2
1a003e8e:	d907      	bls.n	1a003ea0 <__udivmoddi4+0x268>
1a003e90:	1869      	adds	r1, r5, r1
1a003e92:	f107 3cff 	add.w	ip, r7, #4294967295
1a003e96:	d228      	bcs.n	1a003eea <__udivmoddi4+0x2b2>
1a003e98:	428b      	cmp	r3, r1
1a003e9a:	d926      	bls.n	1a003eea <__udivmoddi4+0x2b2>
1a003e9c:	3f02      	subs	r7, #2
1a003e9e:	4429      	add	r1, r5
1a003ea0:	1acb      	subs	r3, r1, r3
1a003ea2:	b281      	uxth	r1, r0
1a003ea4:	fbb3 f0fe 	udiv	r0, r3, lr
1a003ea8:	fb0e 3310 	mls	r3, lr, r0, r3
1a003eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003eb0:	fb00 f308 	mul.w	r3, r0, r8
1a003eb4:	428b      	cmp	r3, r1
1a003eb6:	d907      	bls.n	1a003ec8 <__udivmoddi4+0x290>
1a003eb8:	1869      	adds	r1, r5, r1
1a003eba:	f100 3cff 	add.w	ip, r0, #4294967295
1a003ebe:	d210      	bcs.n	1a003ee2 <__udivmoddi4+0x2aa>
1a003ec0:	428b      	cmp	r3, r1
1a003ec2:	d90e      	bls.n	1a003ee2 <__udivmoddi4+0x2aa>
1a003ec4:	3802      	subs	r0, #2
1a003ec6:	4429      	add	r1, r5
1a003ec8:	1ac9      	subs	r1, r1, r3
1a003eca:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003ece:	e714      	b.n	1a003cfa <__udivmoddi4+0xc2>
1a003ed0:	4541      	cmp	r1, r8
1a003ed2:	d2ab      	bcs.n	1a003e2c <__udivmoddi4+0x1f4>
1a003ed4:	ebb8 0e02 	subs.w	lr, r8, r2
1a003ed8:	eb69 020c 	sbc.w	r2, r9, ip
1a003edc:	3801      	subs	r0, #1
1a003ede:	4613      	mov	r3, r2
1a003ee0:	e7a4      	b.n	1a003e2c <__udivmoddi4+0x1f4>
1a003ee2:	4660      	mov	r0, ip
1a003ee4:	e7f0      	b.n	1a003ec8 <__udivmoddi4+0x290>
1a003ee6:	4618      	mov	r0, r3
1a003ee8:	e795      	b.n	1a003e16 <__udivmoddi4+0x1de>
1a003eea:	4667      	mov	r7, ip
1a003eec:	e7d8      	b.n	1a003ea0 <__udivmoddi4+0x268>
1a003eee:	4681      	mov	r9, r0
1a003ef0:	e77b      	b.n	1a003dea <__udivmoddi4+0x1b2>
1a003ef2:	4638      	mov	r0, r7
1a003ef4:	e745      	b.n	1a003d82 <__udivmoddi4+0x14a>
1a003ef6:	f1ac 0c02 	sub.w	ip, ip, #2
1a003efa:	442b      	add	r3, r5
1a003efc:	e710      	b.n	1a003d20 <__udivmoddi4+0xe8>
1a003efe:	3802      	subs	r0, #2
1a003f00:	442c      	add	r4, r5
1a003f02:	e721      	b.n	1a003d48 <__udivmoddi4+0x110>
1a003f04:	4637      	mov	r7, r6
1a003f06:	e6e8      	b.n	1a003cda <__udivmoddi4+0xa2>

1a003f08 <__aeabi_idiv0>:
1a003f08:	4770      	bx	lr
1a003f0a:	bf00      	nop

1a003f0c <__sflush_r>:
1a003f0c:	898a      	ldrh	r2, [r1, #12]
1a003f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003f12:	4605      	mov	r5, r0
1a003f14:	0710      	lsls	r0, r2, #28
1a003f16:	460c      	mov	r4, r1
1a003f18:	d458      	bmi.n	1a003fcc <__sflush_r+0xc0>
1a003f1a:	684b      	ldr	r3, [r1, #4]
1a003f1c:	2b00      	cmp	r3, #0
1a003f1e:	dc05      	bgt.n	1a003f2c <__sflush_r+0x20>
1a003f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003f22:	2b00      	cmp	r3, #0
1a003f24:	dc02      	bgt.n	1a003f2c <__sflush_r+0x20>
1a003f26:	2000      	movs	r0, #0
1a003f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003f2e:	2e00      	cmp	r6, #0
1a003f30:	d0f9      	beq.n	1a003f26 <__sflush_r+0x1a>
1a003f32:	2300      	movs	r3, #0
1a003f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003f38:	682f      	ldr	r7, [r5, #0]
1a003f3a:	602b      	str	r3, [r5, #0]
1a003f3c:	d032      	beq.n	1a003fa4 <__sflush_r+0x98>
1a003f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003f40:	89a3      	ldrh	r3, [r4, #12]
1a003f42:	075a      	lsls	r2, r3, #29
1a003f44:	d505      	bpl.n	1a003f52 <__sflush_r+0x46>
1a003f46:	6863      	ldr	r3, [r4, #4]
1a003f48:	1ac0      	subs	r0, r0, r3
1a003f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003f4c:	b10b      	cbz	r3, 1a003f52 <__sflush_r+0x46>
1a003f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003f50:	1ac0      	subs	r0, r0, r3
1a003f52:	2300      	movs	r3, #0
1a003f54:	4602      	mov	r2, r0
1a003f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003f58:	6a21      	ldr	r1, [r4, #32]
1a003f5a:	4628      	mov	r0, r5
1a003f5c:	47b0      	blx	r6
1a003f5e:	1c43      	adds	r3, r0, #1
1a003f60:	89a3      	ldrh	r3, [r4, #12]
1a003f62:	d106      	bne.n	1a003f72 <__sflush_r+0x66>
1a003f64:	6829      	ldr	r1, [r5, #0]
1a003f66:	291d      	cmp	r1, #29
1a003f68:	d849      	bhi.n	1a003ffe <__sflush_r+0xf2>
1a003f6a:	4a2a      	ldr	r2, [pc, #168]	; (1a004014 <__sflush_r+0x108>)
1a003f6c:	40ca      	lsrs	r2, r1
1a003f6e:	07d6      	lsls	r6, r2, #31
1a003f70:	d545      	bpl.n	1a003ffe <__sflush_r+0xf2>
1a003f72:	2200      	movs	r2, #0
1a003f74:	6062      	str	r2, [r4, #4]
1a003f76:	04d9      	lsls	r1, r3, #19
1a003f78:	6922      	ldr	r2, [r4, #16]
1a003f7a:	6022      	str	r2, [r4, #0]
1a003f7c:	d504      	bpl.n	1a003f88 <__sflush_r+0x7c>
1a003f7e:	1c42      	adds	r2, r0, #1
1a003f80:	d101      	bne.n	1a003f86 <__sflush_r+0x7a>
1a003f82:	682b      	ldr	r3, [r5, #0]
1a003f84:	b903      	cbnz	r3, 1a003f88 <__sflush_r+0x7c>
1a003f86:	6560      	str	r0, [r4, #84]	; 0x54
1a003f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003f8a:	602f      	str	r7, [r5, #0]
1a003f8c:	2900      	cmp	r1, #0
1a003f8e:	d0ca      	beq.n	1a003f26 <__sflush_r+0x1a>
1a003f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003f94:	4299      	cmp	r1, r3
1a003f96:	d002      	beq.n	1a003f9e <__sflush_r+0x92>
1a003f98:	4628      	mov	r0, r5
1a003f9a:	f000 f9ab 	bl	1a0042f4 <_free_r>
1a003f9e:	2000      	movs	r0, #0
1a003fa0:	6360      	str	r0, [r4, #52]	; 0x34
1a003fa2:	e7c1      	b.n	1a003f28 <__sflush_r+0x1c>
1a003fa4:	6a21      	ldr	r1, [r4, #32]
1a003fa6:	2301      	movs	r3, #1
1a003fa8:	4628      	mov	r0, r5
1a003faa:	47b0      	blx	r6
1a003fac:	1c41      	adds	r1, r0, #1
1a003fae:	d1c7      	bne.n	1a003f40 <__sflush_r+0x34>
1a003fb0:	682b      	ldr	r3, [r5, #0]
1a003fb2:	2b00      	cmp	r3, #0
1a003fb4:	d0c4      	beq.n	1a003f40 <__sflush_r+0x34>
1a003fb6:	2b1d      	cmp	r3, #29
1a003fb8:	d001      	beq.n	1a003fbe <__sflush_r+0xb2>
1a003fba:	2b16      	cmp	r3, #22
1a003fbc:	d101      	bne.n	1a003fc2 <__sflush_r+0xb6>
1a003fbe:	602f      	str	r7, [r5, #0]
1a003fc0:	e7b1      	b.n	1a003f26 <__sflush_r+0x1a>
1a003fc2:	89a3      	ldrh	r3, [r4, #12]
1a003fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003fc8:	81a3      	strh	r3, [r4, #12]
1a003fca:	e7ad      	b.n	1a003f28 <__sflush_r+0x1c>
1a003fcc:	690f      	ldr	r7, [r1, #16]
1a003fce:	2f00      	cmp	r7, #0
1a003fd0:	d0a9      	beq.n	1a003f26 <__sflush_r+0x1a>
1a003fd2:	0793      	lsls	r3, r2, #30
1a003fd4:	680e      	ldr	r6, [r1, #0]
1a003fd6:	bf08      	it	eq
1a003fd8:	694b      	ldreq	r3, [r1, #20]
1a003fda:	600f      	str	r7, [r1, #0]
1a003fdc:	bf18      	it	ne
1a003fde:	2300      	movne	r3, #0
1a003fe0:	eba6 0807 	sub.w	r8, r6, r7
1a003fe4:	608b      	str	r3, [r1, #8]
1a003fe6:	f1b8 0f00 	cmp.w	r8, #0
1a003fea:	dd9c      	ble.n	1a003f26 <__sflush_r+0x1a>
1a003fec:	4643      	mov	r3, r8
1a003fee:	463a      	mov	r2, r7
1a003ff0:	6a21      	ldr	r1, [r4, #32]
1a003ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003ff4:	4628      	mov	r0, r5
1a003ff6:	47b0      	blx	r6
1a003ff8:	2800      	cmp	r0, #0
1a003ffa:	dc06      	bgt.n	1a00400a <__sflush_r+0xfe>
1a003ffc:	89a3      	ldrh	r3, [r4, #12]
1a003ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004002:	81a3      	strh	r3, [r4, #12]
1a004004:	f04f 30ff 	mov.w	r0, #4294967295
1a004008:	e78e      	b.n	1a003f28 <__sflush_r+0x1c>
1a00400a:	4407      	add	r7, r0
1a00400c:	eba8 0800 	sub.w	r8, r8, r0
1a004010:	e7e9      	b.n	1a003fe6 <__sflush_r+0xda>
1a004012:	bf00      	nop
1a004014:	20400001 	.word	0x20400001

1a004018 <_fflush_r>:
1a004018:	b538      	push	{r3, r4, r5, lr}
1a00401a:	690b      	ldr	r3, [r1, #16]
1a00401c:	4605      	mov	r5, r0
1a00401e:	460c      	mov	r4, r1
1a004020:	b913      	cbnz	r3, 1a004028 <_fflush_r+0x10>
1a004022:	2500      	movs	r5, #0
1a004024:	4628      	mov	r0, r5
1a004026:	bd38      	pop	{r3, r4, r5, pc}
1a004028:	b118      	cbz	r0, 1a004032 <_fflush_r+0x1a>
1a00402a:	6983      	ldr	r3, [r0, #24]
1a00402c:	b90b      	cbnz	r3, 1a004032 <_fflush_r+0x1a>
1a00402e:	f000 f887 	bl	1a004140 <__sinit>
1a004032:	4b14      	ldr	r3, [pc, #80]	; (1a004084 <_fflush_r+0x6c>)
1a004034:	429c      	cmp	r4, r3
1a004036:	d11b      	bne.n	1a004070 <_fflush_r+0x58>
1a004038:	686c      	ldr	r4, [r5, #4]
1a00403a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00403e:	2b00      	cmp	r3, #0
1a004040:	d0ef      	beq.n	1a004022 <_fflush_r+0xa>
1a004042:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a004044:	07d0      	lsls	r0, r2, #31
1a004046:	d404      	bmi.n	1a004052 <_fflush_r+0x3a>
1a004048:	0599      	lsls	r1, r3, #22
1a00404a:	d402      	bmi.n	1a004052 <_fflush_r+0x3a>
1a00404c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00404e:	f000 f938 	bl	1a0042c2 <__retarget_lock_acquire_recursive>
1a004052:	4628      	mov	r0, r5
1a004054:	4621      	mov	r1, r4
1a004056:	f7ff ff59 	bl	1a003f0c <__sflush_r>
1a00405a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00405c:	07da      	lsls	r2, r3, #31
1a00405e:	4605      	mov	r5, r0
1a004060:	d4e0      	bmi.n	1a004024 <_fflush_r+0xc>
1a004062:	89a3      	ldrh	r3, [r4, #12]
1a004064:	059b      	lsls	r3, r3, #22
1a004066:	d4dd      	bmi.n	1a004024 <_fflush_r+0xc>
1a004068:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00406a:	f000 f92b 	bl	1a0042c4 <__retarget_lock_release_recursive>
1a00406e:	e7d9      	b.n	1a004024 <_fflush_r+0xc>
1a004070:	4b05      	ldr	r3, [pc, #20]	; (1a004088 <_fflush_r+0x70>)
1a004072:	429c      	cmp	r4, r3
1a004074:	d101      	bne.n	1a00407a <_fflush_r+0x62>
1a004076:	68ac      	ldr	r4, [r5, #8]
1a004078:	e7df      	b.n	1a00403a <_fflush_r+0x22>
1a00407a:	4b04      	ldr	r3, [pc, #16]	; (1a00408c <_fflush_r+0x74>)
1a00407c:	429c      	cmp	r4, r3
1a00407e:	bf08      	it	eq
1a004080:	68ec      	ldreq	r4, [r5, #12]
1a004082:	e7da      	b.n	1a00403a <_fflush_r+0x22>
1a004084:	1a005294 	.word	0x1a005294
1a004088:	1a0052b4 	.word	0x1a0052b4
1a00408c:	1a005274 	.word	0x1a005274

1a004090 <std>:
1a004090:	2300      	movs	r3, #0
1a004092:	b510      	push	{r4, lr}
1a004094:	4604      	mov	r4, r0
1a004096:	e9c0 3300 	strd	r3, r3, [r0]
1a00409a:	6083      	str	r3, [r0, #8]
1a00409c:	8181      	strh	r1, [r0, #12]
1a00409e:	6643      	str	r3, [r0, #100]	; 0x64
1a0040a0:	81c2      	strh	r2, [r0, #14]
1a0040a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0040a6:	6183      	str	r3, [r0, #24]
1a0040a8:	4619      	mov	r1, r3
1a0040aa:	2208      	movs	r2, #8
1a0040ac:	305c      	adds	r0, #92	; 0x5c
1a0040ae:	f000 f918 	bl	1a0042e2 <memset>
1a0040b2:	4b05      	ldr	r3, [pc, #20]	; (1a0040c8 <std+0x38>)
1a0040b4:	6263      	str	r3, [r4, #36]	; 0x24
1a0040b6:	4b05      	ldr	r3, [pc, #20]	; (1a0040cc <std+0x3c>)
1a0040b8:	62a3      	str	r3, [r4, #40]	; 0x28
1a0040ba:	4b05      	ldr	r3, [pc, #20]	; (1a0040d0 <std+0x40>)
1a0040bc:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0040be:	4b05      	ldr	r3, [pc, #20]	; (1a0040d4 <std+0x44>)
1a0040c0:	6224      	str	r4, [r4, #32]
1a0040c2:	6323      	str	r3, [r4, #48]	; 0x30
1a0040c4:	bd10      	pop	{r4, pc}
1a0040c6:	bf00      	nop
1a0040c8:	1a004b19 	.word	0x1a004b19
1a0040cc:	1a004b3b 	.word	0x1a004b3b
1a0040d0:	1a004b73 	.word	0x1a004b73
1a0040d4:	1a004b97 	.word	0x1a004b97

1a0040d8 <_cleanup_r>:
1a0040d8:	4901      	ldr	r1, [pc, #4]	; (1a0040e0 <_cleanup_r+0x8>)
1a0040da:	f000 b8af 	b.w	1a00423c <_fwalk_reent>
1a0040de:	bf00      	nop
1a0040e0:	1a004019 	.word	0x1a004019

1a0040e4 <__sfmoreglue>:
1a0040e4:	b570      	push	{r4, r5, r6, lr}
1a0040e6:	1e4a      	subs	r2, r1, #1
1a0040e8:	2568      	movs	r5, #104	; 0x68
1a0040ea:	4355      	muls	r5, r2
1a0040ec:	460e      	mov	r6, r1
1a0040ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0040f2:	f000 f94d 	bl	1a004390 <_malloc_r>
1a0040f6:	4604      	mov	r4, r0
1a0040f8:	b140      	cbz	r0, 1a00410c <__sfmoreglue+0x28>
1a0040fa:	2100      	movs	r1, #0
1a0040fc:	e9c0 1600 	strd	r1, r6, [r0]
1a004100:	300c      	adds	r0, #12
1a004102:	60a0      	str	r0, [r4, #8]
1a004104:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004108:	f000 f8eb 	bl	1a0042e2 <memset>
1a00410c:	4620      	mov	r0, r4
1a00410e:	bd70      	pop	{r4, r5, r6, pc}

1a004110 <__sfp_lock_acquire>:
1a004110:	4801      	ldr	r0, [pc, #4]	; (1a004118 <__sfp_lock_acquire+0x8>)
1a004112:	f000 b8d6 	b.w	1a0042c2 <__retarget_lock_acquire_recursive>
1a004116:	bf00      	nop
1a004118:	10002324 	.word	0x10002324

1a00411c <__sfp_lock_release>:
1a00411c:	4801      	ldr	r0, [pc, #4]	; (1a004124 <__sfp_lock_release+0x8>)
1a00411e:	f000 b8d1 	b.w	1a0042c4 <__retarget_lock_release_recursive>
1a004122:	bf00      	nop
1a004124:	10002324 	.word	0x10002324

1a004128 <__sinit_lock_acquire>:
1a004128:	4801      	ldr	r0, [pc, #4]	; (1a004130 <__sinit_lock_acquire+0x8>)
1a00412a:	f000 b8ca 	b.w	1a0042c2 <__retarget_lock_acquire_recursive>
1a00412e:	bf00      	nop
1a004130:	1000231f 	.word	0x1000231f

1a004134 <__sinit_lock_release>:
1a004134:	4801      	ldr	r0, [pc, #4]	; (1a00413c <__sinit_lock_release+0x8>)
1a004136:	f000 b8c5 	b.w	1a0042c4 <__retarget_lock_release_recursive>
1a00413a:	bf00      	nop
1a00413c:	1000231f 	.word	0x1000231f

1a004140 <__sinit>:
1a004140:	b510      	push	{r4, lr}
1a004142:	4604      	mov	r4, r0
1a004144:	f7ff fff0 	bl	1a004128 <__sinit_lock_acquire>
1a004148:	69a3      	ldr	r3, [r4, #24]
1a00414a:	b11b      	cbz	r3, 1a004154 <__sinit+0x14>
1a00414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004150:	f7ff bff0 	b.w	1a004134 <__sinit_lock_release>
1a004154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a004158:	6523      	str	r3, [r4, #80]	; 0x50
1a00415a:	4b13      	ldr	r3, [pc, #76]	; (1a0041a8 <__sinit+0x68>)
1a00415c:	4a13      	ldr	r2, [pc, #76]	; (1a0041ac <__sinit+0x6c>)
1a00415e:	681b      	ldr	r3, [r3, #0]
1a004160:	62a2      	str	r2, [r4, #40]	; 0x28
1a004162:	42a3      	cmp	r3, r4
1a004164:	bf04      	itt	eq
1a004166:	2301      	moveq	r3, #1
1a004168:	61a3      	streq	r3, [r4, #24]
1a00416a:	4620      	mov	r0, r4
1a00416c:	f000 f820 	bl	1a0041b0 <__sfp>
1a004170:	6060      	str	r0, [r4, #4]
1a004172:	4620      	mov	r0, r4
1a004174:	f000 f81c 	bl	1a0041b0 <__sfp>
1a004178:	60a0      	str	r0, [r4, #8]
1a00417a:	4620      	mov	r0, r4
1a00417c:	f000 f818 	bl	1a0041b0 <__sfp>
1a004180:	2200      	movs	r2, #0
1a004182:	60e0      	str	r0, [r4, #12]
1a004184:	2104      	movs	r1, #4
1a004186:	6860      	ldr	r0, [r4, #4]
1a004188:	f7ff ff82 	bl	1a004090 <std>
1a00418c:	2201      	movs	r2, #1
1a00418e:	2109      	movs	r1, #9
1a004190:	68a0      	ldr	r0, [r4, #8]
1a004192:	f7ff ff7d 	bl	1a004090 <std>
1a004196:	2202      	movs	r2, #2
1a004198:	2112      	movs	r1, #18
1a00419a:	68e0      	ldr	r0, [r4, #12]
1a00419c:	f7ff ff78 	bl	1a004090 <std>
1a0041a0:	2301      	movs	r3, #1
1a0041a2:	61a3      	str	r3, [r4, #24]
1a0041a4:	e7d2      	b.n	1a00414c <__sinit+0xc>
1a0041a6:	bf00      	nop
1a0041a8:	1a0052d4 	.word	0x1a0052d4
1a0041ac:	1a0040d9 	.word	0x1a0040d9

1a0041b0 <__sfp>:
1a0041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0041b2:	4607      	mov	r7, r0
1a0041b4:	f7ff ffac 	bl	1a004110 <__sfp_lock_acquire>
1a0041b8:	4b1e      	ldr	r3, [pc, #120]	; (1a004234 <__sfp+0x84>)
1a0041ba:	681e      	ldr	r6, [r3, #0]
1a0041bc:	69b3      	ldr	r3, [r6, #24]
1a0041be:	b913      	cbnz	r3, 1a0041c6 <__sfp+0x16>
1a0041c0:	4630      	mov	r0, r6
1a0041c2:	f7ff ffbd 	bl	1a004140 <__sinit>
1a0041c6:	3648      	adds	r6, #72	; 0x48
1a0041c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0041cc:	3b01      	subs	r3, #1
1a0041ce:	d503      	bpl.n	1a0041d8 <__sfp+0x28>
1a0041d0:	6833      	ldr	r3, [r6, #0]
1a0041d2:	b30b      	cbz	r3, 1a004218 <__sfp+0x68>
1a0041d4:	6836      	ldr	r6, [r6, #0]
1a0041d6:	e7f7      	b.n	1a0041c8 <__sfp+0x18>
1a0041d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0041dc:	b9d5      	cbnz	r5, 1a004214 <__sfp+0x64>
1a0041de:	4b16      	ldr	r3, [pc, #88]	; (1a004238 <__sfp+0x88>)
1a0041e0:	60e3      	str	r3, [r4, #12]
1a0041e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0041e6:	6665      	str	r5, [r4, #100]	; 0x64
1a0041e8:	f000 f86a 	bl	1a0042c0 <__retarget_lock_init_recursive>
1a0041ec:	f7ff ff96 	bl	1a00411c <__sfp_lock_release>
1a0041f0:	6025      	str	r5, [r4, #0]
1a0041f2:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a0041f6:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0041fa:	61a5      	str	r5, [r4, #24]
1a0041fc:	2208      	movs	r2, #8
1a0041fe:	4629      	mov	r1, r5
1a004200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004204:	f000 f86d 	bl	1a0042e2 <memset>
1a004208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a00420c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004210:	4620      	mov	r0, r4
1a004212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004214:	3468      	adds	r4, #104	; 0x68
1a004216:	e7d9      	b.n	1a0041cc <__sfp+0x1c>
1a004218:	2104      	movs	r1, #4
1a00421a:	4638      	mov	r0, r7
1a00421c:	f7ff ff62 	bl	1a0040e4 <__sfmoreglue>
1a004220:	4604      	mov	r4, r0
1a004222:	6030      	str	r0, [r6, #0]
1a004224:	2800      	cmp	r0, #0
1a004226:	d1d5      	bne.n	1a0041d4 <__sfp+0x24>
1a004228:	f7ff ff78 	bl	1a00411c <__sfp_lock_release>
1a00422c:	230c      	movs	r3, #12
1a00422e:	603b      	str	r3, [r7, #0]
1a004230:	e7ee      	b.n	1a004210 <__sfp+0x60>
1a004232:	bf00      	nop
1a004234:	1a0052d4 	.word	0x1a0052d4
1a004238:	ffff0001 	.word	0xffff0001

1a00423c <_fwalk_reent>:
1a00423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004240:	4680      	mov	r8, r0
1a004242:	4689      	mov	r9, r1
1a004244:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004248:	2600      	movs	r6, #0
1a00424a:	b914      	cbnz	r4, 1a004252 <_fwalk_reent+0x16>
1a00424c:	4630      	mov	r0, r6
1a00424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004252:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004256:	3f01      	subs	r7, #1
1a004258:	d501      	bpl.n	1a00425e <_fwalk_reent+0x22>
1a00425a:	6824      	ldr	r4, [r4, #0]
1a00425c:	e7f5      	b.n	1a00424a <_fwalk_reent+0xe>
1a00425e:	89ab      	ldrh	r3, [r5, #12]
1a004260:	2b01      	cmp	r3, #1
1a004262:	d907      	bls.n	1a004274 <_fwalk_reent+0x38>
1a004264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004268:	3301      	adds	r3, #1
1a00426a:	d003      	beq.n	1a004274 <_fwalk_reent+0x38>
1a00426c:	4629      	mov	r1, r5
1a00426e:	4640      	mov	r0, r8
1a004270:	47c8      	blx	r9
1a004272:	4306      	orrs	r6, r0
1a004274:	3568      	adds	r5, #104	; 0x68
1a004276:	e7ee      	b.n	1a004256 <_fwalk_reent+0x1a>

1a004278 <__libc_init_array>:
1a004278:	b570      	push	{r4, r5, r6, lr}
1a00427a:	4d0d      	ldr	r5, [pc, #52]	; (1a0042b0 <__libc_init_array+0x38>)
1a00427c:	4c0d      	ldr	r4, [pc, #52]	; (1a0042b4 <__libc_init_array+0x3c>)
1a00427e:	1b64      	subs	r4, r4, r5
1a004280:	10a4      	asrs	r4, r4, #2
1a004282:	2600      	movs	r6, #0
1a004284:	42a6      	cmp	r6, r4
1a004286:	d109      	bne.n	1a00429c <__libc_init_array+0x24>
1a004288:	4d0b      	ldr	r5, [pc, #44]	; (1a0042b8 <__libc_init_array+0x40>)
1a00428a:	4c0c      	ldr	r4, [pc, #48]	; (1a0042bc <__libc_init_array+0x44>)
1a00428c:	f7fc f9bf 	bl	1a00060e <_init>
1a004290:	1b64      	subs	r4, r4, r5
1a004292:	10a4      	asrs	r4, r4, #2
1a004294:	2600      	movs	r6, #0
1a004296:	42a6      	cmp	r6, r4
1a004298:	d105      	bne.n	1a0042a6 <__libc_init_array+0x2e>
1a00429a:	bd70      	pop	{r4, r5, r6, pc}
1a00429c:	f855 3b04 	ldr.w	r3, [r5], #4
1a0042a0:	4798      	blx	r3
1a0042a2:	3601      	adds	r6, #1
1a0042a4:	e7ee      	b.n	1a004284 <__libc_init_array+0xc>
1a0042a6:	f855 3b04 	ldr.w	r3, [r5], #4
1a0042aa:	4798      	blx	r3
1a0042ac:	3601      	adds	r6, #1
1a0042ae:	e7f2      	b.n	1a004296 <__libc_init_array+0x1e>
1a0042b0:	1a00530c 	.word	0x1a00530c
1a0042b4:	1a00530c 	.word	0x1a00530c
1a0042b8:	1a00530c 	.word	0x1a00530c
1a0042bc:	1a005310 	.word	0x1a005310

1a0042c0 <__retarget_lock_init_recursive>:
1a0042c0:	4770      	bx	lr

1a0042c2 <__retarget_lock_acquire_recursive>:
1a0042c2:	4770      	bx	lr

1a0042c4 <__retarget_lock_release_recursive>:
1a0042c4:	4770      	bx	lr

1a0042c6 <memcpy>:
1a0042c6:	440a      	add	r2, r1
1a0042c8:	4291      	cmp	r1, r2
1a0042ca:	f100 33ff 	add.w	r3, r0, #4294967295
1a0042ce:	d100      	bne.n	1a0042d2 <memcpy+0xc>
1a0042d0:	4770      	bx	lr
1a0042d2:	b510      	push	{r4, lr}
1a0042d4:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0042d8:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0042dc:	4291      	cmp	r1, r2
1a0042de:	d1f9      	bne.n	1a0042d4 <memcpy+0xe>
1a0042e0:	bd10      	pop	{r4, pc}

1a0042e2 <memset>:
1a0042e2:	4402      	add	r2, r0
1a0042e4:	4603      	mov	r3, r0
1a0042e6:	4293      	cmp	r3, r2
1a0042e8:	d100      	bne.n	1a0042ec <memset+0xa>
1a0042ea:	4770      	bx	lr
1a0042ec:	f803 1b01 	strb.w	r1, [r3], #1
1a0042f0:	e7f9      	b.n	1a0042e6 <memset+0x4>
1a0042f2:	Address 0x1a0042f2 is out of bounds.


1a0042f4 <_free_r>:
1a0042f4:	b538      	push	{r3, r4, r5, lr}
1a0042f6:	4605      	mov	r5, r0
1a0042f8:	2900      	cmp	r1, #0
1a0042fa:	d045      	beq.n	1a004388 <_free_r+0x94>
1a0042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004300:	1f0c      	subs	r4, r1, #4
1a004302:	2b00      	cmp	r3, #0
1a004304:	bfb8      	it	lt
1a004306:	18e4      	addlt	r4, r4, r3
1a004308:	f000 fdd2 	bl	1a004eb0 <__malloc_lock>
1a00430c:	4a1f      	ldr	r2, [pc, #124]	; (1a00438c <_free_r+0x98>)
1a00430e:	6813      	ldr	r3, [r2, #0]
1a004310:	4610      	mov	r0, r2
1a004312:	b933      	cbnz	r3, 1a004322 <_free_r+0x2e>
1a004314:	6063      	str	r3, [r4, #4]
1a004316:	6014      	str	r4, [r2, #0]
1a004318:	4628      	mov	r0, r5
1a00431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00431e:	f000 bdcd 	b.w	1a004ebc <__malloc_unlock>
1a004322:	42a3      	cmp	r3, r4
1a004324:	d90c      	bls.n	1a004340 <_free_r+0x4c>
1a004326:	6821      	ldr	r1, [r4, #0]
1a004328:	1862      	adds	r2, r4, r1
1a00432a:	4293      	cmp	r3, r2
1a00432c:	bf04      	itt	eq
1a00432e:	681a      	ldreq	r2, [r3, #0]
1a004330:	685b      	ldreq	r3, [r3, #4]
1a004332:	6063      	str	r3, [r4, #4]
1a004334:	bf04      	itt	eq
1a004336:	1852      	addeq	r2, r2, r1
1a004338:	6022      	streq	r2, [r4, #0]
1a00433a:	6004      	str	r4, [r0, #0]
1a00433c:	e7ec      	b.n	1a004318 <_free_r+0x24>
1a00433e:	4613      	mov	r3, r2
1a004340:	685a      	ldr	r2, [r3, #4]
1a004342:	b10a      	cbz	r2, 1a004348 <_free_r+0x54>
1a004344:	42a2      	cmp	r2, r4
1a004346:	d9fa      	bls.n	1a00433e <_free_r+0x4a>
1a004348:	6819      	ldr	r1, [r3, #0]
1a00434a:	1858      	adds	r0, r3, r1
1a00434c:	42a0      	cmp	r0, r4
1a00434e:	d10b      	bne.n	1a004368 <_free_r+0x74>
1a004350:	6820      	ldr	r0, [r4, #0]
1a004352:	4401      	add	r1, r0
1a004354:	1858      	adds	r0, r3, r1
1a004356:	4282      	cmp	r2, r0
1a004358:	6019      	str	r1, [r3, #0]
1a00435a:	d1dd      	bne.n	1a004318 <_free_r+0x24>
1a00435c:	6810      	ldr	r0, [r2, #0]
1a00435e:	6852      	ldr	r2, [r2, #4]
1a004360:	605a      	str	r2, [r3, #4]
1a004362:	4401      	add	r1, r0
1a004364:	6019      	str	r1, [r3, #0]
1a004366:	e7d7      	b.n	1a004318 <_free_r+0x24>
1a004368:	d902      	bls.n	1a004370 <_free_r+0x7c>
1a00436a:	230c      	movs	r3, #12
1a00436c:	602b      	str	r3, [r5, #0]
1a00436e:	e7d3      	b.n	1a004318 <_free_r+0x24>
1a004370:	6820      	ldr	r0, [r4, #0]
1a004372:	1821      	adds	r1, r4, r0
1a004374:	428a      	cmp	r2, r1
1a004376:	bf04      	itt	eq
1a004378:	6811      	ldreq	r1, [r2, #0]
1a00437a:	6852      	ldreq	r2, [r2, #4]
1a00437c:	6062      	str	r2, [r4, #4]
1a00437e:	bf04      	itt	eq
1a004380:	1809      	addeq	r1, r1, r0
1a004382:	6021      	streq	r1, [r4, #0]
1a004384:	605c      	str	r4, [r3, #4]
1a004386:	e7c7      	b.n	1a004318 <_free_r+0x24>
1a004388:	bd38      	pop	{r3, r4, r5, pc}
1a00438a:	bf00      	nop
1a00438c:	10002234 	.word	0x10002234

1a004390 <_malloc_r>:
1a004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004392:	1ccd      	adds	r5, r1, #3
1a004394:	f025 0503 	bic.w	r5, r5, #3
1a004398:	3508      	adds	r5, #8
1a00439a:	2d0c      	cmp	r5, #12
1a00439c:	bf38      	it	cc
1a00439e:	250c      	movcc	r5, #12
1a0043a0:	2d00      	cmp	r5, #0
1a0043a2:	4606      	mov	r6, r0
1a0043a4:	db01      	blt.n	1a0043aa <_malloc_r+0x1a>
1a0043a6:	42a9      	cmp	r1, r5
1a0043a8:	d903      	bls.n	1a0043b2 <_malloc_r+0x22>
1a0043aa:	230c      	movs	r3, #12
1a0043ac:	6033      	str	r3, [r6, #0]
1a0043ae:	2000      	movs	r0, #0
1a0043b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0043b2:	f000 fd7d 	bl	1a004eb0 <__malloc_lock>
1a0043b6:	4921      	ldr	r1, [pc, #132]	; (1a00443c <_malloc_r+0xac>)
1a0043b8:	680a      	ldr	r2, [r1, #0]
1a0043ba:	4614      	mov	r4, r2
1a0043bc:	b99c      	cbnz	r4, 1a0043e6 <_malloc_r+0x56>
1a0043be:	4f20      	ldr	r7, [pc, #128]	; (1a004440 <_malloc_r+0xb0>)
1a0043c0:	683b      	ldr	r3, [r7, #0]
1a0043c2:	b923      	cbnz	r3, 1a0043ce <_malloc_r+0x3e>
1a0043c4:	4621      	mov	r1, r4
1a0043c6:	4630      	mov	r0, r6
1a0043c8:	f7fc f976 	bl	1a0006b8 <_sbrk_r>
1a0043cc:	6038      	str	r0, [r7, #0]
1a0043ce:	4629      	mov	r1, r5
1a0043d0:	4630      	mov	r0, r6
1a0043d2:	f7fc f971 	bl	1a0006b8 <_sbrk_r>
1a0043d6:	1c43      	adds	r3, r0, #1
1a0043d8:	d123      	bne.n	1a004422 <_malloc_r+0x92>
1a0043da:	230c      	movs	r3, #12
1a0043dc:	6033      	str	r3, [r6, #0]
1a0043de:	4630      	mov	r0, r6
1a0043e0:	f000 fd6c 	bl	1a004ebc <__malloc_unlock>
1a0043e4:	e7e3      	b.n	1a0043ae <_malloc_r+0x1e>
1a0043e6:	6823      	ldr	r3, [r4, #0]
1a0043e8:	1b5b      	subs	r3, r3, r5
1a0043ea:	d417      	bmi.n	1a00441c <_malloc_r+0x8c>
1a0043ec:	2b0b      	cmp	r3, #11
1a0043ee:	d903      	bls.n	1a0043f8 <_malloc_r+0x68>
1a0043f0:	6023      	str	r3, [r4, #0]
1a0043f2:	441c      	add	r4, r3
1a0043f4:	6025      	str	r5, [r4, #0]
1a0043f6:	e004      	b.n	1a004402 <_malloc_r+0x72>
1a0043f8:	6863      	ldr	r3, [r4, #4]
1a0043fa:	42a2      	cmp	r2, r4
1a0043fc:	bf0c      	ite	eq
1a0043fe:	600b      	streq	r3, [r1, #0]
1a004400:	6053      	strne	r3, [r2, #4]
1a004402:	4630      	mov	r0, r6
1a004404:	f000 fd5a 	bl	1a004ebc <__malloc_unlock>
1a004408:	f104 000b 	add.w	r0, r4, #11
1a00440c:	1d23      	adds	r3, r4, #4
1a00440e:	f020 0007 	bic.w	r0, r0, #7
1a004412:	1ac2      	subs	r2, r0, r3
1a004414:	d0cc      	beq.n	1a0043b0 <_malloc_r+0x20>
1a004416:	1a1b      	subs	r3, r3, r0
1a004418:	50a3      	str	r3, [r4, r2]
1a00441a:	e7c9      	b.n	1a0043b0 <_malloc_r+0x20>
1a00441c:	4622      	mov	r2, r4
1a00441e:	6864      	ldr	r4, [r4, #4]
1a004420:	e7cc      	b.n	1a0043bc <_malloc_r+0x2c>
1a004422:	1cc4      	adds	r4, r0, #3
1a004424:	f024 0403 	bic.w	r4, r4, #3
1a004428:	42a0      	cmp	r0, r4
1a00442a:	d0e3      	beq.n	1a0043f4 <_malloc_r+0x64>
1a00442c:	1a21      	subs	r1, r4, r0
1a00442e:	4630      	mov	r0, r6
1a004430:	f7fc f942 	bl	1a0006b8 <_sbrk_r>
1a004434:	3001      	adds	r0, #1
1a004436:	d1dd      	bne.n	1a0043f4 <_malloc_r+0x64>
1a004438:	e7cf      	b.n	1a0043da <_malloc_r+0x4a>
1a00443a:	bf00      	nop
1a00443c:	10002234 	.word	0x10002234
1a004440:	10002238 	.word	0x10002238

1a004444 <__sfputc_r>:
1a004444:	6893      	ldr	r3, [r2, #8]
1a004446:	3b01      	subs	r3, #1
1a004448:	2b00      	cmp	r3, #0
1a00444a:	b410      	push	{r4}
1a00444c:	6093      	str	r3, [r2, #8]
1a00444e:	da08      	bge.n	1a004462 <__sfputc_r+0x1e>
1a004450:	6994      	ldr	r4, [r2, #24]
1a004452:	42a3      	cmp	r3, r4
1a004454:	db01      	blt.n	1a00445a <__sfputc_r+0x16>
1a004456:	290a      	cmp	r1, #10
1a004458:	d103      	bne.n	1a004462 <__sfputc_r+0x1e>
1a00445a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00445e:	f000 bbb1 	b.w	1a004bc4 <__swbuf_r>
1a004462:	6813      	ldr	r3, [r2, #0]
1a004464:	1c58      	adds	r0, r3, #1
1a004466:	6010      	str	r0, [r2, #0]
1a004468:	7019      	strb	r1, [r3, #0]
1a00446a:	4608      	mov	r0, r1
1a00446c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004470:	4770      	bx	lr

1a004472 <__sfputs_r>:
1a004472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004474:	4606      	mov	r6, r0
1a004476:	460f      	mov	r7, r1
1a004478:	4614      	mov	r4, r2
1a00447a:	18d5      	adds	r5, r2, r3
1a00447c:	42ac      	cmp	r4, r5
1a00447e:	d101      	bne.n	1a004484 <__sfputs_r+0x12>
1a004480:	2000      	movs	r0, #0
1a004482:	e007      	b.n	1a004494 <__sfputs_r+0x22>
1a004484:	463a      	mov	r2, r7
1a004486:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00448a:	4630      	mov	r0, r6
1a00448c:	f7ff ffda 	bl	1a004444 <__sfputc_r>
1a004490:	1c43      	adds	r3, r0, #1
1a004492:	d1f3      	bne.n	1a00447c <__sfputs_r+0xa>
1a004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004496:	Address 0x1a004496 is out of bounds.


1a004498 <_vfiprintf_r>:
1a004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00449c:	460d      	mov	r5, r1
1a00449e:	b09d      	sub	sp, #116	; 0x74
1a0044a0:	4614      	mov	r4, r2
1a0044a2:	461e      	mov	r6, r3
1a0044a4:	4607      	mov	r7, r0
1a0044a6:	b118      	cbz	r0, 1a0044b0 <_vfiprintf_r+0x18>
1a0044a8:	6983      	ldr	r3, [r0, #24]
1a0044aa:	b90b      	cbnz	r3, 1a0044b0 <_vfiprintf_r+0x18>
1a0044ac:	f7ff fe48 	bl	1a004140 <__sinit>
1a0044b0:	4b85      	ldr	r3, [pc, #532]	; (1a0046c8 <_vfiprintf_r+0x230>)
1a0044b2:	429d      	cmp	r5, r3
1a0044b4:	d11b      	bne.n	1a0044ee <_vfiprintf_r+0x56>
1a0044b6:	687d      	ldr	r5, [r7, #4]
1a0044b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0044ba:	07d9      	lsls	r1, r3, #31
1a0044bc:	d405      	bmi.n	1a0044ca <_vfiprintf_r+0x32>
1a0044be:	89ab      	ldrh	r3, [r5, #12]
1a0044c0:	059a      	lsls	r2, r3, #22
1a0044c2:	d402      	bmi.n	1a0044ca <_vfiprintf_r+0x32>
1a0044c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0044c6:	f7ff fefc 	bl	1a0042c2 <__retarget_lock_acquire_recursive>
1a0044ca:	89ab      	ldrh	r3, [r5, #12]
1a0044cc:	071b      	lsls	r3, r3, #28
1a0044ce:	d501      	bpl.n	1a0044d4 <_vfiprintf_r+0x3c>
1a0044d0:	692b      	ldr	r3, [r5, #16]
1a0044d2:	b9eb      	cbnz	r3, 1a004510 <_vfiprintf_r+0x78>
1a0044d4:	4629      	mov	r1, r5
1a0044d6:	4638      	mov	r0, r7
1a0044d8:	f000 fbc6 	bl	1a004c68 <__swsetup_r>
1a0044dc:	b1c0      	cbz	r0, 1a004510 <_vfiprintf_r+0x78>
1a0044de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0044e0:	07d8      	lsls	r0, r3, #31
1a0044e2:	d50e      	bpl.n	1a004502 <_vfiprintf_r+0x6a>
1a0044e4:	f04f 30ff 	mov.w	r0, #4294967295
1a0044e8:	b01d      	add	sp, #116	; 0x74
1a0044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0044ee:	4b77      	ldr	r3, [pc, #476]	; (1a0046cc <_vfiprintf_r+0x234>)
1a0044f0:	429d      	cmp	r5, r3
1a0044f2:	d101      	bne.n	1a0044f8 <_vfiprintf_r+0x60>
1a0044f4:	68bd      	ldr	r5, [r7, #8]
1a0044f6:	e7df      	b.n	1a0044b8 <_vfiprintf_r+0x20>
1a0044f8:	4b75      	ldr	r3, [pc, #468]	; (1a0046d0 <_vfiprintf_r+0x238>)
1a0044fa:	429d      	cmp	r5, r3
1a0044fc:	bf08      	it	eq
1a0044fe:	68fd      	ldreq	r5, [r7, #12]
1a004500:	e7da      	b.n	1a0044b8 <_vfiprintf_r+0x20>
1a004502:	89ab      	ldrh	r3, [r5, #12]
1a004504:	0599      	lsls	r1, r3, #22
1a004506:	d4ed      	bmi.n	1a0044e4 <_vfiprintf_r+0x4c>
1a004508:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00450a:	f7ff fedb 	bl	1a0042c4 <__retarget_lock_release_recursive>
1a00450e:	e7e9      	b.n	1a0044e4 <_vfiprintf_r+0x4c>
1a004510:	2300      	movs	r3, #0
1a004512:	9309      	str	r3, [sp, #36]	; 0x24
1a004514:	2320      	movs	r3, #32
1a004516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00451a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a0046d4 <_vfiprintf_r+0x23c>
1a00451e:	9603      	str	r6, [sp, #12]
1a004520:	2330      	movs	r3, #48	; 0x30
1a004522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004526:	f04f 0a01 	mov.w	sl, #1
1a00452a:	4623      	mov	r3, r4
1a00452c:	461e      	mov	r6, r3
1a00452e:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004532:	b10a      	cbz	r2, 1a004538 <_vfiprintf_r+0xa0>
1a004534:	2a25      	cmp	r2, #37	; 0x25
1a004536:	d1f9      	bne.n	1a00452c <_vfiprintf_r+0x94>
1a004538:	ebb6 0b04 	subs.w	fp, r6, r4
1a00453c:	d00b      	beq.n	1a004556 <_vfiprintf_r+0xbe>
1a00453e:	465b      	mov	r3, fp
1a004540:	4622      	mov	r2, r4
1a004542:	4629      	mov	r1, r5
1a004544:	4638      	mov	r0, r7
1a004546:	f7ff ff94 	bl	1a004472 <__sfputs_r>
1a00454a:	3001      	adds	r0, #1
1a00454c:	f000 80a3 	beq.w	1a004696 <_vfiprintf_r+0x1fe>
1a004550:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004552:	445b      	add	r3, fp
1a004554:	9309      	str	r3, [sp, #36]	; 0x24
1a004556:	7833      	ldrb	r3, [r6, #0]
1a004558:	2b00      	cmp	r3, #0
1a00455a:	f000 809c 	beq.w	1a004696 <_vfiprintf_r+0x1fe>
1a00455e:	2300      	movs	r3, #0
1a004560:	f04f 32ff 	mov.w	r2, #4294967295
1a004564:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004568:	3601      	adds	r6, #1
1a00456a:	9304      	str	r3, [sp, #16]
1a00456c:	9307      	str	r3, [sp, #28]
1a00456e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004572:	931a      	str	r3, [sp, #104]	; 0x68
1a004574:	4634      	mov	r4, r6
1a004576:	2205      	movs	r2, #5
1a004578:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00457c:	4855      	ldr	r0, [pc, #340]	; (1a0046d4 <_vfiprintf_r+0x23c>)
1a00457e:	f000 fc47 	bl	1a004e10 <memchr>
1a004582:	9b04      	ldr	r3, [sp, #16]
1a004584:	b9c0      	cbnz	r0, 1a0045b8 <_vfiprintf_r+0x120>
1a004586:	06da      	lsls	r2, r3, #27
1a004588:	bf44      	itt	mi
1a00458a:	2220      	movmi	r2, #32
1a00458c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004590:	0718      	lsls	r0, r3, #28
1a004592:	bf44      	itt	mi
1a004594:	222b      	movmi	r2, #43	; 0x2b
1a004596:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00459a:	7832      	ldrb	r2, [r6, #0]
1a00459c:	2a2a      	cmp	r2, #42	; 0x2a
1a00459e:	d013      	beq.n	1a0045c8 <_vfiprintf_r+0x130>
1a0045a0:	9a07      	ldr	r2, [sp, #28]
1a0045a2:	4634      	mov	r4, r6
1a0045a4:	2000      	movs	r0, #0
1a0045a6:	260a      	movs	r6, #10
1a0045a8:	4621      	mov	r1, r4
1a0045aa:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0045ae:	3b30      	subs	r3, #48	; 0x30
1a0045b0:	2b09      	cmp	r3, #9
1a0045b2:	d94b      	bls.n	1a00464c <_vfiprintf_r+0x1b4>
1a0045b4:	b970      	cbnz	r0, 1a0045d4 <_vfiprintf_r+0x13c>
1a0045b6:	e014      	b.n	1a0045e2 <_vfiprintf_r+0x14a>
1a0045b8:	eba0 0009 	sub.w	r0, r0, r9
1a0045bc:	fa0a f000 	lsl.w	r0, sl, r0
1a0045c0:	4318      	orrs	r0, r3
1a0045c2:	9004      	str	r0, [sp, #16]
1a0045c4:	4626      	mov	r6, r4
1a0045c6:	e7d5      	b.n	1a004574 <_vfiprintf_r+0xdc>
1a0045c8:	9a03      	ldr	r2, [sp, #12]
1a0045ca:	1d11      	adds	r1, r2, #4
1a0045cc:	6812      	ldr	r2, [r2, #0]
1a0045ce:	9103      	str	r1, [sp, #12]
1a0045d0:	2a00      	cmp	r2, #0
1a0045d2:	db01      	blt.n	1a0045d8 <_vfiprintf_r+0x140>
1a0045d4:	9207      	str	r2, [sp, #28]
1a0045d6:	e004      	b.n	1a0045e2 <_vfiprintf_r+0x14a>
1a0045d8:	4252      	negs	r2, r2
1a0045da:	f043 0302 	orr.w	r3, r3, #2
1a0045de:	9207      	str	r2, [sp, #28]
1a0045e0:	9304      	str	r3, [sp, #16]
1a0045e2:	7823      	ldrb	r3, [r4, #0]
1a0045e4:	2b2e      	cmp	r3, #46	; 0x2e
1a0045e6:	d10c      	bne.n	1a004602 <_vfiprintf_r+0x16a>
1a0045e8:	7863      	ldrb	r3, [r4, #1]
1a0045ea:	2b2a      	cmp	r3, #42	; 0x2a
1a0045ec:	d133      	bne.n	1a004656 <_vfiprintf_r+0x1be>
1a0045ee:	9b03      	ldr	r3, [sp, #12]
1a0045f0:	1d1a      	adds	r2, r3, #4
1a0045f2:	681b      	ldr	r3, [r3, #0]
1a0045f4:	9203      	str	r2, [sp, #12]
1a0045f6:	2b00      	cmp	r3, #0
1a0045f8:	bfb8      	it	lt
1a0045fa:	f04f 33ff 	movlt.w	r3, #4294967295
1a0045fe:	3402      	adds	r4, #2
1a004600:	9305      	str	r3, [sp, #20]
1a004602:	4e35      	ldr	r6, [pc, #212]	; (1a0046d8 <_vfiprintf_r+0x240>)
1a004604:	7821      	ldrb	r1, [r4, #0]
1a004606:	2203      	movs	r2, #3
1a004608:	4630      	mov	r0, r6
1a00460a:	f000 fc01 	bl	1a004e10 <memchr>
1a00460e:	b138      	cbz	r0, 1a004620 <_vfiprintf_r+0x188>
1a004610:	2340      	movs	r3, #64	; 0x40
1a004612:	1b80      	subs	r0, r0, r6
1a004614:	fa03 f000 	lsl.w	r0, r3, r0
1a004618:	9b04      	ldr	r3, [sp, #16]
1a00461a:	4303      	orrs	r3, r0
1a00461c:	3401      	adds	r4, #1
1a00461e:	9304      	str	r3, [sp, #16]
1a004620:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004624:	482d      	ldr	r0, [pc, #180]	; (1a0046dc <_vfiprintf_r+0x244>)
1a004626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00462a:	2206      	movs	r2, #6
1a00462c:	f000 fbf0 	bl	1a004e10 <memchr>
1a004630:	2800      	cmp	r0, #0
1a004632:	d03f      	beq.n	1a0046b4 <_vfiprintf_r+0x21c>
1a004634:	4b2a      	ldr	r3, [pc, #168]	; (1a0046e0 <_vfiprintf_r+0x248>)
1a004636:	bb13      	cbnz	r3, 1a00467e <_vfiprintf_r+0x1e6>
1a004638:	9b03      	ldr	r3, [sp, #12]
1a00463a:	3307      	adds	r3, #7
1a00463c:	f023 0307 	bic.w	r3, r3, #7
1a004640:	3308      	adds	r3, #8
1a004642:	9303      	str	r3, [sp, #12]
1a004644:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004646:	4443      	add	r3, r8
1a004648:	9309      	str	r3, [sp, #36]	; 0x24
1a00464a:	e76e      	b.n	1a00452a <_vfiprintf_r+0x92>
1a00464c:	fb06 3202 	mla	r2, r6, r2, r3
1a004650:	2001      	movs	r0, #1
1a004652:	460c      	mov	r4, r1
1a004654:	e7a8      	b.n	1a0045a8 <_vfiprintf_r+0x110>
1a004656:	2300      	movs	r3, #0
1a004658:	3401      	adds	r4, #1
1a00465a:	9305      	str	r3, [sp, #20]
1a00465c:	4619      	mov	r1, r3
1a00465e:	260a      	movs	r6, #10
1a004660:	4620      	mov	r0, r4
1a004662:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004666:	3a30      	subs	r2, #48	; 0x30
1a004668:	2a09      	cmp	r2, #9
1a00466a:	d903      	bls.n	1a004674 <_vfiprintf_r+0x1dc>
1a00466c:	2b00      	cmp	r3, #0
1a00466e:	d0c8      	beq.n	1a004602 <_vfiprintf_r+0x16a>
1a004670:	9105      	str	r1, [sp, #20]
1a004672:	e7c6      	b.n	1a004602 <_vfiprintf_r+0x16a>
1a004674:	fb06 2101 	mla	r1, r6, r1, r2
1a004678:	2301      	movs	r3, #1
1a00467a:	4604      	mov	r4, r0
1a00467c:	e7f0      	b.n	1a004660 <_vfiprintf_r+0x1c8>
1a00467e:	ab03      	add	r3, sp, #12
1a004680:	9300      	str	r3, [sp, #0]
1a004682:	462a      	mov	r2, r5
1a004684:	4b17      	ldr	r3, [pc, #92]	; (1a0046e4 <_vfiprintf_r+0x24c>)
1a004686:	a904      	add	r1, sp, #16
1a004688:	4638      	mov	r0, r7
1a00468a:	f3af 8000 	nop.w
1a00468e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a004692:	4680      	mov	r8, r0
1a004694:	d1d6      	bne.n	1a004644 <_vfiprintf_r+0x1ac>
1a004696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004698:	07d9      	lsls	r1, r3, #31
1a00469a:	d405      	bmi.n	1a0046a8 <_vfiprintf_r+0x210>
1a00469c:	89ab      	ldrh	r3, [r5, #12]
1a00469e:	059a      	lsls	r2, r3, #22
1a0046a0:	d402      	bmi.n	1a0046a8 <_vfiprintf_r+0x210>
1a0046a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0046a4:	f7ff fe0e 	bl	1a0042c4 <__retarget_lock_release_recursive>
1a0046a8:	89ab      	ldrh	r3, [r5, #12]
1a0046aa:	065b      	lsls	r3, r3, #25
1a0046ac:	f53f af1a 	bmi.w	1a0044e4 <_vfiprintf_r+0x4c>
1a0046b0:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0046b2:	e719      	b.n	1a0044e8 <_vfiprintf_r+0x50>
1a0046b4:	ab03      	add	r3, sp, #12
1a0046b6:	9300      	str	r3, [sp, #0]
1a0046b8:	462a      	mov	r2, r5
1a0046ba:	4b0a      	ldr	r3, [pc, #40]	; (1a0046e4 <_vfiprintf_r+0x24c>)
1a0046bc:	a904      	add	r1, sp, #16
1a0046be:	4638      	mov	r0, r7
1a0046c0:	f000 f888 	bl	1a0047d4 <_printf_i>
1a0046c4:	e7e3      	b.n	1a00468e <_vfiprintf_r+0x1f6>
1a0046c6:	bf00      	nop
1a0046c8:	1a005294 	.word	0x1a005294
1a0046cc:	1a0052b4 	.word	0x1a0052b4
1a0046d0:	1a005274 	.word	0x1a005274
1a0046d4:	1a0052d8 	.word	0x1a0052d8
1a0046d8:	1a0052de 	.word	0x1a0052de
1a0046dc:	1a0052e2 	.word	0x1a0052e2
1a0046e0:	00000000 	.word	0x00000000
1a0046e4:	1a004473 	.word	0x1a004473

1a0046e8 <_printf_common>:
1a0046e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0046ec:	4691      	mov	r9, r2
1a0046ee:	461f      	mov	r7, r3
1a0046f0:	688a      	ldr	r2, [r1, #8]
1a0046f2:	690b      	ldr	r3, [r1, #16]
1a0046f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0046f8:	4293      	cmp	r3, r2
1a0046fa:	bfb8      	it	lt
1a0046fc:	4613      	movlt	r3, r2
1a0046fe:	f8c9 3000 	str.w	r3, [r9]
1a004702:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004706:	4606      	mov	r6, r0
1a004708:	460c      	mov	r4, r1
1a00470a:	b112      	cbz	r2, 1a004712 <_printf_common+0x2a>
1a00470c:	3301      	adds	r3, #1
1a00470e:	f8c9 3000 	str.w	r3, [r9]
1a004712:	6823      	ldr	r3, [r4, #0]
1a004714:	0699      	lsls	r1, r3, #26
1a004716:	bf42      	ittt	mi
1a004718:	f8d9 3000 	ldrmi.w	r3, [r9]
1a00471c:	3302      	addmi	r3, #2
1a00471e:	f8c9 3000 	strmi.w	r3, [r9]
1a004722:	6825      	ldr	r5, [r4, #0]
1a004724:	f015 0506 	ands.w	r5, r5, #6
1a004728:	d107      	bne.n	1a00473a <_printf_common+0x52>
1a00472a:	f104 0a19 	add.w	sl, r4, #25
1a00472e:	68e3      	ldr	r3, [r4, #12]
1a004730:	f8d9 2000 	ldr.w	r2, [r9]
1a004734:	1a9b      	subs	r3, r3, r2
1a004736:	42ab      	cmp	r3, r5
1a004738:	dc28      	bgt.n	1a00478c <_printf_common+0xa4>
1a00473a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00473e:	6822      	ldr	r2, [r4, #0]
1a004740:	3300      	adds	r3, #0
1a004742:	bf18      	it	ne
1a004744:	2301      	movne	r3, #1
1a004746:	0692      	lsls	r2, r2, #26
1a004748:	d42d      	bmi.n	1a0047a6 <_printf_common+0xbe>
1a00474a:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00474e:	4639      	mov	r1, r7
1a004750:	4630      	mov	r0, r6
1a004752:	47c0      	blx	r8
1a004754:	3001      	adds	r0, #1
1a004756:	d020      	beq.n	1a00479a <_printf_common+0xb2>
1a004758:	6823      	ldr	r3, [r4, #0]
1a00475a:	68e5      	ldr	r5, [r4, #12]
1a00475c:	f8d9 2000 	ldr.w	r2, [r9]
1a004760:	f003 0306 	and.w	r3, r3, #6
1a004764:	2b04      	cmp	r3, #4
1a004766:	bf08      	it	eq
1a004768:	1aad      	subeq	r5, r5, r2
1a00476a:	68a3      	ldr	r3, [r4, #8]
1a00476c:	6922      	ldr	r2, [r4, #16]
1a00476e:	bf0c      	ite	eq
1a004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004774:	2500      	movne	r5, #0
1a004776:	4293      	cmp	r3, r2
1a004778:	bfc4      	itt	gt
1a00477a:	1a9b      	subgt	r3, r3, r2
1a00477c:	18ed      	addgt	r5, r5, r3
1a00477e:	f04f 0900 	mov.w	r9, #0
1a004782:	341a      	adds	r4, #26
1a004784:	454d      	cmp	r5, r9
1a004786:	d11a      	bne.n	1a0047be <_printf_common+0xd6>
1a004788:	2000      	movs	r0, #0
1a00478a:	e008      	b.n	1a00479e <_printf_common+0xb6>
1a00478c:	2301      	movs	r3, #1
1a00478e:	4652      	mov	r2, sl
1a004790:	4639      	mov	r1, r7
1a004792:	4630      	mov	r0, r6
1a004794:	47c0      	blx	r8
1a004796:	3001      	adds	r0, #1
1a004798:	d103      	bne.n	1a0047a2 <_printf_common+0xba>
1a00479a:	f04f 30ff 	mov.w	r0, #4294967295
1a00479e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0047a2:	3501      	adds	r5, #1
1a0047a4:	e7c3      	b.n	1a00472e <_printf_common+0x46>
1a0047a6:	18e1      	adds	r1, r4, r3
1a0047a8:	1c5a      	adds	r2, r3, #1
1a0047aa:	2030      	movs	r0, #48	; 0x30
1a0047ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0047b0:	4422      	add	r2, r4
1a0047b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0047b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0047ba:	3302      	adds	r3, #2
1a0047bc:	e7c5      	b.n	1a00474a <_printf_common+0x62>
1a0047be:	2301      	movs	r3, #1
1a0047c0:	4622      	mov	r2, r4
1a0047c2:	4639      	mov	r1, r7
1a0047c4:	4630      	mov	r0, r6
1a0047c6:	47c0      	blx	r8
1a0047c8:	3001      	adds	r0, #1
1a0047ca:	d0e6      	beq.n	1a00479a <_printf_common+0xb2>
1a0047cc:	f109 0901 	add.w	r9, r9, #1
1a0047d0:	e7d8      	b.n	1a004784 <_printf_common+0x9c>
1a0047d2:	Address 0x1a0047d2 is out of bounds.


1a0047d4 <_printf_i>:
1a0047d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0047d8:	4606      	mov	r6, r0
1a0047da:	460c      	mov	r4, r1
1a0047dc:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a0047e0:	7e09      	ldrb	r1, [r1, #24]
1a0047e2:	b085      	sub	sp, #20
1a0047e4:	296e      	cmp	r1, #110	; 0x6e
1a0047e6:	4698      	mov	r8, r3
1a0047e8:	4617      	mov	r7, r2
1a0047ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0047ec:	f000 80ba 	beq.w	1a004964 <_printf_i+0x190>
1a0047f0:	d824      	bhi.n	1a00483c <_printf_i+0x68>
1a0047f2:	2963      	cmp	r1, #99	; 0x63
1a0047f4:	d039      	beq.n	1a00486a <_printf_i+0x96>
1a0047f6:	d80a      	bhi.n	1a00480e <_printf_i+0x3a>
1a0047f8:	2900      	cmp	r1, #0
1a0047fa:	f000 80c3 	beq.w	1a004984 <_printf_i+0x1b0>
1a0047fe:	2958      	cmp	r1, #88	; 0x58
1a004800:	f000 8091 	beq.w	1a004926 <_printf_i+0x152>
1a004804:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004808:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00480c:	e035      	b.n	1a00487a <_printf_i+0xa6>
1a00480e:	2964      	cmp	r1, #100	; 0x64
1a004810:	d001      	beq.n	1a004816 <_printf_i+0x42>
1a004812:	2969      	cmp	r1, #105	; 0x69
1a004814:	d1f6      	bne.n	1a004804 <_printf_i+0x30>
1a004816:	6825      	ldr	r5, [r4, #0]
1a004818:	681a      	ldr	r2, [r3, #0]
1a00481a:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00481e:	f102 0104 	add.w	r1, r2, #4
1a004822:	d02c      	beq.n	1a00487e <_printf_i+0xaa>
1a004824:	6812      	ldr	r2, [r2, #0]
1a004826:	6019      	str	r1, [r3, #0]
1a004828:	2a00      	cmp	r2, #0
1a00482a:	da03      	bge.n	1a004834 <_printf_i+0x60>
1a00482c:	232d      	movs	r3, #45	; 0x2d
1a00482e:	4252      	negs	r2, r2
1a004830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004834:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0049f4 <_printf_i+0x220>
1a004838:	230a      	movs	r3, #10
1a00483a:	e03f      	b.n	1a0048bc <_printf_i+0xe8>
1a00483c:	2973      	cmp	r1, #115	; 0x73
1a00483e:	f000 80a5 	beq.w	1a00498c <_printf_i+0x1b8>
1a004842:	d808      	bhi.n	1a004856 <_printf_i+0x82>
1a004844:	296f      	cmp	r1, #111	; 0x6f
1a004846:	d021      	beq.n	1a00488c <_printf_i+0xb8>
1a004848:	2970      	cmp	r1, #112	; 0x70
1a00484a:	d1db      	bne.n	1a004804 <_printf_i+0x30>
1a00484c:	6822      	ldr	r2, [r4, #0]
1a00484e:	f042 0220 	orr.w	r2, r2, #32
1a004852:	6022      	str	r2, [r4, #0]
1a004854:	e003      	b.n	1a00485e <_printf_i+0x8a>
1a004856:	2975      	cmp	r1, #117	; 0x75
1a004858:	d018      	beq.n	1a00488c <_printf_i+0xb8>
1a00485a:	2978      	cmp	r1, #120	; 0x78
1a00485c:	d1d2      	bne.n	1a004804 <_printf_i+0x30>
1a00485e:	2278      	movs	r2, #120	; 0x78
1a004860:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a004864:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0049f8 <_printf_i+0x224>
1a004868:	e061      	b.n	1a00492e <_printf_i+0x15a>
1a00486a:	681a      	ldr	r2, [r3, #0]
1a00486c:	1d11      	adds	r1, r2, #4
1a00486e:	6019      	str	r1, [r3, #0]
1a004870:	6813      	ldr	r3, [r2, #0]
1a004872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004876:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00487a:	2301      	movs	r3, #1
1a00487c:	e093      	b.n	1a0049a6 <_printf_i+0x1d2>
1a00487e:	6812      	ldr	r2, [r2, #0]
1a004880:	6019      	str	r1, [r3, #0]
1a004882:	f015 0f40 	tst.w	r5, #64	; 0x40
1a004886:	bf18      	it	ne
1a004888:	b212      	sxthne	r2, r2
1a00488a:	e7cd      	b.n	1a004828 <_printf_i+0x54>
1a00488c:	f8d4 c000 	ldr.w	ip, [r4]
1a004890:	681a      	ldr	r2, [r3, #0]
1a004892:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a004896:	f102 0504 	add.w	r5, r2, #4
1a00489a:	601d      	str	r5, [r3, #0]
1a00489c:	d001      	beq.n	1a0048a2 <_printf_i+0xce>
1a00489e:	6812      	ldr	r2, [r2, #0]
1a0048a0:	e003      	b.n	1a0048aa <_printf_i+0xd6>
1a0048a2:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0048a6:	d0fa      	beq.n	1a00489e <_printf_i+0xca>
1a0048a8:	8812      	ldrh	r2, [r2, #0]
1a0048aa:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0049f4 <_printf_i+0x220>
1a0048ae:	296f      	cmp	r1, #111	; 0x6f
1a0048b0:	bf0c      	ite	eq
1a0048b2:	2308      	moveq	r3, #8
1a0048b4:	230a      	movne	r3, #10
1a0048b6:	2100      	movs	r1, #0
1a0048b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0048bc:	6865      	ldr	r5, [r4, #4]
1a0048be:	60a5      	str	r5, [r4, #8]
1a0048c0:	2d00      	cmp	r5, #0
1a0048c2:	bfa2      	ittt	ge
1a0048c4:	6821      	ldrge	r1, [r4, #0]
1a0048c6:	f021 0104 	bicge.w	r1, r1, #4
1a0048ca:	6021      	strge	r1, [r4, #0]
1a0048cc:	b90a      	cbnz	r2, 1a0048d2 <_printf_i+0xfe>
1a0048ce:	2d00      	cmp	r5, #0
1a0048d0:	d046      	beq.n	1a004960 <_printf_i+0x18c>
1a0048d2:	4605      	mov	r5, r0
1a0048d4:	fbb2 f1f3 	udiv	r1, r2, r3
1a0048d8:	fb03 2e11 	mls	lr, r3, r1, r2
1a0048dc:	4293      	cmp	r3, r2
1a0048de:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a0048e2:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a0048e6:	d939      	bls.n	1a00495c <_printf_i+0x188>
1a0048e8:	2b08      	cmp	r3, #8
1a0048ea:	d10b      	bne.n	1a004904 <_printf_i+0x130>
1a0048ec:	6823      	ldr	r3, [r4, #0]
1a0048ee:	07da      	lsls	r2, r3, #31
1a0048f0:	d508      	bpl.n	1a004904 <_printf_i+0x130>
1a0048f2:	6923      	ldr	r3, [r4, #16]
1a0048f4:	6862      	ldr	r2, [r4, #4]
1a0048f6:	429a      	cmp	r2, r3
1a0048f8:	bfde      	ittt	le
1a0048fa:	2330      	movle	r3, #48	; 0x30
1a0048fc:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004900:	f105 35ff 	addle.w	r5, r5, #4294967295
1a004904:	1b40      	subs	r0, r0, r5
1a004906:	6120      	str	r0, [r4, #16]
1a004908:	f8cd 8000 	str.w	r8, [sp]
1a00490c:	463b      	mov	r3, r7
1a00490e:	aa03      	add	r2, sp, #12
1a004910:	4621      	mov	r1, r4
1a004912:	4630      	mov	r0, r6
1a004914:	f7ff fee8 	bl	1a0046e8 <_printf_common>
1a004918:	3001      	adds	r0, #1
1a00491a:	d149      	bne.n	1a0049b0 <_printf_i+0x1dc>
1a00491c:	f04f 30ff 	mov.w	r0, #4294967295
1a004920:	b005      	add	sp, #20
1a004922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004926:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0049f4 <_printf_i+0x220>
1a00492a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00492e:	681d      	ldr	r5, [r3, #0]
1a004930:	6821      	ldr	r1, [r4, #0]
1a004932:	f855 2b04 	ldr.w	r2, [r5], #4
1a004936:	601d      	str	r5, [r3, #0]
1a004938:	060d      	lsls	r5, r1, #24
1a00493a:	d50b      	bpl.n	1a004954 <_printf_i+0x180>
1a00493c:	07cd      	lsls	r5, r1, #31
1a00493e:	bf44      	itt	mi
1a004940:	f041 0120 	orrmi.w	r1, r1, #32
1a004944:	6021      	strmi	r1, [r4, #0]
1a004946:	b91a      	cbnz	r2, 1a004950 <_printf_i+0x17c>
1a004948:	6823      	ldr	r3, [r4, #0]
1a00494a:	f023 0320 	bic.w	r3, r3, #32
1a00494e:	6023      	str	r3, [r4, #0]
1a004950:	2310      	movs	r3, #16
1a004952:	e7b0      	b.n	1a0048b6 <_printf_i+0xe2>
1a004954:	064b      	lsls	r3, r1, #25
1a004956:	bf48      	it	mi
1a004958:	b292      	uxthmi	r2, r2
1a00495a:	e7ef      	b.n	1a00493c <_printf_i+0x168>
1a00495c:	460a      	mov	r2, r1
1a00495e:	e7b9      	b.n	1a0048d4 <_printf_i+0x100>
1a004960:	4605      	mov	r5, r0
1a004962:	e7c1      	b.n	1a0048e8 <_printf_i+0x114>
1a004964:	681a      	ldr	r2, [r3, #0]
1a004966:	f8d4 c000 	ldr.w	ip, [r4]
1a00496a:	6961      	ldr	r1, [r4, #20]
1a00496c:	1d15      	adds	r5, r2, #4
1a00496e:	601d      	str	r5, [r3, #0]
1a004970:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a004974:	6813      	ldr	r3, [r2, #0]
1a004976:	d001      	beq.n	1a00497c <_printf_i+0x1a8>
1a004978:	6019      	str	r1, [r3, #0]
1a00497a:	e003      	b.n	1a004984 <_printf_i+0x1b0>
1a00497c:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004980:	d0fa      	beq.n	1a004978 <_printf_i+0x1a4>
1a004982:	8019      	strh	r1, [r3, #0]
1a004984:	2300      	movs	r3, #0
1a004986:	6123      	str	r3, [r4, #16]
1a004988:	4605      	mov	r5, r0
1a00498a:	e7bd      	b.n	1a004908 <_printf_i+0x134>
1a00498c:	681a      	ldr	r2, [r3, #0]
1a00498e:	1d11      	adds	r1, r2, #4
1a004990:	6019      	str	r1, [r3, #0]
1a004992:	6815      	ldr	r5, [r2, #0]
1a004994:	6862      	ldr	r2, [r4, #4]
1a004996:	2100      	movs	r1, #0
1a004998:	4628      	mov	r0, r5
1a00499a:	f000 fa39 	bl	1a004e10 <memchr>
1a00499e:	b108      	cbz	r0, 1a0049a4 <_printf_i+0x1d0>
1a0049a0:	1b40      	subs	r0, r0, r5
1a0049a2:	6060      	str	r0, [r4, #4]
1a0049a4:	6863      	ldr	r3, [r4, #4]
1a0049a6:	6123      	str	r3, [r4, #16]
1a0049a8:	2300      	movs	r3, #0
1a0049aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0049ae:	e7ab      	b.n	1a004908 <_printf_i+0x134>
1a0049b0:	6923      	ldr	r3, [r4, #16]
1a0049b2:	462a      	mov	r2, r5
1a0049b4:	4639      	mov	r1, r7
1a0049b6:	4630      	mov	r0, r6
1a0049b8:	47c0      	blx	r8
1a0049ba:	3001      	adds	r0, #1
1a0049bc:	d0ae      	beq.n	1a00491c <_printf_i+0x148>
1a0049be:	6823      	ldr	r3, [r4, #0]
1a0049c0:	079b      	lsls	r3, r3, #30
1a0049c2:	d413      	bmi.n	1a0049ec <_printf_i+0x218>
1a0049c4:	68e0      	ldr	r0, [r4, #12]
1a0049c6:	9b03      	ldr	r3, [sp, #12]
1a0049c8:	4298      	cmp	r0, r3
1a0049ca:	bfb8      	it	lt
1a0049cc:	4618      	movlt	r0, r3
1a0049ce:	e7a7      	b.n	1a004920 <_printf_i+0x14c>
1a0049d0:	2301      	movs	r3, #1
1a0049d2:	464a      	mov	r2, r9
1a0049d4:	4639      	mov	r1, r7
1a0049d6:	4630      	mov	r0, r6
1a0049d8:	47c0      	blx	r8
1a0049da:	3001      	adds	r0, #1
1a0049dc:	d09e      	beq.n	1a00491c <_printf_i+0x148>
1a0049de:	3501      	adds	r5, #1
1a0049e0:	68e3      	ldr	r3, [r4, #12]
1a0049e2:	9a03      	ldr	r2, [sp, #12]
1a0049e4:	1a9b      	subs	r3, r3, r2
1a0049e6:	42ab      	cmp	r3, r5
1a0049e8:	dcf2      	bgt.n	1a0049d0 <_printf_i+0x1fc>
1a0049ea:	e7eb      	b.n	1a0049c4 <_printf_i+0x1f0>
1a0049ec:	2500      	movs	r5, #0
1a0049ee:	f104 0919 	add.w	r9, r4, #25
1a0049f2:	e7f5      	b.n	1a0049e0 <_printf_i+0x20c>
1a0049f4:	1a0052e9 	.word	0x1a0052e9
1a0049f8:	1a0052fa 	.word	0x1a0052fa

1a0049fc <iprintf>:
1a0049fc:	b40f      	push	{r0, r1, r2, r3}
1a0049fe:	4b0a      	ldr	r3, [pc, #40]	; (1a004a28 <iprintf+0x2c>)
1a004a00:	b513      	push	{r0, r1, r4, lr}
1a004a02:	681c      	ldr	r4, [r3, #0]
1a004a04:	b124      	cbz	r4, 1a004a10 <iprintf+0x14>
1a004a06:	69a3      	ldr	r3, [r4, #24]
1a004a08:	b913      	cbnz	r3, 1a004a10 <iprintf+0x14>
1a004a0a:	4620      	mov	r0, r4
1a004a0c:	f7ff fb98 	bl	1a004140 <__sinit>
1a004a10:	ab05      	add	r3, sp, #20
1a004a12:	9a04      	ldr	r2, [sp, #16]
1a004a14:	68a1      	ldr	r1, [r4, #8]
1a004a16:	9301      	str	r3, [sp, #4]
1a004a18:	4620      	mov	r0, r4
1a004a1a:	f7ff fd3d 	bl	1a004498 <_vfiprintf_r>
1a004a1e:	b002      	add	sp, #8
1a004a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004a24:	b004      	add	sp, #16
1a004a26:	4770      	bx	lr
1a004a28:	10000040 	.word	0x10000040

1a004a2c <_puts_r>:
1a004a2c:	b570      	push	{r4, r5, r6, lr}
1a004a2e:	460e      	mov	r6, r1
1a004a30:	4605      	mov	r5, r0
1a004a32:	b118      	cbz	r0, 1a004a3c <_puts_r+0x10>
1a004a34:	6983      	ldr	r3, [r0, #24]
1a004a36:	b90b      	cbnz	r3, 1a004a3c <_puts_r+0x10>
1a004a38:	f7ff fb82 	bl	1a004140 <__sinit>
1a004a3c:	69ab      	ldr	r3, [r5, #24]
1a004a3e:	68ac      	ldr	r4, [r5, #8]
1a004a40:	b913      	cbnz	r3, 1a004a48 <_puts_r+0x1c>
1a004a42:	4628      	mov	r0, r5
1a004a44:	f7ff fb7c 	bl	1a004140 <__sinit>
1a004a48:	4b2c      	ldr	r3, [pc, #176]	; (1a004afc <_puts_r+0xd0>)
1a004a4a:	429c      	cmp	r4, r3
1a004a4c:	d120      	bne.n	1a004a90 <_puts_r+0x64>
1a004a4e:	686c      	ldr	r4, [r5, #4]
1a004a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004a52:	07db      	lsls	r3, r3, #31
1a004a54:	d405      	bmi.n	1a004a62 <_puts_r+0x36>
1a004a56:	89a3      	ldrh	r3, [r4, #12]
1a004a58:	0598      	lsls	r0, r3, #22
1a004a5a:	d402      	bmi.n	1a004a62 <_puts_r+0x36>
1a004a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004a5e:	f7ff fc30 	bl	1a0042c2 <__retarget_lock_acquire_recursive>
1a004a62:	89a3      	ldrh	r3, [r4, #12]
1a004a64:	0719      	lsls	r1, r3, #28
1a004a66:	d51d      	bpl.n	1a004aa4 <_puts_r+0x78>
1a004a68:	6923      	ldr	r3, [r4, #16]
1a004a6a:	b1db      	cbz	r3, 1a004aa4 <_puts_r+0x78>
1a004a6c:	3e01      	subs	r6, #1
1a004a6e:	68a3      	ldr	r3, [r4, #8]
1a004a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a004a74:	3b01      	subs	r3, #1
1a004a76:	60a3      	str	r3, [r4, #8]
1a004a78:	bb39      	cbnz	r1, 1a004aca <_puts_r+0x9e>
1a004a7a:	2b00      	cmp	r3, #0
1a004a7c:	da38      	bge.n	1a004af0 <_puts_r+0xc4>
1a004a7e:	4622      	mov	r2, r4
1a004a80:	210a      	movs	r1, #10
1a004a82:	4628      	mov	r0, r5
1a004a84:	f000 f89e 	bl	1a004bc4 <__swbuf_r>
1a004a88:	3001      	adds	r0, #1
1a004a8a:	d011      	beq.n	1a004ab0 <_puts_r+0x84>
1a004a8c:	250a      	movs	r5, #10
1a004a8e:	e011      	b.n	1a004ab4 <_puts_r+0x88>
1a004a90:	4b1b      	ldr	r3, [pc, #108]	; (1a004b00 <_puts_r+0xd4>)
1a004a92:	429c      	cmp	r4, r3
1a004a94:	d101      	bne.n	1a004a9a <_puts_r+0x6e>
1a004a96:	68ac      	ldr	r4, [r5, #8]
1a004a98:	e7da      	b.n	1a004a50 <_puts_r+0x24>
1a004a9a:	4b1a      	ldr	r3, [pc, #104]	; (1a004b04 <_puts_r+0xd8>)
1a004a9c:	429c      	cmp	r4, r3
1a004a9e:	bf08      	it	eq
1a004aa0:	68ec      	ldreq	r4, [r5, #12]
1a004aa2:	e7d5      	b.n	1a004a50 <_puts_r+0x24>
1a004aa4:	4621      	mov	r1, r4
1a004aa6:	4628      	mov	r0, r5
1a004aa8:	f000 f8de 	bl	1a004c68 <__swsetup_r>
1a004aac:	2800      	cmp	r0, #0
1a004aae:	d0dd      	beq.n	1a004a6c <_puts_r+0x40>
1a004ab0:	f04f 35ff 	mov.w	r5, #4294967295
1a004ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004ab6:	07da      	lsls	r2, r3, #31
1a004ab8:	d405      	bmi.n	1a004ac6 <_puts_r+0x9a>
1a004aba:	89a3      	ldrh	r3, [r4, #12]
1a004abc:	059b      	lsls	r3, r3, #22
1a004abe:	d402      	bmi.n	1a004ac6 <_puts_r+0x9a>
1a004ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004ac2:	f7ff fbff 	bl	1a0042c4 <__retarget_lock_release_recursive>
1a004ac6:	4628      	mov	r0, r5
1a004ac8:	bd70      	pop	{r4, r5, r6, pc}
1a004aca:	2b00      	cmp	r3, #0
1a004acc:	da04      	bge.n	1a004ad8 <_puts_r+0xac>
1a004ace:	69a2      	ldr	r2, [r4, #24]
1a004ad0:	429a      	cmp	r2, r3
1a004ad2:	dc06      	bgt.n	1a004ae2 <_puts_r+0xb6>
1a004ad4:	290a      	cmp	r1, #10
1a004ad6:	d004      	beq.n	1a004ae2 <_puts_r+0xb6>
1a004ad8:	6823      	ldr	r3, [r4, #0]
1a004ada:	1c5a      	adds	r2, r3, #1
1a004adc:	6022      	str	r2, [r4, #0]
1a004ade:	7019      	strb	r1, [r3, #0]
1a004ae0:	e7c5      	b.n	1a004a6e <_puts_r+0x42>
1a004ae2:	4622      	mov	r2, r4
1a004ae4:	4628      	mov	r0, r5
1a004ae6:	f000 f86d 	bl	1a004bc4 <__swbuf_r>
1a004aea:	3001      	adds	r0, #1
1a004aec:	d1bf      	bne.n	1a004a6e <_puts_r+0x42>
1a004aee:	e7df      	b.n	1a004ab0 <_puts_r+0x84>
1a004af0:	6823      	ldr	r3, [r4, #0]
1a004af2:	250a      	movs	r5, #10
1a004af4:	1c5a      	adds	r2, r3, #1
1a004af6:	6022      	str	r2, [r4, #0]
1a004af8:	701d      	strb	r5, [r3, #0]
1a004afa:	e7db      	b.n	1a004ab4 <_puts_r+0x88>
1a004afc:	1a005294 	.word	0x1a005294
1a004b00:	1a0052b4 	.word	0x1a0052b4
1a004b04:	1a005274 	.word	0x1a005274

1a004b08 <puts>:
1a004b08:	4b02      	ldr	r3, [pc, #8]	; (1a004b14 <puts+0xc>)
1a004b0a:	4601      	mov	r1, r0
1a004b0c:	6818      	ldr	r0, [r3, #0]
1a004b0e:	f7ff bf8d 	b.w	1a004a2c <_puts_r>
1a004b12:	bf00      	nop
1a004b14:	10000040 	.word	0x10000040

1a004b18 <__sread>:
1a004b18:	b510      	push	{r4, lr}
1a004b1a:	460c      	mov	r4, r1
1a004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b20:	f7fb fd8e 	bl	1a000640 <_read_r>
1a004b24:	2800      	cmp	r0, #0
1a004b26:	bfab      	itete	ge
1a004b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004b2a:	89a3      	ldrhlt	r3, [r4, #12]
1a004b2c:	181b      	addge	r3, r3, r0
1a004b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004b32:	bfac      	ite	ge
1a004b34:	6563      	strge	r3, [r4, #84]	; 0x54
1a004b36:	81a3      	strhlt	r3, [r4, #12]
1a004b38:	bd10      	pop	{r4, pc}

1a004b3a <__swrite>:
1a004b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004b3e:	461f      	mov	r7, r3
1a004b40:	898b      	ldrh	r3, [r1, #12]
1a004b42:	05db      	lsls	r3, r3, #23
1a004b44:	4605      	mov	r5, r0
1a004b46:	460c      	mov	r4, r1
1a004b48:	4616      	mov	r6, r2
1a004b4a:	d505      	bpl.n	1a004b58 <__swrite+0x1e>
1a004b4c:	2302      	movs	r3, #2
1a004b4e:	2200      	movs	r2, #0
1a004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b54:	f7fb fd6f 	bl	1a000636 <_lseek_r>
1a004b58:	89a3      	ldrh	r3, [r4, #12]
1a004b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004b62:	81a3      	strh	r3, [r4, #12]
1a004b64:	4632      	mov	r2, r6
1a004b66:	463b      	mov	r3, r7
1a004b68:	4628      	mov	r0, r5
1a004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004b6e:	f7fb bd8e 	b.w	1a00068e <_write_r>

1a004b72 <__sseek>:
1a004b72:	b510      	push	{r4, lr}
1a004b74:	460c      	mov	r4, r1
1a004b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b7a:	f7fb fd5c 	bl	1a000636 <_lseek_r>
1a004b7e:	1c43      	adds	r3, r0, #1
1a004b80:	89a3      	ldrh	r3, [r4, #12]
1a004b82:	bf15      	itete	ne
1a004b84:	6560      	strne	r0, [r4, #84]	; 0x54
1a004b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004b8e:	81a3      	strheq	r3, [r4, #12]
1a004b90:	bf18      	it	ne
1a004b92:	81a3      	strhne	r3, [r4, #12]
1a004b94:	bd10      	pop	{r4, pc}

1a004b96 <__sclose>:
1a004b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b9a:	f7fb bd39 	b.w	1a000610 <_close_r>

1a004b9e <strncpy>:
1a004b9e:	b510      	push	{r4, lr}
1a004ba0:	3901      	subs	r1, #1
1a004ba2:	4603      	mov	r3, r0
1a004ba4:	b132      	cbz	r2, 1a004bb4 <strncpy+0x16>
1a004ba6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a004baa:	f803 4b01 	strb.w	r4, [r3], #1
1a004bae:	3a01      	subs	r2, #1
1a004bb0:	2c00      	cmp	r4, #0
1a004bb2:	d1f7      	bne.n	1a004ba4 <strncpy+0x6>
1a004bb4:	441a      	add	r2, r3
1a004bb6:	2100      	movs	r1, #0
1a004bb8:	4293      	cmp	r3, r2
1a004bba:	d100      	bne.n	1a004bbe <strncpy+0x20>
1a004bbc:	bd10      	pop	{r4, pc}
1a004bbe:	f803 1b01 	strb.w	r1, [r3], #1
1a004bc2:	e7f9      	b.n	1a004bb8 <strncpy+0x1a>

1a004bc4 <__swbuf_r>:
1a004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004bc6:	460e      	mov	r6, r1
1a004bc8:	4614      	mov	r4, r2
1a004bca:	4605      	mov	r5, r0
1a004bcc:	b118      	cbz	r0, 1a004bd6 <__swbuf_r+0x12>
1a004bce:	6983      	ldr	r3, [r0, #24]
1a004bd0:	b90b      	cbnz	r3, 1a004bd6 <__swbuf_r+0x12>
1a004bd2:	f7ff fab5 	bl	1a004140 <__sinit>
1a004bd6:	4b21      	ldr	r3, [pc, #132]	; (1a004c5c <__swbuf_r+0x98>)
1a004bd8:	429c      	cmp	r4, r3
1a004bda:	d12b      	bne.n	1a004c34 <__swbuf_r+0x70>
1a004bdc:	686c      	ldr	r4, [r5, #4]
1a004bde:	69a3      	ldr	r3, [r4, #24]
1a004be0:	60a3      	str	r3, [r4, #8]
1a004be2:	89a3      	ldrh	r3, [r4, #12]
1a004be4:	071a      	lsls	r2, r3, #28
1a004be6:	d52f      	bpl.n	1a004c48 <__swbuf_r+0x84>
1a004be8:	6923      	ldr	r3, [r4, #16]
1a004bea:	b36b      	cbz	r3, 1a004c48 <__swbuf_r+0x84>
1a004bec:	6923      	ldr	r3, [r4, #16]
1a004bee:	6820      	ldr	r0, [r4, #0]
1a004bf0:	1ac0      	subs	r0, r0, r3
1a004bf2:	6963      	ldr	r3, [r4, #20]
1a004bf4:	b2f6      	uxtb	r6, r6
1a004bf6:	4283      	cmp	r3, r0
1a004bf8:	4637      	mov	r7, r6
1a004bfa:	dc04      	bgt.n	1a004c06 <__swbuf_r+0x42>
1a004bfc:	4621      	mov	r1, r4
1a004bfe:	4628      	mov	r0, r5
1a004c00:	f7ff fa0a 	bl	1a004018 <_fflush_r>
1a004c04:	bb30      	cbnz	r0, 1a004c54 <__swbuf_r+0x90>
1a004c06:	68a3      	ldr	r3, [r4, #8]
1a004c08:	3b01      	subs	r3, #1
1a004c0a:	60a3      	str	r3, [r4, #8]
1a004c0c:	6823      	ldr	r3, [r4, #0]
1a004c0e:	1c5a      	adds	r2, r3, #1
1a004c10:	6022      	str	r2, [r4, #0]
1a004c12:	701e      	strb	r6, [r3, #0]
1a004c14:	6963      	ldr	r3, [r4, #20]
1a004c16:	3001      	adds	r0, #1
1a004c18:	4283      	cmp	r3, r0
1a004c1a:	d004      	beq.n	1a004c26 <__swbuf_r+0x62>
1a004c1c:	89a3      	ldrh	r3, [r4, #12]
1a004c1e:	07db      	lsls	r3, r3, #31
1a004c20:	d506      	bpl.n	1a004c30 <__swbuf_r+0x6c>
1a004c22:	2e0a      	cmp	r6, #10
1a004c24:	d104      	bne.n	1a004c30 <__swbuf_r+0x6c>
1a004c26:	4621      	mov	r1, r4
1a004c28:	4628      	mov	r0, r5
1a004c2a:	f7ff f9f5 	bl	1a004018 <_fflush_r>
1a004c2e:	b988      	cbnz	r0, 1a004c54 <__swbuf_r+0x90>
1a004c30:	4638      	mov	r0, r7
1a004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004c34:	4b0a      	ldr	r3, [pc, #40]	; (1a004c60 <__swbuf_r+0x9c>)
1a004c36:	429c      	cmp	r4, r3
1a004c38:	d101      	bne.n	1a004c3e <__swbuf_r+0x7a>
1a004c3a:	68ac      	ldr	r4, [r5, #8]
1a004c3c:	e7cf      	b.n	1a004bde <__swbuf_r+0x1a>
1a004c3e:	4b09      	ldr	r3, [pc, #36]	; (1a004c64 <__swbuf_r+0xa0>)
1a004c40:	429c      	cmp	r4, r3
1a004c42:	bf08      	it	eq
1a004c44:	68ec      	ldreq	r4, [r5, #12]
1a004c46:	e7ca      	b.n	1a004bde <__swbuf_r+0x1a>
1a004c48:	4621      	mov	r1, r4
1a004c4a:	4628      	mov	r0, r5
1a004c4c:	f000 f80c 	bl	1a004c68 <__swsetup_r>
1a004c50:	2800      	cmp	r0, #0
1a004c52:	d0cb      	beq.n	1a004bec <__swbuf_r+0x28>
1a004c54:	f04f 37ff 	mov.w	r7, #4294967295
1a004c58:	e7ea      	b.n	1a004c30 <__swbuf_r+0x6c>
1a004c5a:	bf00      	nop
1a004c5c:	1a005294 	.word	0x1a005294
1a004c60:	1a0052b4 	.word	0x1a0052b4
1a004c64:	1a005274 	.word	0x1a005274

1a004c68 <__swsetup_r>:
1a004c68:	4b32      	ldr	r3, [pc, #200]	; (1a004d34 <__swsetup_r+0xcc>)
1a004c6a:	b570      	push	{r4, r5, r6, lr}
1a004c6c:	681d      	ldr	r5, [r3, #0]
1a004c6e:	4606      	mov	r6, r0
1a004c70:	460c      	mov	r4, r1
1a004c72:	b125      	cbz	r5, 1a004c7e <__swsetup_r+0x16>
1a004c74:	69ab      	ldr	r3, [r5, #24]
1a004c76:	b913      	cbnz	r3, 1a004c7e <__swsetup_r+0x16>
1a004c78:	4628      	mov	r0, r5
1a004c7a:	f7ff fa61 	bl	1a004140 <__sinit>
1a004c7e:	4b2e      	ldr	r3, [pc, #184]	; (1a004d38 <__swsetup_r+0xd0>)
1a004c80:	429c      	cmp	r4, r3
1a004c82:	d10f      	bne.n	1a004ca4 <__swsetup_r+0x3c>
1a004c84:	686c      	ldr	r4, [r5, #4]
1a004c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004c8a:	b29a      	uxth	r2, r3
1a004c8c:	0715      	lsls	r5, r2, #28
1a004c8e:	d42c      	bmi.n	1a004cea <__swsetup_r+0x82>
1a004c90:	06d0      	lsls	r0, r2, #27
1a004c92:	d411      	bmi.n	1a004cb8 <__swsetup_r+0x50>
1a004c94:	2209      	movs	r2, #9
1a004c96:	6032      	str	r2, [r6, #0]
1a004c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004c9c:	81a3      	strh	r3, [r4, #12]
1a004c9e:	f04f 30ff 	mov.w	r0, #4294967295
1a004ca2:	e03e      	b.n	1a004d22 <__swsetup_r+0xba>
1a004ca4:	4b25      	ldr	r3, [pc, #148]	; (1a004d3c <__swsetup_r+0xd4>)
1a004ca6:	429c      	cmp	r4, r3
1a004ca8:	d101      	bne.n	1a004cae <__swsetup_r+0x46>
1a004caa:	68ac      	ldr	r4, [r5, #8]
1a004cac:	e7eb      	b.n	1a004c86 <__swsetup_r+0x1e>
1a004cae:	4b24      	ldr	r3, [pc, #144]	; (1a004d40 <__swsetup_r+0xd8>)
1a004cb0:	429c      	cmp	r4, r3
1a004cb2:	bf08      	it	eq
1a004cb4:	68ec      	ldreq	r4, [r5, #12]
1a004cb6:	e7e6      	b.n	1a004c86 <__swsetup_r+0x1e>
1a004cb8:	0751      	lsls	r1, r2, #29
1a004cba:	d512      	bpl.n	1a004ce2 <__swsetup_r+0x7a>
1a004cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004cbe:	b141      	cbz	r1, 1a004cd2 <__swsetup_r+0x6a>
1a004cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004cc4:	4299      	cmp	r1, r3
1a004cc6:	d002      	beq.n	1a004cce <__swsetup_r+0x66>
1a004cc8:	4630      	mov	r0, r6
1a004cca:	f7ff fb13 	bl	1a0042f4 <_free_r>
1a004cce:	2300      	movs	r3, #0
1a004cd0:	6363      	str	r3, [r4, #52]	; 0x34
1a004cd2:	89a3      	ldrh	r3, [r4, #12]
1a004cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004cd8:	81a3      	strh	r3, [r4, #12]
1a004cda:	2300      	movs	r3, #0
1a004cdc:	6063      	str	r3, [r4, #4]
1a004cde:	6923      	ldr	r3, [r4, #16]
1a004ce0:	6023      	str	r3, [r4, #0]
1a004ce2:	89a3      	ldrh	r3, [r4, #12]
1a004ce4:	f043 0308 	orr.w	r3, r3, #8
1a004ce8:	81a3      	strh	r3, [r4, #12]
1a004cea:	6923      	ldr	r3, [r4, #16]
1a004cec:	b94b      	cbnz	r3, 1a004d02 <__swsetup_r+0x9a>
1a004cee:	89a3      	ldrh	r3, [r4, #12]
1a004cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004cf8:	d003      	beq.n	1a004d02 <__swsetup_r+0x9a>
1a004cfa:	4621      	mov	r1, r4
1a004cfc:	4630      	mov	r0, r6
1a004cfe:	f000 f845 	bl	1a004d8c <__smakebuf_r>
1a004d02:	89a2      	ldrh	r2, [r4, #12]
1a004d04:	f012 0301 	ands.w	r3, r2, #1
1a004d08:	d00c      	beq.n	1a004d24 <__swsetup_r+0xbc>
1a004d0a:	2300      	movs	r3, #0
1a004d0c:	60a3      	str	r3, [r4, #8]
1a004d0e:	6963      	ldr	r3, [r4, #20]
1a004d10:	425b      	negs	r3, r3
1a004d12:	61a3      	str	r3, [r4, #24]
1a004d14:	6923      	ldr	r3, [r4, #16]
1a004d16:	b953      	cbnz	r3, 1a004d2e <__swsetup_r+0xc6>
1a004d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004d1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004d20:	d1ba      	bne.n	1a004c98 <__swsetup_r+0x30>
1a004d22:	bd70      	pop	{r4, r5, r6, pc}
1a004d24:	0792      	lsls	r2, r2, #30
1a004d26:	bf58      	it	pl
1a004d28:	6963      	ldrpl	r3, [r4, #20]
1a004d2a:	60a3      	str	r3, [r4, #8]
1a004d2c:	e7f2      	b.n	1a004d14 <__swsetup_r+0xac>
1a004d2e:	2000      	movs	r0, #0
1a004d30:	e7f7      	b.n	1a004d22 <__swsetup_r+0xba>
1a004d32:	bf00      	nop
1a004d34:	10000040 	.word	0x10000040
1a004d38:	1a005294 	.word	0x1a005294
1a004d3c:	1a0052b4 	.word	0x1a0052b4
1a004d40:	1a005274 	.word	0x1a005274

1a004d44 <__swhatbuf_r>:
1a004d44:	b570      	push	{r4, r5, r6, lr}
1a004d46:	460e      	mov	r6, r1
1a004d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004d4c:	2900      	cmp	r1, #0
1a004d4e:	b096      	sub	sp, #88	; 0x58
1a004d50:	4614      	mov	r4, r2
1a004d52:	461d      	mov	r5, r3
1a004d54:	da07      	bge.n	1a004d66 <__swhatbuf_r+0x22>
1a004d56:	2300      	movs	r3, #0
1a004d58:	602b      	str	r3, [r5, #0]
1a004d5a:	89b3      	ldrh	r3, [r6, #12]
1a004d5c:	061a      	lsls	r2, r3, #24
1a004d5e:	d410      	bmi.n	1a004d82 <__swhatbuf_r+0x3e>
1a004d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004d64:	e00e      	b.n	1a004d84 <__swhatbuf_r+0x40>
1a004d66:	466a      	mov	r2, sp
1a004d68:	f7fb fc57 	bl	1a00061a <_fstat_r>
1a004d6c:	2800      	cmp	r0, #0
1a004d6e:	dbf2      	blt.n	1a004d56 <__swhatbuf_r+0x12>
1a004d70:	9a01      	ldr	r2, [sp, #4]
1a004d72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004d76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a004d7a:	425a      	negs	r2, r3
1a004d7c:	415a      	adcs	r2, r3
1a004d7e:	602a      	str	r2, [r5, #0]
1a004d80:	e7ee      	b.n	1a004d60 <__swhatbuf_r+0x1c>
1a004d82:	2340      	movs	r3, #64	; 0x40
1a004d84:	2000      	movs	r0, #0
1a004d86:	6023      	str	r3, [r4, #0]
1a004d88:	b016      	add	sp, #88	; 0x58
1a004d8a:	bd70      	pop	{r4, r5, r6, pc}

1a004d8c <__smakebuf_r>:
1a004d8c:	898b      	ldrh	r3, [r1, #12]
1a004d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004d90:	079d      	lsls	r5, r3, #30
1a004d92:	4606      	mov	r6, r0
1a004d94:	460c      	mov	r4, r1
1a004d96:	d507      	bpl.n	1a004da8 <__smakebuf_r+0x1c>
1a004d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004d9c:	6023      	str	r3, [r4, #0]
1a004d9e:	6123      	str	r3, [r4, #16]
1a004da0:	2301      	movs	r3, #1
1a004da2:	6163      	str	r3, [r4, #20]
1a004da4:	b002      	add	sp, #8
1a004da6:	bd70      	pop	{r4, r5, r6, pc}
1a004da8:	ab01      	add	r3, sp, #4
1a004daa:	466a      	mov	r2, sp
1a004dac:	f7ff ffca 	bl	1a004d44 <__swhatbuf_r>
1a004db0:	9900      	ldr	r1, [sp, #0]
1a004db2:	4605      	mov	r5, r0
1a004db4:	4630      	mov	r0, r6
1a004db6:	f7ff faeb 	bl	1a004390 <_malloc_r>
1a004dba:	b948      	cbnz	r0, 1a004dd0 <__smakebuf_r+0x44>
1a004dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004dc0:	059a      	lsls	r2, r3, #22
1a004dc2:	d4ef      	bmi.n	1a004da4 <__smakebuf_r+0x18>
1a004dc4:	f023 0303 	bic.w	r3, r3, #3
1a004dc8:	f043 0302 	orr.w	r3, r3, #2
1a004dcc:	81a3      	strh	r3, [r4, #12]
1a004dce:	e7e3      	b.n	1a004d98 <__smakebuf_r+0xc>
1a004dd0:	4b0d      	ldr	r3, [pc, #52]	; (1a004e08 <__smakebuf_r+0x7c>)
1a004dd2:	62b3      	str	r3, [r6, #40]	; 0x28
1a004dd4:	89a3      	ldrh	r3, [r4, #12]
1a004dd6:	6020      	str	r0, [r4, #0]
1a004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004ddc:	81a3      	strh	r3, [r4, #12]
1a004dde:	9b00      	ldr	r3, [sp, #0]
1a004de0:	6163      	str	r3, [r4, #20]
1a004de2:	9b01      	ldr	r3, [sp, #4]
1a004de4:	6120      	str	r0, [r4, #16]
1a004de6:	b15b      	cbz	r3, 1a004e00 <__smakebuf_r+0x74>
1a004de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004dec:	4630      	mov	r0, r6
1a004dee:	f7fb fc19 	bl	1a000624 <_isatty_r>
1a004df2:	b128      	cbz	r0, 1a004e00 <__smakebuf_r+0x74>
1a004df4:	89a3      	ldrh	r3, [r4, #12]
1a004df6:	f023 0303 	bic.w	r3, r3, #3
1a004dfa:	f043 0301 	orr.w	r3, r3, #1
1a004dfe:	81a3      	strh	r3, [r4, #12]
1a004e00:	89a3      	ldrh	r3, [r4, #12]
1a004e02:	431d      	orrs	r5, r3
1a004e04:	81a5      	strh	r5, [r4, #12]
1a004e06:	e7cd      	b.n	1a004da4 <__smakebuf_r+0x18>
1a004e08:	1a0040d9 	.word	0x1a0040d9
1a004e0c:	ffffffff 	.word	0xffffffff

1a004e10 <memchr>:
1a004e10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004e14:	2a10      	cmp	r2, #16
1a004e16:	db2b      	blt.n	1a004e70 <memchr+0x60>
1a004e18:	f010 0f07 	tst.w	r0, #7
1a004e1c:	d008      	beq.n	1a004e30 <memchr+0x20>
1a004e1e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004e22:	3a01      	subs	r2, #1
1a004e24:	428b      	cmp	r3, r1
1a004e26:	d02d      	beq.n	1a004e84 <memchr+0x74>
1a004e28:	f010 0f07 	tst.w	r0, #7
1a004e2c:	b342      	cbz	r2, 1a004e80 <memchr+0x70>
1a004e2e:	d1f6      	bne.n	1a004e1e <memchr+0xe>
1a004e30:	b4f0      	push	{r4, r5, r6, r7}
1a004e32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004e36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004e3a:	f022 0407 	bic.w	r4, r2, #7
1a004e3e:	f07f 0700 	mvns.w	r7, #0
1a004e42:	2300      	movs	r3, #0
1a004e44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004e48:	3c08      	subs	r4, #8
1a004e4a:	ea85 0501 	eor.w	r5, r5, r1
1a004e4e:	ea86 0601 	eor.w	r6, r6, r1
1a004e52:	fa85 f547 	uadd8	r5, r5, r7
1a004e56:	faa3 f587 	sel	r5, r3, r7
1a004e5a:	fa86 f647 	uadd8	r6, r6, r7
1a004e5e:	faa5 f687 	sel	r6, r5, r7
1a004e62:	b98e      	cbnz	r6, 1a004e88 <memchr+0x78>
1a004e64:	d1ee      	bne.n	1a004e44 <memchr+0x34>
1a004e66:	bcf0      	pop	{r4, r5, r6, r7}
1a004e68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004e6c:	f002 0207 	and.w	r2, r2, #7
1a004e70:	b132      	cbz	r2, 1a004e80 <memchr+0x70>
1a004e72:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004e76:	3a01      	subs	r2, #1
1a004e78:	ea83 0301 	eor.w	r3, r3, r1
1a004e7c:	b113      	cbz	r3, 1a004e84 <memchr+0x74>
1a004e7e:	d1f8      	bne.n	1a004e72 <memchr+0x62>
1a004e80:	2000      	movs	r0, #0
1a004e82:	4770      	bx	lr
1a004e84:	3801      	subs	r0, #1
1a004e86:	4770      	bx	lr
1a004e88:	2d00      	cmp	r5, #0
1a004e8a:	bf06      	itte	eq
1a004e8c:	4635      	moveq	r5, r6
1a004e8e:	3803      	subeq	r0, #3
1a004e90:	3807      	subne	r0, #7
1a004e92:	f015 0f01 	tst.w	r5, #1
1a004e96:	d107      	bne.n	1a004ea8 <memchr+0x98>
1a004e98:	3001      	adds	r0, #1
1a004e9a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004e9e:	bf02      	ittt	eq
1a004ea0:	3001      	addeq	r0, #1
1a004ea2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004ea6:	3001      	addeq	r0, #1
1a004ea8:	bcf0      	pop	{r4, r5, r6, r7}
1a004eaa:	3801      	subs	r0, #1
1a004eac:	4770      	bx	lr
1a004eae:	bf00      	nop

1a004eb0 <__malloc_lock>:
1a004eb0:	4801      	ldr	r0, [pc, #4]	; (1a004eb8 <__malloc_lock+0x8>)
1a004eb2:	f7ff ba06 	b.w	1a0042c2 <__retarget_lock_acquire_recursive>
1a004eb6:	bf00      	nop
1a004eb8:	10002320 	.word	0x10002320

1a004ebc <__malloc_unlock>:
1a004ebc:	4801      	ldr	r0, [pc, #4]	; (1a004ec4 <__malloc_unlock+0x8>)
1a004ebe:	f7ff ba01 	b.w	1a0042c4 <__retarget_lock_release_recursive>
1a004ec2:	bf00      	nop
1a004ec4:	10002320 	.word	0x10002320
1a004ec8:	636f6c43 	.word	0x636f6c43
1a004ecc:	6e49206b 	.word	0x6e49206b
1a004ed0:	4f207469 	.word	0x4f207469
1a004ed4:	ff000d4b 	.word	0xff000d4b
1a004ed8:	6d644154 	.word	0x6d644154
1a004edc:	00000000 	.word	0x00000000
1a004ee0:	636f6c63 	.word	0x636f6c63
1a004ee4:	61745f6b 	.word	0x61745f6b
1a004ee8:	00006b73 	.word	0x00006b73
1a004eec:	6d656874 	.word	0x6d656874
1a004ef0:	756f636f 	.word	0x756f636f
1a004ef4:	5f656c70 	.word	0x5f656c70
1a004ef8:	6b736174 	.word	0x6b736174
1a004efc:	ffffff00 	.word	0xffffff00
1a004f00:	51726d54 	.word	0x51726d54
1a004f04:	ffffff00 	.word	0xffffff00
1a004f08:	20726d54 	.word	0x20726d54
1a004f0c:	00637653 	.word	0x00637653
1a004f10:	454c4449 	.word	0x454c4449
1a004f14:	ffffff00 	.word	0xffffff00
1a004f18:	6c707041 	.word	0x6c707041
1a004f1c:	74616369 	.word	0x74616369
1a004f20:	206e6f69 	.word	0x206e6f69
1a004f24:	6c6c614d 	.word	0x6c6c614d
1a004f28:	4620636f 	.word	0x4620636f
1a004f2c:	656c6961 	.word	0x656c6961
1a004f30:	6f482064 	.word	0x6f482064
1a004f34:	0d216b6f 	.word	0x0d216b6f
1a004f38:	00000000 	.word	0x00000000
1a004f3c:	7362696c 	.word	0x7362696c
1a004f40:	6572662f 	.word	0x6572662f
1a004f44:	6f747265 	.word	0x6f747265
1a004f48:	6f732f73 	.word	0x6f732f73
1a004f4c:	65637275 	.word	0x65637275
1a004f50:	6f6f682f 	.word	0x6f6f682f
1a004f54:	632e736b 	.word	0x632e736b
1a004f58:	ffffff00 	.word	0xffffff00
1a004f5c:	70410a0d 	.word	0x70410a0d
1a004f60:	63696c70 	.word	0x63696c70
1a004f64:	6f697461 	.word	0x6f697461
1a004f68:	7453206e 	.word	0x7453206e
1a004f6c:	206b6361 	.word	0x206b6361
1a004f70:	7265764f 	.word	0x7265764f
1a004f74:	776f6c66 	.word	0x776f6c66
1a004f78:	6f202121 	.word	0x6f202121
1a004f7c:	6154206e 	.word	0x6154206e
1a004f80:	203a6b73 	.word	0x203a6b73
1a004f84:	0a0d7325 	.word	0x0a0d7325
1a004f88:	ffffff00 	.word	0xffffff00
1a004f8c:	41760a0d 	.word	0x41760a0d
1a004f90:	72657373 	.word	0x72657373
1a004f94:	6c614374 	.word	0x6c614374
1a004f98:	2864656c 	.word	0x2864656c
1a004f9c:	200a0d29 	.word	0x200a0d29
1a004fa0:	4c4c2020 	.word	0x4c4c2020
1a004fa4:	20656e69 	.word	0x20656e69
1a004fa8:	626d754e 	.word	0x626d754e
1a004fac:	3d207265 	.word	0x3d207265
1a004fb0:	0d642520 	.word	0x0d642520
1a004fb4:	2020200a 	.word	0x2020200a
1a004fb8:	656c6946 	.word	0x656c6946
1a004fbc:	6d614e20 	.word	0x6d614e20
1a004fc0:	203d2065 	.word	0x203d2065
1a004fc4:	0a0d7325 	.word	0x0a0d7325
1a004fc8:	ff000a0d 	.word	0xff000a0d

1a004fcc <InitClkStates>:
1a004fcc:	01010f01                                ....

1a004fd0 <pinmuxing>:
1a004fd0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004fe0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004ff0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005000:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005010:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005020:	00d50301 00d50401 00160107 00560207     ..............V.
1a005030:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005040:	00570206                                ..W.

1a005044 <ExtRateIn>:
1a005044:	00000000                                ....

1a005048 <GpioButtons>:
1a005048:	08000400 09010900                       ........

1a005050 <GpioLeds>:
1a005050:	01050005 0e000205 0c010b01              ............

1a00505c <GpioPorts>:
1a00505c:	03030003 0f050403 05031005 07030603     ................
1a00506c:	ffff0802                                ....

1a005070 <OscRateIn>:
1a005070:	00b71b00                                ....

1a005074 <InitClkStates>:
1a005074:	00010100 00010909 0001090a 01010701     ................
1a005084:	00010902 00010906 0101090c 0001090d     ................
1a005094:	0001090e 0001090f 00010910 00010911     ................
1a0050a4:	00010912 00010913 00011114 00011119     ................
1a0050b4:	0001111a 0001111b 08040201 0f0f0f03     ................
1a0050c4:	000000ff                                ....

1a0050c8 <periph_to_base>:
1a0050c8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0050d8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0050e8:	000100e0 01000100 01200003 00060120     .......... . ...
1a0050f8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005108:	01820013 00120182 01a201a2 01c20011     ................
1a005118:	001001c2 01e201e2 0202000f 000e0202     ................
1a005128:	02220222 0223000d 001c0223              "."...#.#...

1a005134 <UART_BClock>:
1a005134:	01a201c2 01620182                       ......b.

1a00513c <UART_PClock>:
1a00513c:	00820081 00a200a1                       ........

1a005144 <gpioPinsInit>:
1a005144:	02000104 00050701 05010d03 04080100     ................
1a005154:	02020002 02000304 00000403 04070002     ................
1a005164:	030c0300 09050402 05040103 04030208     ................
1a005174:	04020305 06040504 0802000c 03000b06     ................
1a005184:	00090607 07060503 060f0504 03030004     ................
1a005194:	02000404 00050404 06040502 04060200     ................
1a0051a4:	0c050408 05040a04 0003010e 14010a00     ................
1a0051b4:	010f0000 0d000012 00001101 0010010c     ................
1a0051c4:	07070300 000f0300 01000001 00000000     ................
1a0051d4:	000a0600 08060603 06100504 04030005     ................
1a0051e4:	03000106 04090400 04010d05 010b0000     ................
1a0051f4:	0200000f 00000001 00010104 02010800     ................
1a005204:	01090000 09010006 05040002 04010200     ................
1a005214:	02020105 02020504 0e00000a 01000b02     ................
1a005224:	000c020b ffff0c01                       ........

1a00522c <lpcUarts>:
1a00522c:	40081000 06020406 00180205 40081000     ...@...........@
1a00523c:	09070509 00180706 40082000 00000000     ......... .@....
1a00524c:	00190000 400c1000 07060107 001a0602     .......@........
1a00525c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00526c:	02020302 001b0204                       ........

1a005274 <__sf_fake_stderr>:
	...

1a005294 <__sf_fake_stdin>:
	...

1a0052b4 <__sf_fake_stdout>:
	...

1a0052d4 <_global_impure_ptr>:
1a0052d4:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a0052e4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a0052f4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a005304:	64636261 ff006665                       abcdef..
